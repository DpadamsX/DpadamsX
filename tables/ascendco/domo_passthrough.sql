-------------------------------------- Define table------------------------------------BEGIN;DROP TABLE IF EXISTS ascendco.domo_passthrough CASCADE;CREATE TABLE IF NOT EXISTS ascendco.domo_passthrough (	id uuid NOT NULL DEFAULT extensions.gen_random_uuid() PRIMARY KEY,  -- Random unique UUID becuase that's our convention.	source_id	   uuid         NOT NULL DEFAULT NULL, -- The main source of the data, like [SterilizerLoad]ID	hsys_id        uuid         NOT NULL DEFAULT '00000000000000000000000000000000',	facility_id    uuid         NOT NULL DEFAULT '00000000000000000000000000000000',	view_version   integer      NOT NULL DEFAULT NULL, -- Used to future-proof changes to the JSONB (data) format when expanded for Domo.	dataset_name   text         NOT NULL DEFAULT NULL, -- The Domo DataSet this record is meant for.	key_supplement citext       NOT NULL DEFAULT '', -- Wor when source_id alone is not enough to distinguish the row within the data set.	data           jsonb        NOT NULL DEFAULT '{}', -- The data itself, packed into JSON. Each row in PG is one row in the DataSet.	from_dts       timestamp    NOT NULL DEFAULT 'epoch'::TIMESTAMP,	to_dts         timestamp    NOT NULL DEFAULT 'epoch'::TIMESTAMP,	created_dts    timestamptz  NOT NULL DEFAULT 'NOW()',-- This extra constraint blocks the same basic row from appearing twice in the same DataSet.-- Like, [SterilizerLoad]ID in the same DataSet redundantly. Postgres' UPSERT syntax uses-- constraints by name, so setting things up this way makes things really simple.CONSTRAINT domo_passthrough_key_unique	UNIQUE (source_id, dataset_name, key_supplement));ALTER TABLE ascendco.domo_passthrough	OWNER TO user_change_structure;COMMIT;-------------------------------------- Build indexes-------------------------------------- The following speeds up finding the right rows for a Domo pull, at least a bit.CREATE INDEX passthrough_dataset_name_and_version_ix_btree     ON ascendco.domo_passthrough (dataset_name, view_version);-------------------------------------- Add triggers------------------------------------CREATE TRIGGER trigger_domo_passthrough_after_delete	AFTER DELETE	ON ascendco.domo_passthrough	REFERENCING OLD TABLE AS deleted_rows	FOR EACH STATEMENT	EXECUTE PROCEDURE ascendco.trigger_function_log_deletion_count();CREATE TRIGGER trigger_domo_passthrough_before_truncate	BEFORE TRUNCATE ON ascendco.domo_passthrough	FOR EACH STATEMENT	EXECUTE PROCEDURE ascendco.trigger_function_log_truncation_count();
-------------------------------------- Define text_collection table------------------------------------DROP TABLE IF EXISTS ascendco.text_collection CASCADE;CREATE TABLE IF NOT EXISTS ascendco.text_collection (	id                uuid         NOT NULL DEFAULT extensions.gen_random_uuid(),    collection_name   citext       NOT NULL DEFAULT '',    added_dts         timestamptz  NOT NULL DEFAULT NOW()::timestamptz,	facility_id       uuid         NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000'::uuid,    retain            boolean      NOT NULL DEFAULT false); -- Skip true rows when purging old data.ALTER TABLE ascendco.text_collection	ADD CONSTRAINT text_collection_pkey    PRIMARY KEY (id);ALTER TABLE ascendco.text_collection	SET UNLOGGED;/*This is a good place for a temoprary table, as the cleanup happens automatically when you drop the connection.For now, I want to keep the ability to spot-check the strings while I'm developing. Maybe I'll switch totemporary tables later. For now, I'm going with UNLOGGED as at least it clears out some overhead on INSERTand DELETE, one of the benefits of temporary tables.https://www.depesz.com/2011/01/03/waiting-for-9-1-unlogged-tables/https://blog.nukomeet.com/faster-inserts-how-to-increase-postgresql-write-performance-24d76bd56f75List all unlogged tables within the current database.SELECT relname FROM pg_class WHERE relpersistence = 'u';*/-------------------------------------- Build indexes-------------------------------------- If a name/label is included, it should be unique.CREATE UNIQUE INDEX text_collection_name_idx	ON ascendco.text_collection (collection_name)	WHERE (collection_name <> '');-------------------------------------- Add triggers-------------------------------------- Nope, this is pretty much a one-and-done table, don't care about tracking deletes, etc.-------------------------------------- Add GRANTS-------------------------------------- Not normal, jamming these in for my quick tests.GRANT SELECT, INSERT, UPDATE, DELETE ON text_collection TO rds_super;GRANT SELECT, INSERT, UPDATE, DELETE ON text_collection TO user_reporting;GRANT SELECT, INSERT, UPDATE, DELETE ON text_collection TO user_iceberg;GRANT SELECT, INSERT, UPDATE, DELETE ON text_collection TO user_change_structure;GRANT SELECT, INSERT, UPDATE, DELETE ON text_collection TO user_sonar;
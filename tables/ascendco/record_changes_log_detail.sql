-------------------------------------- Define table------------------------------------BEGIN;DROP TABLE IF EXISTS ascendco.record_changes_log_detail;CREATE TABLE ascendco.record_changes_log_detail (	id uuid NOT NULL DEFAULT gen_random_uuid(),	record_changes_log_id uuid NOT NULL,	record_id uuid,	field_name extensions.citext COLLATE pg_catalog.default NOT NULL,	old_value extensions.citext COLLATE pg_catalog.default NOT NULL,	new_value extensions.citext COLLATE pg_catalog.default NOT NULL);ALTER TABLE ascendco.record_changes_log_detail	ADD CONSTRAINT record_changes_log_detail_pkey	PRIMARY KEY (id);ALTER TABLE ascendco.record_changes_log_detail	ADD CONSTRAINT fk_record_changes_log_detail_to_record_changes_log	FOREIGN KEY (record_changes_log_id)		REFERENCES ascendco.record_changes_log (id)		ON DELETE CASCADE		ON UPDATE NO ACTION;ALTER TABLE ascendco.record_changes_log_detail	OWNER TO user_change_structure;COMMENT ON TABLE ascendco.record_changes_log_detail IS	'The record_id field is populated in the BEFORE INSERT trigger and validated for NOT NULL in the AFTER INSERT';COMMIT;-------------------------------------- Build indexes------------------------------------/*CREATE INDEX record_changes_log_detail_field_name_ix_btree	ON ascendco.record_changes_log_detail	USING btree (field_name COLLATE pg_catalog.default extensions.citext_ops ASC NULLS LAST);CREATE INDEX record_changes_log_detail_old_value_hash_ix_btree	ON ascendco.record_changes_log_detail	USING btree (hashtext(old_value::text) pg_catalog.int4_ops ASC NULLS LAST);CREATE INDEX record_changes_log_detail_old_value_ix_btree	ON ascendco.record_changes_log_detail	USING btree ((left(old_value::text, 1024)::citext) COLLATE pg_catalog.default extensions.citext_pattern_ops ASC NULLS LAST);CREATE INDEX record_changes_log_detail_old_value_ix_tgrm	ON ascendco.record_changes_log_detail	USING GIN (old_value COLLATE pg_catalog.default extensions.gin_trgm_ops);CREATE INDEX record_changes_log_detail_old_value_tsv_gin	ON ascendco.record_changes_log_detail	USING GIN (to_tsvector('simple_skip'::regconfig, old_value::text) pg_catalog.tsvector_ops);*/CREATE INDEX record_changes_log_id_ix_fkey	ON ascendco.record_changes_log_detail	USING btree (record_changes_log_id pg_catalog.uuid_ops ASC NULLS LAST);-------------------------------------- Define trigger functions------------------------------------CREATE OR REPLACE FUNCTION ascendco.trigger_function_record_changes_log_detail_before_insert()  RETURNS triggerAS $BODY$BEGIN	NEW.record_id := rcl_get_record_id (NEW.record_changes_log_id); RETURN NEW;END$BODY$  LANGUAGE plpgsql VOLATILE  COST 100;ALTER FUNCTION ascendco.trigger_function_record_changes_log_detail_before_insert	OWNER TO user_bender;CREATE OR REPLACE FUNCTION ascendco.trigger_function_record_changes_log_detail_after_insert()RETURNS trigger AS$BODY$BEGIN   IF NEW.record_id IS NULL THEN			RAISE EXCEPTION 'ERROR:  null value in column record_id violates not-null constraint';   END IF;	 RETURN NEW;END$BODY$  LANGUAGE plpgsql VOLATILE  COST 100;ALTER FUNCTION ascendco.trigger_function_record_changes_log_detail_after_insert	OWNER TO user_bender;CREATE OR REPLACE FUNCTION ascendco.trigger_function_record_changes_log_detail_stop_duplicates()  RETURNS triggerAS $BODY$BEGINIF EXISTS (SELECT 1 FROM record_changes_log_detail           WHERE (           	record_changes_log_id,           	hashtext(field_name || old_value || new_value))             =             (NEW.record_changes_log_id,           	hashtext(NEW.field_name || NEW.old_value || NEW.new_value))) THEN   RETURN NULL;END IF;RETURN NEW;END$BODY$	LANGUAGE plpgsql;COMMENT ON FUNCTION ascendco.trigger_function_record_changes_log_detail_stop_duplicates() IS 'Buggy parse in push code in IB, blocking duplicates in an old-fashioned way. Eventually, want to clear the duplicates and add a UNIQUE constraint.';ALTER FUNCTION ascendco.trigger_function_record_changes_log_detail_stop_duplicates	OWNER TO user_bender;-------------------------------------- Add triggers------------------------------------CREATE TRIGGER trigger_record_changes_log_detail_after_insert	AFTER INSERT	ON ascendco.record_changes_log_detail	FOR EACH ROW	EXECUTE PROCEDURE ascendco.trigger_function_record_changes_log_detail_after_insert();CREATE TRIGGER trigger_record_changes_log_detail_before_insert	BEFORE INSERT	ON ascendco.record_changes_log_detail	FOR EACH ROW	EXECUTE PROCEDURE ascendco.trigger_function_record_changes_log_detail_before_insert();CREATE TRIGGER trigger_record_changes_log_detail_before_upsert	BEFORE INSERT OR UPDATE	ON record_changes_log_detail	FOR EACH ROW	EXECUTE PROCEDURE trigger_function_record_changes_log_detail_stop_duplicates();CREATE TRIGGER trigger_record_changes_log_detail_after_delete	AFTER DELETE	ON ascendco.record_changes_log_detail	REFERENCING OLD TABLE AS deleted_rows	FOR EACH STATEMENT	EXECUTE PROCEDURE ascendco.trigger_function_log_deletion_count();CREATE TRIGGER trigger_record_changes_log_detail_before_truncate	BEFORE TRUNCATE	ON ascendco.record_changes_log_detail	FOR EACH STATEMENT	EXECUTE PROCEDURE ascendco.trigger_function_log_truncation_count();
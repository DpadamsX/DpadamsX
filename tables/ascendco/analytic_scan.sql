-------------------------------------- Define table------------------------------------BEGIN;DROP TABLE IF EXISTS ascendco.analytic_scan CASCADE;CREATE TABLE IF NOT EXISTS ascendco.analytic_scan (	id uuid NOT NULL DEFAULT NULL,	pg_con_id integer GENERATED BY DEFAULT AS IDENTITY UNIQUE,	data_file_id uuid NOT NULL DEFAULT NULL,	marked_for_deletion boolean NOT NULL DEFAULT false,	hsys_id uuid NOT NULL DEFAULT NULL,	facility_id uuid NOT NULL DEFAULT NULL,	facility_location_id uuid NOT NULL DEFAULT NULL,	specialty_id uuid NOT NULL DEFAULT NULL,	scanned_type citext NOT NULL DEFAULT NULL,	associated_to citext NOT NULL DEFAULT NULL,	user_name citext NOT NULL DEFAULT NULL,	inv_name citext NOT NULL DEFAULT 0,	num_inst integer NOT NULL DEFAULT 0,	tray_or_pack citext NOT NULL DEFAULT NULL,	item_name citext NOT NULL DEFAULT NULL,	location_description citext NOT NULL DEFAULT '',	scan_time_utc_dts timestamptz NOT NULL DEFAULT '-infinity',	scan_time_local_dts timestamptz NOT NULL DEFAULT '-infinity');ALTER TABLE ascendco.analytic_scan	ADD CONSTRAINT analytic_scan_id_pkey	PRIMARY KEY (id);ALTER TABLE ascendco.analytic_scan  ALTER COLUMN associated_to	SET STATISTICS 200;ALTER TABLE ascendco.analytic_scan	OWNER TO user_change_structure;COMMIT;-------------------------------------- Build indexes------------------------------------CREATE INDEX analytic_scan_facility_id_ix_fkey	ON ascendco.analytic_scan	USING btree(facility_id pg_catalog.uuid_ops ASC NULLS LAST);-------------------------------------- Add triggers------------------------------------CREATE TRIGGER trigger_analytic_scan_after_delete	AFTER DELETE	ON ascendco.analytic_scan	REFERENCING OLD TABLE AS deleted_rows	FOR EACH STATEMENT	EXECUTE PROCEDURE ascendco.trigger_function_log_deletion_count();CREATE TRIGGER trigger_analytic_scan_before_truncate	BEFORE TRUNCATE	ON ascendco.analytic_scan	FOR EACH STATEMENT	EXECUTE PROCEDURE ascendco.trigger_function_log_truncation_count();
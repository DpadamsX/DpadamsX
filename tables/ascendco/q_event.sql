-------------------------------------- Define table------------------------------------BEGIN;DROP TABLE IF EXISTS ascendco.q_event CASCADE;CREATE TABLE IF NOT EXISTS ascendco.q_event (    id                              uuid                 NOT NULL DEFAULT NULL PRIMARY KEY,    qtype_id                        uuid                 NOT NULL DEFAULT NULL,    qsub_type_id                    uuid                 NOT NULL DEFAULT NULL,    inv_id                          uuid                 NOT NULL DEFAULT NULL,    scan_id                         uuid                 NOT NULL DEFAULT NULL,    status_reported_by_user_id      uuid                 NOT NULL DEFAULT NULL,    status_investigating_user_id    uuid                 NOT NULL DEFAULT NULL,    status_done_user_id             uuid                 NOT NULL DEFAULT NULL,    or_surgeon_people_id            uuid                 NOT NULL DEFAULT NULL,    last_updated_by_data_file_id    uuid                 NOT NULL DEFAULT NULL,    facility_id                     uuid                 NOT NULL DEFAULT NULL,    status_when_user_id             uuid                 NOT NULL DEFAULT NULL,    assembly_id                     uuid                 NOT NULL DEFAULT NULL,    status_reported_dts             timestamp            NOT NULL DEFAULT 'epoch',    status_investigating_dts        timestamp            NOT NULL DEFAULT 'epoch',    status_done_dts                 timestamp            NOT NULL DEFAULT 'epoch',    created_dts                     timestamp            NOT NULL DEFAULT 'epoch',    updated_dts                     timestamp            NOT NULL DEFAULT 'epoch',    status_when_dts                 timestamp            NOT NULL DEFAULT 'epoch',    datetime_local                  timestamp            NOT NULL DEFAULT 'epoch',    or_delay_minutes                double precision     NOT NULL DEFAULT NULL,    marked_for_deletion             boolean              NOT NULL DEFAULT false,    assembly_audit_prods            boolean              NOT NULL DEFAULT false,    is_process_problem              boolean              NOT NULL DEFAULT false,    is_data_problem                 boolean              NOT NULL DEFAULT false,    is_coached                      boolean              NOT NULL DEFAULT false,    desc_                           citext               NOT NULL DEFAULT NULL,    status                          citext               NOT NULL DEFAULT NULL,    status_reported_by_name         citext               NOT NULL DEFAULT NULL,    status_investigating_name       citext               NOT NULL DEFAULT NULL,    status_done_name                citext               NOT NULL DEFAULT NULL,    or_room                         citext               NOT NULL DEFAULT NULL,    or_delay_type                   citext               NOT NULL DEFAULT NULL,    created_by                      citext               NOT NULL DEFAULT NULL,    updated_by                      citext               NOT NULL DEFAULT NULL,    status_when_name                citext               NOT NULL DEFAULT NULL,    notes                           citext               NOT NULL DEFAULT NULL);ALTER TABLE ascendco.q_event	OWNER TO user_change_structure;-------------------------------------- Build statistics------------------------------------/*The Postgres ANALYZE system function collects statistics about each table and column. These valuesare used by the query planner to help generate probabilistic cost estimates for various query plans.When the plans are based on misleading stats, you can have poor performance. Stats can be reconfiguredon a row-by-row basis, and some special extended statistics are supported too.Custom and extended statistics are typically added after we've been accumulating data for some time.See PgBuildStatistics_Extended in IB to declare new statistics objects. For more background, seehttps://ascendco.atlassian.net/wiki/spaces/SON/pages/1723695105/*/-------------------------------------- ANALYZE options-------------------------------------- Placholder and reminder for now. ANALYZE and AUTOVACUUM tunings are *core* Postgres DBA-- skills. But, for the minute, we're not running into trouble. I'm chipping away af figuring-- out when to tune, and how, and when not to tune. ‚Äî DPA-------------------------------------- Build indexes-------------------------------------- Note: Postgres automatically creates a UNIQUE B-tree for the PRIMARY KEY, simple or compound./* Indexing trade-offs are different in 4D and Postgres.It pays to be a bit conservative about adding indexes in Postgres, wait and see what you need.CREATE INDEX q_event_qtype_id_ix_gin          ON ascendco.q_event       USING GIN (qtype_id);CREATE INDEX q_event_qsub_type_id_ix_gin          ON ascendco.q_event       USING GIN (qsub_type_id);CREATE INDEX q_event_scan_id_ix_btree          ON ascendco.q_event       USING btree (scan_id);CREATE INDEX q_event_last_updated_by_data_file_id_ix_gin          ON ascendco.q_event       USING GIN (last_updated_by_data_file_id);CREATE INDEX q_event_facility_id_ix_gin          ON ascendco.q_event       USING GIN (facility_id);CREATE INDEX q_event_marked_for_deletion_ix_gin          ON ascendco.q_event       USING GIN (marked_for_deletion extensions.bool_ops)       WHERE marked_for_deletion = true;CREATE INDEX q_event_is_coached_ix_gin          ON ascendco.q_event       USING GIN (is_coached);CREATE INDEX q_event_status_ix_gin          ON ascendco.q_event       USING GIN (status);*/-------------------------------------- CLUSTER------------------------------------/*Code stub/reminder about CLUSTERing. Not a hard topic, but too big to write up here. Notes and links:https://ascendco.atlassian.net/wiki/spaces/SON/pages/356679683/ALTER TABLE ascendco.q_event    CLUSTER ON ***index name to cluster by here.***;*/-------------------------------------- Add triggers------------------------------------   CREATE TRIGGER trigger_q_event_after_delete            AFTER DELETE               ON ascendco.q_event      REFERENCING OLD TABLE AS deleted_rows         FOR EACH STATEMENTEXECUTE PROCEDURE ascendco.trigger_function_log_deletion_count();  CREATE TRIGGER trigger_q_event_before_truncate            BEFORE TRUNCATE               ON ascendco.q_event         FOR EACH STATEMENTEXECUTE PROCEDURE ascendco.trigger_function_log_truncation_count();-------------------------------------- Manual Permissions for now-------------------------------------- Standard permissions for utility/admin users:GRANT SELECT, INSERT, UPDATE, DELETE ON ascendco.q_event TO rds_super;GRANT SELECT, INSERT, UPDATE, DELETE ON ascendco.q_event TO user_cleanup;GRANT SELECT ON ascendco.q_event TO user_reporting;GRANT SELECT ON ascendco.q_event TO user_change_structure;-- Adjustable user permissions:GRANT SELECT ON ascendco.q_event TO user_iceberg;GRANT SELECT ON ascendco.q_event TO user_iceberg_remote;GRANT SELECT ON ascendco.q_event TO user_saws;GRANT SELECT, INSERT, UPDATE ON ascendco.q_event TO user_sonar;GRANT SELECT ON ascendco.q_event TO user_leviathan;COMMIT;
-- Create a view onto print_job formatted as print_job_v1.-- If print_job changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_print_job_v1.DROP VIEW IF EXISTS types_plus.print_job_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.print_job_v1 AS select id,        created_dts,        updated_dts,        about_to_close_print_job_dts,        processing_time_ms,        close_print_job_ms,        marked_for_deletion,        mode_,        type_,        status,        error_info,        created_by,        updated_by,        printer_name,        network_printer_name,        pdf_address,        server_name_   from print_job;ALTER TABLE types_plus.print_job_v1    OWNER TO user_change_structure;-- Create a casting function to convert print_job rows into the compound type format print_job_v1.-- If print_job changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.print_job_to_v1 (print_job_in print_job)  RETURNS print_job_v1AS $BODY$                   SELECT			print_job_in.id,			print_job_in.created_dts,			print_job_in.updated_dts,			print_job_in.about_to_close_print_job_dts,			print_job_in.processing_time_ms,			print_job_in.close_print_job_ms,			print_job_in.marked_for_deletion,			print_job_in.mode_,			print_job_in.type_,			print_job_in.status,			print_job_in.error_info,			print_job_in.created_by,			print_job_in.updated_by,			print_job_in.printer_name,			print_job_in.network_printer_name,			print_job_in.pdf_address,			print_job_in.server_name_               $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.print_job_to_v1 (print_job_in print_job)	OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert print_job rows into the print_job_v1 compound type format using the following syntax:-- select print_job::print_job_v1 from print_jobDROP CAST IF EXISTS (print_job as print_job_v1);CREATE CAST (print_job as print_job_v1) WITH FUNCTION types_plus.print_job_to_v1(print_job);-- Create a function to accept an array of rows formatted as print_job_v1 for UPSERT into print_job.DROP FUNCTION IF EXISTS types_plus.insert_print_job_v1 (types_plus.print_job_v1[]);  CREATE OR REPLACE FUNCTION types_plus.insert_print_job_v1 (data_in types_plus.print_job_v1[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO print_job (			id,			created_dts,			updated_dts,			about_to_close_print_job_dts,			processing_time_ms,			close_print_job_ms,			marked_for_deletion,			mode_,			type_,			status,			error_info,			created_by,			updated_by,			printer_name,			network_printer_name,			pdf_address,			server_name_)                  SELECT			rows_in.id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.about_to_close_print_job_dts,			rows_in.processing_time_ms,			rows_in.close_print_job_ms,			rows_in.marked_for_deletion,			rows_in.mode_,			rows_in.type_,			rows_in.status,			rows_in.error_info,			rows_in.created_by,			rows_in.updated_by,			rows_in.printer_name,			rows_in.network_printer_name,			rows_in.pdf_address,			rows_in.server_name_                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			about_to_close_print_job_dts = EXCLUDED.about_to_close_print_job_dts,			processing_time_ms = EXCLUDED.processing_time_ms,			close_print_job_ms = EXCLUDED.close_print_job_ms,			marked_for_deletion = EXCLUDED.marked_for_deletion,			mode_ = EXCLUDED.mode_,			type_ = EXCLUDED.type_,			status = EXCLUDED.status,			error_info = EXCLUDED.error_info,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			printer_name = EXCLUDED.printer_name,			network_printer_name = EXCLUDED.network_printer_name,			pdf_address = EXCLUDED.pdf_address,			server_name_ = EXCLUDED.server_name_          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_print_job_v1(types_plus.print_job_v1[])	OWNER TO user_bender;
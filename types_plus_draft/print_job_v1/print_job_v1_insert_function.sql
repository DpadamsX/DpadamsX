-- Create a function to accept an array of rows formatted as print_job_v1 for UPSERT into print_job.DROP FUNCTION IF EXISTS types_plus.insert_print_job_v1 (types_plus.print_job_v1[]);  CREATE OR REPLACE FUNCTION types_plus.insert_print_job_v1 (data_in types_plus.print_job_v1[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO print_job (			id,			created_dts,			updated_dts,			about_to_close_print_job_dts,			processing_time_ms,			close_print_job_ms,			marked_for_deletion,			mode_,			type_,			status,			error_info,			created_by,			updated_by,			printer_name,			network_printer_name,			pdf_address,			server_name_)                  SELECT			rows_in.id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.about_to_close_print_job_dts,			rows_in.processing_time_ms,			rows_in.close_print_job_ms,			rows_in.marked_for_deletion,			rows_in.mode_,			rows_in.type_,			rows_in.status,			rows_in.error_info,			rows_in.created_by,			rows_in.updated_by,			rows_in.printer_name,			rows_in.network_printer_name,			rows_in.pdf_address,			rows_in.server_name_                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			about_to_close_print_job_dts = EXCLUDED.about_to_close_print_job_dts,			processing_time_ms = EXCLUDED.processing_time_ms,			close_print_job_ms = EXCLUDED.close_print_job_ms,			marked_for_deletion = EXCLUDED.marked_for_deletion,			mode_ = EXCLUDED.mode_,			type_ = EXCLUDED.type_,			status = EXCLUDED.status,			error_info = EXCLUDED.error_info,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			printer_name = EXCLUDED.printer_name,			network_printer_name = EXCLUDED.network_printer_name,			pdf_address = EXCLUDED.pdf_address,			server_name_ = EXCLUDED.server_name_          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_print_job_v1(types_plus.print_job_v1[])	OWNER TO user_bender;
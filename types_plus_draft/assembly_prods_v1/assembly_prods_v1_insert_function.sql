-- Create a function to accept an array of rows formatted as assembly_prods_v1 for UPSERT into assembly_prods.DROP FUNCTION IF EXISTS ascendco.insert_assembly_prods_v1 (types_plus.assembly_prods_v1[]);CREATE OR REPLACE FUNCTION ascendco.insert_assembly_prods_v1 (data_in types_plus.assembly_prods_v1[])  RETURNS intAS $BODY$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO assembly_prods (			id,			data_file_id,			marked_for_deletion,			assembly_id,			item_prod_id,			last_updated_by_data_file_id,			created_dts,			updated_dts,			target,			found_,			repair,			backup,			actual,			con_id,			assembly_pos,			created_by,			updated_by)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.assembly_id,			rows_in.item_prod_id,			rows_in.last_updated_by_data_file_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.target,			rows_in.found_,			rows_in.repair,			rows_in.backup,			rows_in.actual,			rows_in.con_id,			rows_in.assembly_pos,			rows_in.created_by,			rows_in.updated_by        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			assembly_id = EXCLUDED.assembly_id,			item_prod_id = EXCLUDED.item_prod_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			target = EXCLUDED.target,			found_ = EXCLUDED.found_,			repair = EXCLUDED.repair,			backup = EXCLUDED.backup,			actual = EXCLUDED.actual,			con_id = EXCLUDED.con_id,			assembly_pos = EXCLUDED.assembly_pos,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$BODY$LANGUAGE sql;ALTER FUNCTION ascendco.insert_assembly_prods_v1(types_plus.assembly_prods_v1[]) OWNER TO user_bender;
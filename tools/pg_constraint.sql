select c.oid,       c.connamespace::regnamespace as constraing_schema,       c.conname as constraint_name,       c.contype as constraint_type_code,       case         when c.contype = 'c' then 'check constraint'         when c.contype = 'f' then 'foreign key constraint'         when c.contype = 'p' then 'primary key constraint'         when c.contype = 'u' then 'unique constraint'         when c.contype = 't' then 'constraint trigger'         when c.contype = 'x' then 'exclusion constraint'        else         'unknown constraint type code ' || c.contype        end as constraint_type_name,        c.condeferrable as is_deferrable,       c.condeferred as is_deferred_by_default,       c.convalidated as has_been_validated,       c.conrelid::regclass as table_name,       c.contypid::regtype as domain_name,       c.conindid::regclass as index_name,       coalesce(p.conname, '') as parent_partition_constraint,       c.confrelid::regclass as foreign_key_table,       c.confupdtype as foreign_key_update_action_code,       case         when c.confupdtype = ' ' then ''         when c.confupdtype = 'a' then 'no action'         when c.confupdtype = 'c' then 'cascade'         when c.confupdtype = 'd' then 'set default'         when c.confupdtype = 'n' then 'set null'         when c.confupdtype = 'r' then 'restrict'         when c.confupdtype = 'd' then 'set default'      else         'Unknown confupdtype code ' || c.confupdtype       end as foreign_key_update_action_name,       c.confdeltype as foreign_key_delete_action_code,        case         when c.confdeltype = ' ' then ''         when c.confdeltype = 'a' then 'no action'         when c.confdeltype = 'c' then 'cascade'         when c.confdeltype = 'r' then 'restrict'         when c.confdeltype = 'n' then 'set null'         when c.confdeltype = 'd' then 'set default'      else         'Unknown confdeltype code ' || c.confdeltype       end as foreign_key_delete_action_name,       c.confmatchtype as foreign_key_match_type_code,        case         when c.confmatchtype = ' ' then ''         when c.confmatchtype = 'f' then 'full'         when c.confmatchtype = 'p' then 'partial'         when c.confmatchtype = 's' then 'simple'      else         'Unknown confmatchtype code ' || c.confmatchtype       end as foreign_key_match_type_name,         c.conislocal                as is_local,         c.coninhcount               as ancestors_count,         c.connoinherit              as is_non_inheritable,         c.conkey                    as constraint_columns,         c.confkey                   as foreign_key_columns,/*-- The next four fields are oid[], and I don't know the syntax string_agg(unnest(regoperator)), so I'm leaving that out. Arcane.         c.conpfeqop::regoperator    as pk_fk_equality_operators,         c.conppeqop::regoperator    as pk_pk_equality_operators,         c.conffeqop::regoperator    as fk_fk_equality_operators,         c.conexclop::regoperator    as per_column_exclusion_operators,*/         pg_get_constraintdef(c.oid) as constraint_definition     from pg_constraint cleft join pg_constraint p on p.oid = c.conindid
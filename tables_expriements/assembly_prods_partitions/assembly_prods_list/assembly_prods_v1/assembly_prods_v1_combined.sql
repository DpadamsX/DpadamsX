-- Create a view onto assembly_prods formatted as assembly_prods_v1.-- If assembly_prods changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_assembly_prods_v1.DROP VIEW IF EXISTS types_plus.assembly_prods_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.assembly_prods_v1 AS select id,        data_file_id,        assembly_id,        item_prod_id,        created_dts,        updated_dts,        target,        found_,        repair,        backup,        actual,        assembly_pos,        marked_for_deletion,        created_by,        updated_by,        prod_alert_text_ack,        audit_events   from assembly_prods;ALTER TABLE types_plus.assembly_prods_v1    OWNER TO user_change_structure;-- Create a casting function to convert assembly_prods rows into the compound type format assembly_prods_v1.-- If assembly_prods changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.assembly_prods_to_v1 (assembly_prods_in assembly_prods)  RETURNS assembly_prods_v1AS $BODY$        SELECT			assembly_prods_in.id,			assembly_prods_in.data_file_id,			assembly_prods_in.assembly_id,			assembly_prods_in.item_prod_id,			assembly_prods_in.created_dts,			assembly_prods_in.updated_dts,			assembly_prods_in.target,			assembly_prods_in.found_,			assembly_prods_in.repair,			assembly_prods_in.backup,			assembly_prods_in.actual,			assembly_prods_in.assembly_pos,			assembly_prods_in.marked_for_deletion,			assembly_prods_in.created_by,			assembly_prods_in.updated_by,			assembly_prods_in.prod_alert_text_ack,			assembly_prods_in.audit_events$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.assembly_prods_to_v1 (assembly_prods_in assembly_prods)	OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert assembly_prods rows into the assembly_prods_v1 compound type format using the following syntax:-- select assembly_prods::assembly_prods_v1 from assembly_prodsDROP CAST IF EXISTS (assembly_prods as assembly_prods_v1);CREATE CAST (assembly_prods as assembly_prods_v1) WITH FUNCTION types_plus.assembly_prods_to_v1(assembly_prods);-- Create a function to accept an array of rows formatted as assembly_prods_v1 for UPSERT into assembly_prods.DROP FUNCTION IF EXISTS types_plus.insert_assembly_prods_v1 (types_plus.assembly_prods_v1[]);CREATE OR REPLACE FUNCTION types_plus.insert_assembly_prods_v1 (data_in types_plus.assembly_prods_v1[])  RETURNS intAS $BODY$-- Note: This method is hand-tweaked to populate partition_key with an in4 yyyy-mm, like-- 202108 for October 2021. This is how the partitions are done at the table level,-- and we can't use a generated column (not allowed) for the partiion, or an-- expression (not allowed, if you have a PRIMARY KEY.) So, extracting and adding-- the value here, rather than in a trigger. Because ugh. (Inefficient.) But, a trigger would be-- necessary if there's an INSERT mechanism other than this method. Such as, COPY, import, etc.-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO assembly_prods (			id,			data_file_id,			assembly_id,			item_prod_id,			created_dts,			updated_dts,			target,			found_,			repair,			backup,			actual,			assembly_pos,			marked_for_deletion,			created_by,			updated_by,			prod_alert_text_ack,			audit_events,			partition_key)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.assembly_id,			rows_in.item_prod_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.target,			rows_in.found_,			rows_in.repair,			rows_in.backup,			rows_in.actual,			rows_in.assembly_pos,			rows_in.marked_for_deletion,			rows_in.created_by,			rows_in.updated_by,			rows_in.prod_alert_text_ack,			rows_in.audit_events,			tools.dts_to_yyyy_mm_int (updated_dts) -- <-- Extract the partition_key in advance, can't use a generated column        FROM unnest(data_in) as rows_in        ON CONFLICT ON CONSTRAINT assembly_prods_pkey DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			assembly_id = EXCLUDED.assembly_id,			item_prod_id = EXCLUDED.item_prod_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			target = EXCLUDED.target,			found_ = EXCLUDED.found_,			repair = EXCLUDED.repair,			backup = EXCLUDED.backup,			actual = EXCLUDED.actual,			assembly_pos = EXCLUDED.assembly_pos,			marked_for_deletion = EXCLUDED.marked_for_deletion,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			prod_alert_text_ack = EXCLUDED.prod_alert_text_ack,			audit_events = EXCLUDED.audit_events,			partition_key = EXCLUDED.partition_key        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.insert_assembly_prods_v1(types_plus.assembly_prods_v1[])	OWNER TO user_bender;
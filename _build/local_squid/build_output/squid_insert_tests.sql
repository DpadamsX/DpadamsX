TRUNCATE TABLE test_case CASCADE; -- I typically enable this line and run it. -- DPABEGIN; -- Open a transaction for all of the INSERTs.--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:domains:bigint_non_negative.tests.sql--------------------- Good inputs.-------------------select null from test_case_setup('domain', 'domains', 'bigint_not_negative', '', 'Check 0', 'select 0::bigint_non_negative;', '0', '', 'Longint', '{"comparison":"=","column_order":"Ignore"}', 'Pass', '{user_change_structure, user_iceberg}', FALSE);select null from test_case_setup('domain', 'domains', 'bigint_not_negative', '', 'Check 1', 'select 1::bigint_non_negative;', '1', '', 'Longint', '{"comparison":"=","column_order":"Ignore"}', 'Pass', '{user_change_structure, user_iceberg}', FALSE);--------------------- Bad inputs-------------------select null from test_case_setup('domain', 'domains', 'bigint_not_negative', '', 'Check -1', 'select (0-1)::bigint_non_negative; -- Need to use (0-1) to get a working test here, not an issue with real fields.', '', 'Error: 23514, ERROR:  value for domain bigint_not_negative violates check constraint "bigint_not_negative_check"', 'Longint', '{"comparison":"=","column_order":"Ignore"}', 'Fail', '{user_change_structure, user_iceberg}', FALSE);select null from test_case_setup('domain', 'domains', 'bigint_not_negative', '', 'Check NULL', 'select NULL::bigint_non_negative', '', 'Error: 23502, ERROR:  domain bigint_not_negative does not allow null values', 'Longint', '{"comparison":"=","column_order":"Ignore"}', 'Fail', '{user_change_structure, user_iceberg}', FALSE);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:domains:citext_not_empty.tests.sql--------------------- Good inputs.-------------------select null from test_case_setup('domain','domains','citext_not_empty','',E'Check \'Hello world\'',E'select \'Hello world\'::citext_not_empty','Hello world','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);--------------------- Bad inputs-------------------select null from test_case_setup('domain','domains','citext_not_empty','','Check NULL',E'select NULL::citext_not_empty','','Error: 23502, ERROR:  domain citext_not_empty does not allow null values','Text','{"case":"blind"}','Fail','{user_iceberg}',false);select null from test_case_setup('domain','domains','citext_not_empty','','Check empty string','select ''''::citext_not_empty','',E'Error: 23514, ERROR:  value for domain citext_not_empty violates check constraint "citext_not_empty_check"','Text','{"case":"blind"}','Fail','{user_iceberg}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:domains:day_name.tests.sql--------------------- Good inputs.-------------------select null from test_case_setup('domain','domains','day_name','',E'Check \'Monday\'',E'select \'Monday\'::day_name','Monday','','Text','{"case":"sensitive"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','day_name','',E'Check \'Tuesday\'',E'select \'Tuesday\'::day_name','Tuesday','','Text','{"case":"sensitive"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','day_name','',E'Check \'Wednesday\'',E'select \'Wednesday\'::day_name','Wednesday','','Text','{"case":"sensitive"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','day_name','',E'Check \'Thursday\'',E'select \'Thursday\'::day_name','Thursday','','Text','{"case":"sensitive"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','day_name','',E'Check \'Friday\'',E'select \'Friday\'::day_name','Friday','','Text','{"case":"sensitive"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','day_name','',E'Check \'Saturday\'',E'select \'Saturday\'::day_name','Saturday','','Text','{"case":"sensitive"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','day_name','',E'Check \'Sunday\'',E'select \'Sunday\'::day_name','Sunday','','Text','{"case":"sensitive"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','day_name','',E'Check \'monday\' (lc)',E'select \'monday\'::day_name','monday','','Text','{"case":"sensitive"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','day_name','',E'Check \'tuesday\' (lc)',E'select \'tuesday\'::day_name','tuesday','','Text','{"case":"sensitive"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','day_name','',E'Check \'wednesday\' (lc)',E'select \'wednesday\'::day_name','wednesday','','Text','{"case":"sensitive"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','day_name','',E'Check \'thursday\' (lc)',E'select \'thursday\'::day_name','thursday','','Text','{"case":"sensitive"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','day_name','',E'Check \'friday\' (lc)',E'select \'friday\'::day_name','friday','','Text','{"case":"sensitive"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','day_name','',E'Check \'saturday\' (lc)',E'select \'saturday\'::day_name','saturday','','Text','{"case":"sensitive"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','day_name','',E'Check \'sunday\' (lc)',E'select \'sunday\'::day_name','sunday','','Text','{"case":"sensitive"}','Pass','{user_iceberg}',false);--------------------- Bad inputs-------------------select null from test_case_setup('domain','domains','day_name','','Check NULL',E'select NULL::day_name','','Error: 23502, ERROR:  domain day_name does not allow null values','Text','{"case":"sensitive"}','Fail','{user_iceberg}');select null from test_case_setup('domain','domains','day_name','','Check empty string','select ''''::day_name','',E'Error: 23514, ERROR:  value for domain day_name violates check constraint "day_name_legal_values"','Text','{"case":"sensitive"}','Fail','{user_iceberg}',false);select null from test_case_setup('domain','domains','day_name','','Check bad string','select ''Bad string''::day_name','',E'Error: 23514, ERROR:  value for domain day_name violates check constraint "day_name_legal_values"','Text','{"case":"sensitive"}','Fail','{user_iceberg}',false);select null from test_case_setup('domain','domains','day_name','','Check rds_admin','select ''Bad string''::day_name','',E'Error: 23514, ERROR:  value for domain day_name violates check constraint "day_name_legal_values"','Text','{"case":"sensitive"}','Fail','{user_iceberg}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:domains:decimal_score.tests.sql--------------------- Good inputs.-------------------select null from test_case_setup('Domain', 'domains', 'decimal_score', '', 'Check 0', 'select 0::decimal_score;', '0', '', 'Real', '{"comparison":"=","column_order":"Ignore"}', 'Pass', '{user_change_structure, user_iceberg}', FALSE);select null from test_case_setup('Domain', 'domains', 'decimal_score', '', 'Check 1', 'select 1::decimal_score;', '1', '', 'Real', '{"comparison":"=","column_order":"Ignore"}', 'Pass', '{user_change_structure, user_iceberg}', FALSE);select null from test_case_setup('Domain', 'domains', 'decimal_score', '', 'Check 100', 'select 100::decimal_score;', '100', '', 'Real', '{"comparison":"=","column_order":"Ignore"}', 'Pass', '{user_change_structure, user_iceberg}', FALSE);select null from test_case_setup('Domain', 'domains', 'decimal_score', '', 'Check 0.123456001', 'select 0.123456001::decimal_score;', '0.123456', '', 'Real', '{"comparison":"=","column_order":"Ignore"}', 'Pass', '{user_change_structure, user_iceberg}', FALSE);select null from test_case_setup('Domain', 'domains', 'decimal_score', '', 'Check 0.12345649 rounding', 'select 0.12345649::decimal_score::decimal_score;', '0.123456', '', 'Real', '{"comparison":"=","column_order":"Ignore"}', 'Pass', '{user_change_structure, user_iceberg}', FALSE);select null from test_case_setup('Domain', 'domains', 'decimal_score', '', 'Check 0.12345650 rounding', 'select 0.12345650::decimal_score::decimal_score;', '0.123457', '', 'Real', '{"comparison":"=","column_order":"Ignore"}', 'Pass', '{user_change_structure, user_iceberg}', FALSE);select null from test_case_setup('Domain', 'domains', 'decimal_score', '', 'Check 0.12345651 rounding', 'select 0.12345651::decimal_score::decimal_score;', '0.123457', '', 'Real', '{"comparison":"=","column_order":"Ignore"}', 'Pass', '{user_change_structure, user_iceberg}', FALSE);select null from test_case_setup('Domain', 'domains', 'decimal_score', '', 'Check 0.123', 'select 0.123::decimal_score;', '0.123', '', 'Real', '{"comparison":"=","column_order":"Ignore"}', 'Pass', '{user_change_structure, user_iceberg}', FALSE);select null from test_case_setup('Domain', 'domains', 'decimal_score', '', 'Check -1', 'select (0-1)::decimal_score; -- Need to use (0-1) to get a working test here, not an issue with real fields', '-1', '', 'Real', '{"comparison":"=","column_order":"Ignore"}', 'Pass', '{user_change_structure, user_iceberg}', FALSE);--------------------- Bad inputs-------------------select null from test_case_setup('Domain', 'domains', 'decimal_score', '', 'Check NULL', 'select NULL::decimal_score', '', 'ERROR: 23502, ERROR:  domain decimal_score does not allow null values', 'Real', '{"comparison":"=","column_order":"Ignore"}', 'Fail', '{user_change_structure, user_iceberg}', FALSE);select null from test_case_setup('Domain', 'domains', 'decimal_score', '', 'Check 100', 'select 1000::decimal_score', '', 'ERROR: 22003, ERROR:  numeric field overflow', 'Real', '{"comparison":"=","column_order":"Ignore"}', 'Fail', '{user_change_structure, user_iceberg}', FALSE);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:domains:integer_non_negative.tests.sql--------------------- Good inputs.-------------------select null from test_case_setup('Domain', 'domains', 'integer_non_negative', '', 'Check 0', 'select 0::integer_non_negative;', '0', '', 'Longint', '{"comparison":"=","column_order":"Ignore"}', 'Pass', '{user_change_structure, user_iceberg}', FALSE);select null from test_case_setup('Domain', 'domains', 'integer_non_negative', '', 'Check 1', 'select 1::integer_non_negative;', '1', '', 'Longint', '{"comparison":"=","column_order":"Ignore"}', 'Pass', '{user_change_structure, user_iceberg}', FALSE);--------------------- Bad inputs-------------------select null from test_case_setup('Domain', 'domains', 'integer_non_negative', '', 'Check -1', 'select (0-1)::integer_non_negative; -- Need to use (0-1) to get a working test here, not an issue with real fields.', '', 'Error: 23514, ERROR:  value for domain integer_non_negative violates check constraint "integer_non_negative"', 'Longint', '{"comparison":"=","column_order":"Ignore"}', 'Fail', '{user_change_structure, user_iceberg}', FALSE);select null from test_case_setup('Domain', 'domains', 'integer_non_negative', '', 'Check NULL', 'select NULL::integer_non_negative', '', 'Error: 23502, ERROR:  domain integer_non_negative does not allow null values', 'Longint', '{"comparison":"=","column_order":"Ignore"}', 'Fail', '{user_change_structure, user_iceberg}', FALSE);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:domains:smallint_non_negative.tests.sql--------------------- Good inputs.-------------------select null from test_case_setup('Domain', 'domains', 'smallint_not_negative', '', 'Check 0', 'select 0::smallint_non_negative;', '0', '', 'Longint', '{"comparison":"=","column_order":"Ignore"}', 'Pass', '{user_change_structure, user_iceberg}', FALSE);select null from test_case_setup('Domain', 'domains', 'smallint_not_negative', '', 'Check 1', 'select 1::smallint_non_negative;', '1', '', 'Longint', '{"comparison":"=","column_order":"Ignore"}', 'Pass', '{user_change_structure, user_iceberg}', FALSE);--------------------- Bad inputs-------------------select null from test_case_setup('Domain', 'domains', 'smallint_not_negative', '', 'Check -1', 'select (0-1)::smallint_non_negative; -- Need to use (0-1) to get a working test here, not an issue with real fields.', '', 'Error: 23514, ERROR:  value for domain smallint_non_negative violates check constraint "smallint_non_negative_check"', 'Longint', '{"comparison":"=","column_order":"Ignore"}', 'Fail', '{user_change_structure, user_iceberg}', FALSE);select null from test_case_setup('Domain', 'domains', 'smallint_not_negative', '', 'Check NULL', 'select NULL::smallint_non_negative', '', 'Error: 23502, ERROR:  domain smallint_non_negative does not allow null values', 'Longint', '{"comparison":"=","column_order":"Ignore"}', 'Fail', '{user_change_structure, user_iceberg}', FALSE);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:domains:test_outcome.tests.sql--------------------- Good inputs.-------------------select null from test_case_setup('domain','domains','test_outcome','',E'Check \'Pass\' mixed',E'select \'Pass\'::test_outcome','Pass','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','test_outcome','',E'Check \'Warning\' mixed',E'select \'Warning\'::test_outcome','Warning','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','test_outcome','',E'Check \'Fail\' mixed',E'select \'Fail\'::test_outcome','Fail','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','test_outcome','',E'Check \'PASS\' upper',E'select \'PASS\'::test_outcome','Pass','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','test_outcome','',E'Check \'WARNING\' upper',E'select \'WARNING\'::test_outcome','Warning','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','test_outcome','',E'Check \'FAIL\' upper',E'select \'FAIL\'::test_outcome','Fail','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);--------------------- Bad inputs-------------------select null from test_case_setup('domain','domains','test_outcome','','Check NULL',E'select NULL::test_outcome','','Error: 23502, ERROR:  domain test_outcome does not allow null values','Text','{"case":"blind"}','Fail','{user_iceberg}',false);select null from test_case_setup('domain','domains','test_outcome','','Check empty string','select ''''::test_outcome','',E'Error: 23514, ERROR:  value for domain test_outcome violates check constraint "test_outcome_legal_values"','Text','{"case":"blind"}','Fail','{user_iceberg}',false);select null from test_case_setup('domain','domains','test_outcome','','Check bad string','select ''Bad string''::test_outcome','',E'Error: 23514, ERROR:  value for domain test_outcome violates check constraint "test_outcome_legal_values"','Text','{"case":"blind"}','Fail','{user_iceberg}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:domains:text_not_empty.tests.sql--------------------- Good inputs.-------------------select null from test_case_setup('domain','domains','text_not_empty','',E'Check \'Hello world\'',E'select \'Hello world\'::text_not_empty','Hello world','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);--------------------- Bad inputs-------------------select null from test_case_setup('domain','domains','text_not_empty','','Check NULL',E'select NULL::text_not_empty','','Error: 23502, ERROR:  domain text_not_empty does not allow null values','Text','{"case":"blind"}','Fail','{user_iceberg}',false);select null from test_case_setup('domain','domains','text_not_empty','','Check empty string','select ''''::text_not_empty','',E'Error: 23514, ERROR:  value for domain text_not_empty violates check constraint "text_not_empty_check"','Text','{"case":"blind"}','Fail','{user_iceberg}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:domains:user_name.tests.sql--------------------- Good inputs.-------------------select null from test_case_setup('domain','domains','user_name','','Check postgres','select ''postgres''::user_name','postgres','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','user_name','',E'Check \'rds_super\'',E'select \'rds_super\'::user_name','rds_super','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','user_name','',E'Check \'user_bender\'',E'select \'user_bender\'::user_name','user_bender','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','user_name','',E'Check \'user_change_structure\'',E'select \'user_change_structure\'::user_name','user_change_structure','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','user_name','',E'Check \'user_cleanup\'',E'select \'user_cleanup\'::user_name','user_cleanup','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','user_name','',E'Check \'user_domo_pull\'',E'select \'user_domo_pull\'::user_name','user_domo_pull','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','user_name','',E'Check \'user_iceberg\'',E'select \'user_iceberg\'::user_name','user_iceberg','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','user_name','',E'Check \'user_iceberg_remote\'',E'select \'user_iceberg_remote\'::user_name','user_iceberg_remote','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','user_name','',E'Check \'user_leviathan\'',E'select \'user_leviathan\'::user_name','user_leviathan','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','user_name','',E'Check \'user_reporting\'',E'select \'user_reporting\'::user_name','user_reporting','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','user_name','',E'Check \'user_saws\'',E'select \'user_saws\'::user_name','user_saws','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','user_name','',E'Check \'user_sonar\'',E'select \'user_sonar\'::user_name','user_sonar','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);select null from test_case_setup('domain','domains','user_name','',E'Check \'USER_CHANGE_STRUCTURE\' upper',E'select \'USER_CHANGE_STRUCTURE\'::user_name','user_change_structure','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);--------------------- Bad inputs-------------------select null from test_case_setup('domain','domains','user_name','','Check NULL',E'select NULL::user_name','','Error: 23502, ERROR:  domain user_name does not allow null values','Text','{"case":"blind"}','Fail','{user_iceberg}');select null from test_case_setup('domain','domains','user_name','','Check empty string','select ''''::user_name','',E'Error: 23514, ERROR:  value for domain user_name violates check constraint "user_name_legal_values"','Text','{"case":"blind"}','Fail','{user_iceberg}',false);select null from test_case_setup('domain','domains','user_name','','Check bad string','select ''Bad string''::user_name','',E'Error: 23514, ERROR:  value for domain user_name violates check constraint "user_name_legal_values"','Text','{"case":"blind"}','Fail','{user_iceberg}',false);select null from test_case_setup('domain','domains','user_name','','Check rds_admin','select ''Bad string''::user_name','',E'Error: 23514, ERROR:  value for domain user_name violates check constraint "user_name_legal_values"','Text','{"case":"blind"}','Fail','{user_iceberg}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:functions:ascendco:calendar_year_add.tests.sql/*bundle folder: test_setupBuild date:   2020-06-20T00:35:37ZDescription:  calendar_year_add bad parameter tests.This script combines the following files into a single transaction:Test setup scripts:calendar_year_add__Stard-end_date_range_is_too_long.__tests.sqlcalendar_year_add__Start_is_later_than_end__tests.sql*/-- calendar_year_add__Stard-end_date_range_is_too_long.__tests.sqlselect * from test_case_setup('Function', 'ascendco', 'calendar_year_add', '(uuid, int2, date, date)', 'calendar_year_add: Stard-end date range is too long.', 'select * from calendar_year_add(''21c27277-3aa4-4396-9293-c342cc693adc''::uuid,2015::int2,''2015-01-1''::date,''2016-01-31''::date);', '', 'Error: KC401, ERROR:  Invalid date range: 2015-01-01 to 2016-01-31HINT:  396 days in the financial year. Financial years are expected to have 52 or 53 weeks for 364 or 371 days total.CONTEXT:  PL/pgSQL function calendar_year_add(uuid,smallint,date,date) line 28 at RAISE', 'text', '{"comparator":"equals","column_order":"Ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure, user_iceberg}', TRUE, FALSE, '', '');-- calendar_year_add__Start_is_later_than_end__tests.sqlselect * from test_case_setup('Function', 'ascendco', 'calendar_year_add', '(uuid, int2, date, date)', 'calendar_year_add: Start is later than end', 'select * from calendar_year_add(''21c27277-3aa4-4396-9293-c342cc693adc''::uuid,2015::int2,''2015-12-26''::date,''2014-12-28''::date);', '', 'Error: KC400, ERROR:  Invalid date range: 2015-12-26 to 2014-12-28HINT:  The first day in the year is later than the last day in the year.CONTEXT:  PL/pgSQL function calendar_year_add(uuid,smallint,date,date) line 21 at RAISE', 'text', '{"comparator":"equals","column_order":"Ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure, user_iceberg}', TRUE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:functions:tools:format_uuid.tests.sql--------------------- Good inputs.-------------------select null from test_case_setup('function','tools','format_uuid','uuid','Check good 36',E'select format_uuid(\'ab424cc5-a455-374d-888c-10742843d05f\')','AB424CC5A455374D888C10742843D05F','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);select null from test_case_setup('function','tools','format_uuid','uuid','Check good 32',E'select format_uuid(\'AB424CC5A455374D888C10742843D05F\')','AB424CC5A455374D888C10742843D05F','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);-- Postgres returns NULL, but Rob doesn't support that, we get "".select null from test_case_setup('function','tools','format_uuid','uuid','Check NULL',E'select format_uuid(NULL)','','','Text','{"case":"blind"}','Pass','{user_iceberg}',false);--------------------- Bad inputs-------------------select null from test_case_setup('function','tools','format_uuid','uuid','Check bad string',E'select format_uuid(\'bad string\')','',E'Error: 22P02, ERROR:  invalid input syntax for type uuid: \"bad string\"','Text','{"comparison":"begins with"}','Fail','{user_iceberg}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:functions:tools:fuzzy_match.tests.sql/*bundle folder: fuzzy_matchBuild date:   2020-05-07T23:33:42ZDescription:  fuzzy_match testsThis script combines the following files into a single transaction:Test setup scripts:fuzzy_match__Bad__Measure__foo_gram__tests.sqlfuzzy_match__Bad__Measure__ngram__tests.sqlfuzzy_match__Bad__Measure__trigram__tests.sqlfuzzy_match__Bad__Measure__winkler_(pass_in_jarowinkler)__tests.sqlfuzzy_match__Bad__neighbor_similarity_threshold_min_<_0__tests.sqlfuzzy_match__Bad__neighbor_similarity_threshold_min_>_1__tests.sqlfuzzy_match__Bad__neighbors_to_check_max_<_1__tests.sqlfuzzy_match__Bad__result_rows_max_<_1__tests.sqlfuzzy_match__Bad__text_collection_ID_not_found__tests.sqlfuzzy_match__Good__Measure__jaro__tests.sqlfuzzy_match__Good__Measure__jarowinkler__tests.sqlfuzzy_match__Good__Measure__qgram__tests.sql*/-- fuzzy_match__Bad__Measure__foo_gram__tests.sqlselect * from test_case_setup('Function', 'ascendco', 'fuzzy_match', '(citext, uuid, int4, citext, float4, int4)', 'fuzzy_match: Bad: Measure: foo_gram', 'select * from fuzzy_match (   ''1 West Adult Finochietto Ret.'',   ''f00b4e79-880d-4efc-baa1-9f258e20ca7e'' ,      5,   ''foo_gram'',    0.2,    5);', '', 'Error: KC300, ERROR:  Invalid distance measure name ''foo_gram''HINT:  Valid methods are jaro, jarowinkler, and qgramCONTEXT:  PL/pgSQL function fuzzy_match(citext,uuid,integer,citext,real,integer) line 153 at RAISE', 'text', '{"comparator":"equals","column_order":"Ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure, user_iceberg}', FALSE, TRUE, '', '');-- fuzzy_match__Bad__Measure__ngram__tests.sqlselect * from test_case_setup('Function', 'ascendco', 'fuzzy_match', '(citext, uuid, int4, citext, float4, int4)', 'fuzzy_match: Bad: Measure: ngram', 'select * from fuzzy_match (   ''1 West Adult Finochietto Ret.'',   ''f00b4e79-880d-4efc-baa1-9f258e20ca7e'' ,     5,   ''ngram'',    0.2,    5);', '', 'Error: KC300, ERROR:  Invalid distance measure name ''ngram''HINT:  Valid methods are jaro, jarowinkler, and qgramCONTEXT:  PL/pgSQL function fuzzy_match(citext,uuid,integer,citext,real,integer) line 153 at RAISE', 'text', '{"comparator":"equals","column_order":"Ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure, user_iceberg}', FALSE, TRUE, '', '');-- fuzzy_match__Bad__Measure__trigram__tests.sqlselect * from test_case_setup('Function', 'ascendco', 'fuzzy_match', '(citext, uuid, int4, citext, float4, int4)', 'fuzzy_match: Bad: Measure: trigram', 'select * from fuzzy_match (   ''1 West Adult Finochietto Ret.'',   ''f00b4e79-880d-4efc-baa1-9f258e20ca7e'' ,     5,   ''trigram'',    0.2,    5);', '', 'Error: KC300, ERROR:  Invalid distance measure name ''trigram''HINT:  Valid methods are jaro, jarowinkler, and qgramCONTEXT:  PL/pgSQL function fuzzy_match(citext,uuid,integer,citext,real,integer) line 153 at RAISE', 'text', '{"comparator":"equals","column_order":"Ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure, user_iceberg}', FALSE, TRUE, '', '');-- fuzzy_match__Bad__Measure__winkler_(pass_in_jarowinkler)__tests.sqlselect * from test_case_setup('Function', 'ascendco', 'fuzzy_match', '(citext, uuid, int4, citext, float4, int4)', 'fuzzy_match: Bad: Measure: winkler (pass in jarowinkler)', 'select * from fuzzy_match (   ''1 West Adult Finochietto Ret.'',   ''f00b4e79-880d-4efc-baa1-9f258e20ca7e'' ,     5,   ''winkler'',    0.2,    5);', '', 'Error: KC300, ERROR:  Invalid distance measure name ''winkler''HINT:  Valid methods are jaro, jarowinkler, and qgramCONTEXT:  PL/pgSQL function fuzzy_match(citext,uuid,integer,citext,real,integer) line 153 at RAISE', 'text', '{"comparator":"equals","column_order":"Ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure, user_iceberg}', FALSE, TRUE, '', '');-- fuzzy_match__Bad__neighbor_similarity_threshold_min_<_0__tests.sqlselect * from test_case_setup('Function', 'ascendco', 'fuzzy_match', '(citext, uuid, int4, citext, float4, int4)', 'fuzzy_match: Bad: neighbor_similarity_threshold_min < 0', 'select * from fuzzy_match (   ''1 West Adult Finochietto Ret.'',   ''f00b4e79-880d-4efc-baa1-9f258e20ca7e'' ,     5,   ''jarowinkler'',    -.1,    5);', '', 'Error: KC202, ERROR:  neighbor_qgram_threshold_min value is out of range.HINT:  Value must be in the range 0-1.CONTEXT:  PL/pgSQL function fuzzy_match(citext,uuid,integer,citext,real,integer) line 177 at RAISE', 'text', '{"comparator":"equals","column_order":"Ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure, user_iceberg}', FALSE, TRUE, '', '');-- fuzzy_match__Bad__neighbor_similarity_threshold_min_>_1__tests.sqlselect * from test_case_setup('Function', 'ascendco', 'fuzzy_match', '(citext, uuid, int4, citext, float4, int4)', 'fuzzy_match: Bad: neighbor_similarity_threshold_min > 1', 'select * from fuzzy_match (   ''1 West Adult Finochietto Ret.'',   ''f00b4e79-880d-4efc-baa1-9f258e20ca7e'' ,     5,   ''jarowinkler'',    1.000001,    5);', '', 'Error: KC202, ERROR:  neighbor_qgram_threshold_min value is out of range.HINT:  Value must be in the range 0-1.CONTEXT:  PL/pgSQL function fuzzy_match(citext,uuid,integer,citext,real,integer) line 177 at RAISE', 'text', '{"comparator":"equals","column_order":"Ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure, user_iceberg}', FALSE, TRUE, '', '');-- fuzzy_match__Bad__neighbors_to_check_max_<_1__tests.sqlselect * from test_case_setup('Function', 'ascendco', 'fuzzy_match', '(citext, uuid, int4, citext, float4, int4)', 'fuzzy_match: Bad: neighbors_to_check_max < 1', 'select * from fuzzy_match (   ''1 West Adult Finochietto Ret.'',   ''f00b4e79-880d-4efc-baa1-9f258e20ca7e'' ,     0,   ''jarowinkler'',    0.2,    5);', '', 'Error: KC200, ERROR:  neighbors_to_check_max value is too low.HINT:  Value must be 1 or higher.CONTEXT:  PL/pgSQL function fuzzy_match(citext,uuid,integer,citext,real,integer) line 163 at RAISE', 'text', '{"comparator":"equals","column_order":"Ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure, user_iceberg}', FALSE, TRUE, '', '');-- fuzzy_match__Bad__result_rows_max_<_1__tests.sqlselect * from test_case_setup('Function', 'ascendco', 'fuzzy_match', '(citext, uuid, int4, citext, float4, int4)', 'fuzzy_match: Bad: result_rows_max < 1', 'select * from fuzzy_match (   ''1 West Adult Finochietto Ret.'',   ''f00b4e79-880d-4efc-baa1-9f258e20ca7e'' ,     5,    ''jarowinkler'',    0.2,    0);', '', 'Error: KC200, ERROR:  result_rows_max value is too low.HINT:  Value must be 1 or higher.CONTEXT:  PL/pgSQL function fuzzy_match(citext,uuid,integer,citext,real,integer) line 170 at RAISE', 'text', '{"comparator":"equals","column_order":"Ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure, user_iceberg}', FALSE, TRUE, '', '');-- fuzzy_match__Bad__text_collection_ID_not_found__tests.sqlselect * from test_case_setup('Function', 'ascendco', 'fuzzy_match', '(citext, uuid, int4, citext, float4, int4)', 'fuzzy_match: Bad: text_collection ID not found', 'select * from fuzzy_match (   ''1 West Adult Finochietto Ret.'',   ''00000000-0000-0000-0000-000000000000'' ,      5,   ''jaro'',    0.2,    5);', '', 'Error: KC100, ERROR:  text_collection not found with id = ''00000000-0000-0000-0000-000000000000''CONTEXT:  PL/pgSQL function fuzzy_match(citext,uuid,integer,citext,real,integer) line 143 at RAISE', 'text', '{"comparator":"equals","column_order":"Ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure, user_iceberg}', FALSE, TRUE, '', '');-- fuzzy_match__Good__Measure__jaro__tests.sqlselect * from test_case_setup('Function', 'ascendco', 'fuzzy_match', '(citext, uuid, int4, citext, float4, int4)', 'fuzzy_match: Good: Measure: jaro', 'select * from fuzzy_match (   ''1 West Adult Finochietto Ret.'',   ''f00b4e79-880d-4efc-baa1-9f258e20ca7e'' ,     5,   ''jaro'',    0.2,    5);', '1 West Adult Finochietto Ret.	Tray Finochietto Retractor	A9CBAF086996E44CA744C297E115EC1C	1	4	0.752898	avg_quadratic	0.566855	0.752898	0	0.637419	0.637419	0.541111	0.735603	0.474576	0.3751 West Adult Finochietto Ret.	Tray Cardio Adult Morse Retractor	57762325DA06004D8083110C0277F90C	3	4	0.747769	monge_elkan_quadratic	0.482574	0.694676	0	0.603292	0.603292	0.559158	0.747769	0.212121	0.1698111 West Adult Finochietto Ret.	Tray Cardio Small Finochetti Retractor	D0EACA378733BF4BBE2391D3B262928A	2	4	0.746011	monge_elkan_quadratic	0.515463	0.717957	0	0.694722	0.694722	0.556532	0.746011	0.225352	0.1754391 West Adult Finochietto Ret.	Tray Cardio Adult Rultract Retractor	357F9FDC7042FD4B907F4946A04F5BEE	4	4	0.741393	monge_elkan_quadratic	0.480019	0.692834	0	0.604843	0.604843	0.549663	0.741393	0.202899	0.176471', '', 'text', '{"comparator":"equals","column_order":"Ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure, user_iceberg}', FALSE, TRUE, '', '');-- fuzzy_match__Good__Measure__jarowinkler__tests.sqlselect * from test_case_setup('Function', 'ascendco', 'fuzzy_match', '(citext, uuid, int4, citext, float4, int4)', 'fuzzy_match: Good: Measure: jarowinkler', 'select * from fuzzy_match (   ''1 West Adult Finochietto Ret.'',   ''f00b4e79-880d-4efc-baa1-9f258e20ca7e'' ,     5,   ''jarowinkler'',    0.2,    5);', '1 West Adult Finochietto Ret.	Tray Finochietto Retractor	A9CBAF086996E44CA744C297E115EC1C	1	4	0.752898	avg_quadratic	0.566855	0.752898	0	0.637419	0.637419	0.541111	0.735603	0.474576	0.3751 West Adult Finochietto Ret.	Tray Cardio Small Finochetti Retractor	D0EACA378733BF4BBE2391D3B262928A	2	4	0.749415	monge_elkan_quadratic	0.516879	0.718943	0	0.694722	0.694722	0.561623	0.749415	0.225352	0.1754391 West Adult Finochietto Ret.	Tray Cardio Adult Morse Retractor	57762325DA06004D8083110C0277F90C	3	4	0.747769	monge_elkan_quadratic	0.482574	0.694676	0	0.603292	0.603292	0.559158	0.747769	0.212121	0.1698111 West Adult Finochietto Ret.	Tray Cardio Adult Rultract Retractor	357F9FDC7042FD4B907F4946A04F5BEE	4	4	0.741393	monge_elkan_quadratic	0.480019	0.692834	0	0.604843	0.604843	0.549663	0.741393	0.202899	0.176471', '', 'text', '{"comparator":"equals","column_order":"Ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure, user_iceberg}', FALSE, TRUE, '', '');-- fuzzy_match__Good__Measure__qgram__tests.sqlselect * from test_case_setup('Function', 'ascendco', 'fuzzy_match', '(citext, uuid, int4, citext, float4, int4)', 'fuzzy_match: Good: Measure: qgram', 'select * from fuzzy_match (   ''1 West Adult Finochietto Ret.'',   ''f00b4e79-880d-4efc-baa1-9f258e20ca7e'' ,     5,   ''qgram'',    0.2,    5);', '1 West Adult Finochietto Ret.	Tray Finochietto Retractor	A9CBAF086996E44CA744C297E115EC1C	1	4	0.697039	avg_quadratic	0.485864	0.697039	0	0.637419	0.637419	0.270588	0.520181	0.474576	0.3751 West Adult Finochietto Ret.	Tray Cardio Small Finochetti Retractor	D0EACA378733BF4BBE2391D3B262928A	2	4	0.694722	jaro	0.400021	0.632472	0	0.694722	0.694722	0.182588	0.427303	0.225352	0.1754391 West Adult Finochietto Ret.	Tray Cardio Adult Rultract Retractor	357F9FDC7042FD4B907F4946A04F5BEE	4	4	0.642327	avg_quadratic	0.412584	0.642327	0	0.604843	0.604843	0.320405	0.566043	0.202899	0.1764711 West Adult Finochietto Ret.	Tray Cardio Adult Morse Retractor	57762325DA06004D8083110C0277F90C	3	4	0.642257	avg_quadratic	0.412494	0.642257	0	0.603292	0.603292	0.320405	0.566043	0.212121	0.169811', '', 'text', '{"comparator":"equals","column_order":"Ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure, user_iceberg}', FALSE, TRUE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:functions:tools:stats_agg.tests.sqlselect * from test_case_setup('Function', 'tools', 'stats_agg', '()', 'stats_agg', 'with data as (	select unnest(array[1, 2, 3, 4, 5, 10, 20]) n)select (stats_agg(n)).* from data', '7	1	20	6.428571428571	44.28571428571	1.368777708453	3.521415668893', '', 'text', '{"comparator":"equals","column_order":"Ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure, user_iceberg}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:_stats_agg_accumulator.tests.sql------------------------------------------------------------------------------------- Checks for tools._stats_agg_accumulator (_stats_agg_accum_type, double precision) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', '_stats_agg_accumulator (_stats_agg_accum_type, double precision)', '()', 'tools._stats_agg_accumulator _stats_agg_accum_type, double precision existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''_stats_agg_accumulator''   and pg_get_function_identity_arguments(oid) = ''_stats_agg_accum_type, double precision'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', '_stats_agg_accumulator (_stats_agg_accum_type, double precision)', '()', 'tools._stats_agg_accumulator _stats_agg_accum_type, double precision definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''_stats_agg_accumulator''   and pg_get_function_identity_arguments(oid) = ''_stats_agg_accum_type, double precision'';', 'CREATE OR REPLACE FUNCTION tools._stats_agg_accumulator(_stats_agg_accum_type, double precision) RETURNS _stats_agg_accum_type LANGUAGE plpgsqlAS $function$DECLARE	a ALIAS FOR $1;	x alias for $2;	n1 bigint;	delta double precision;	delta_n double precision;	delta_n2 double precision;	term1 double precision;BEGIN	n1 = a.n;	a.n = a.n + 1;	delta = x - a.m1;	delta_n = delta / a.n;	delta_n2 = delta_n * delta_n;	term1 = delta * delta_n * n1;	a.m1 = a.m1 + delta_n;	a.m4 = a.m4 + term1 * delta_n2 * (a.n*a.n - 3*a.n + 3) + 6 * delta_n2 * a.m2 - 4 * delta_n * a.m3;	a.m3 = a.m3 + term1 * delta_n * (a.n - 2) - 3 * delta_n * a.m2;	a.m2 = a.m2 + term1;	a.min = least(a.min, x);	a.max = greatest(a.max, x);	RETURN a;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:_stats_agg_finalizer.tests.sql------------------------------------------------------------------------------------- Checks for tools._stats_agg_finalizer (_stats_agg_accum_type) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', '_stats_agg_finalizer (_stats_agg_accum_type)', '()', 'tools._stats_agg_finalizer _stats_agg_accum_type existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''_stats_agg_finalizer''   and pg_get_function_identity_arguments(oid) = ''_stats_agg_accum_type'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', '_stats_agg_finalizer (_stats_agg_accum_type)', '()', 'tools._stats_agg_finalizer _stats_agg_accum_type definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''_stats_agg_finalizer''   and pg_get_function_identity_arguments(oid) = ''_stats_agg_accum_type'';', 'CREATE OR REPLACE FUNCTION tools._stats_agg_finalizer(_stats_agg_accum_type) RETURNS _stats_agg_result_type LANGUAGE plpgsqlAS $function$BEGIN	RETURN row(		$1.n,		$1.min,		$1.max,		$1.m1,		$1.m2 / nullif(($1.n - 1.0), 0),		case when $1.m2 = 0 then null else sqrt($1.n) * $1.m3 / nullif(($1.m2 ^ 1.5), 0) end,		case when $1.m2 = 0 then null else $1.n * $1.m4 / nullif(($1.m2 * $1.m2) - 3.0, 0) end	);END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:activity_for_facility.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.activity_for_facility (in_facility_id uuid) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'activity_for_facility (in_facility_id uuid)', '()', 'ascendco.activity_for_facility in_facility_id uuid existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''activity_for_facility''   and pg_get_function_identity_arguments(oid) = ''in_facility_id uuid'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'activity_for_facility (in_facility_id uuid)', '()', 'ascendco.activity_for_facility in_facility_id uuid definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''activity_for_facility''   and pg_get_function_identity_arguments(oid) = ''in_facility_id uuid'';', 'CREATE OR REPLACE FUNCTION ascendco.activity_for_facility(in_facility_id uuid) RETURNS TABLE(activity_id uuid, hsys_name citext, facility_id uuid, facility_name citext, activity_name citext, server_name citext, start_dts timestamp without time zone, done_dts timestamp without time zone, duration_seconds integer, updated_dts timestamp without time zone, marked_for_deletion boolean, other_desc citext, user_name citext, created_dts timestamp without time zone, created_by citext, updated_by citext) LANGUAGE sql STABLEAS $function$SELECT activity.id                                             AS activity_id,       coalesce(hsys.name_, ''Unknown'')                         AS hsys_name,       facility.id,       coalesce(facility.name_, ''Unknown'')                     AS facility_name,       coalesce(facility_activities.name_, ''Unknown'')          AS activity_name,       coalesce(data_file_info.server_name_, ''Unknown'')        AS server_name,       activity.start_dts,       activity.done_dts,       activity.duration_seconds,       activity.updated_dts,       activity.marked_for_deletion,       activity.other_desc,       coalesce(web_user.name_full, ''Unknown'')                 AS user_name,       activity.created_dts,       activity.created_by,       activity.updated_by--   Note: activity doesn''t have hsys_id, you neeed to load facility, and get the hsys_id from there.     FROM activityLEFT JOIN facility_activities  ON facility_activities.id   = activity.facility_activities_idLEFT JOIN web_user             ON web_user.id              =  activity.web_user_idLEFT JOIN data_file_info       ON data_file_info.id        =  activity.last_updated_by_data_file_idLEFT JOIN facility             ON facility.id              =  activity.facility_idLEFT JOIN hsys                 ON hsys.id                  =  facility.hsys_idWHERE activity.facility_id = in_facility_id;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:activity_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.activity_to_v1 (activity_in activity) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'activity_to_v1 (activity_in activity)', '()', 'types_plus.activity_to_v1 activity_in activity existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''activity_to_v1''   and pg_get_function_identity_arguments(oid) = ''activity_in activity'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'activity_to_v1 (activity_in activity)', '()', 'types_plus.activity_to_v1 activity_in activity definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''activity_to_v1''   and pg_get_function_identity_arguments(oid) = ''activity_in activity'';', 'CREATE OR REPLACE FUNCTION types_plus.activity_to_v1(activity_in activity) RETURNS activity_v1 LANGUAGE sqlAS $function$                   SELECT			activity_in.id,			activity_in.facility_id,			activity_in.facility_activities_id,			activity_in.web_user_id,			activity_in.other_desc,			activity_in.start_dts,			activity_in.done_dts,			activity_in.last_updated_by_data_file_id,			activity_in.created_by,			activity_in.created_dts,			activity_in.updated_by,			activity_in.updated_dts,			activity_in.duration_seconds               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:activity_to_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.activity_to_v2 (activity_in activity) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'activity_to_v2 (activity_in activity)', '()', 'types_plus.activity_to_v2 activity_in activity existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''activity_to_v2''   and pg_get_function_identity_arguments(oid) = ''activity_in activity'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'activity_to_v2 (activity_in activity)', '()', 'types_plus.activity_to_v2 activity_in activity definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''activity_to_v2''   and pg_get_function_identity_arguments(oid) = ''activity_in activity'';', 'CREATE OR REPLACE FUNCTION types_plus.activity_to_v2(activity_in activity) RETURNS activity_v2 LANGUAGE sqlAS $function$                   SELECT			activity_in.id,			activity_in.facility_id,			activity_in.facility_activities_id,			activity_in.web_user_id,			activity_in.last_updated_by_data_file_id,			activity_in.updated_dts,			activity_in.created_dts,			activity_in.done_dts,			activity_in.start_dts,			activity_in.duration_seconds,			activity_in.marked_for_deletion,			activity_in.other_desc,			activity_in.created_by,			activity_in.updated_by               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:analytic_productivity_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.analytic_productivity_to_v1 (analytic_productivity_in analytic_productivity) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'analytic_productivity_to_v1 (analytic_productivity_in analytic_productivity)', '()', 'types_plus.analytic_productivity_to_v1 analytic_productivity_in analytic_productivity existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''analytic_productivity_to_v1''   and pg_get_function_identity_arguments(oid) = ''analytic_productivity_in analytic_productivity'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'analytic_productivity_to_v1 (analytic_productivity_in analytic_productivity)', '()', 'types_plus.analytic_productivity_to_v1 analytic_productivity_in analytic_productivity definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''analytic_productivity_to_v1''   and pg_get_function_identity_arguments(oid) = ''analytic_productivity_in analytic_productivity'';', 'CREATE OR REPLACE FUNCTION types_plus.analytic_productivity_to_v1(analytic_productivity_in analytic_productivity) RETURNS analytic_productivity_v1 LANGUAGE sqlAS $function$        SELECT			analytic_productivity_in.id,			analytic_productivity_in.data_file_id,			analytic_productivity_in.marked_for_deletion,			analytic_productivity_in.hsys_id,			analytic_productivity_in.facility_id,			analytic_productivity_in.facility_location_id,			analytic_productivity_in.specialty_id,			analytic_productivity_in.item_type_id,			analytic_productivity_in.user_name,			analytic_productivity_in.inv_name,			analytic_productivity_in.item_name,			analytic_productivity_in.tray_or_pack,			analytic_productivity_in.num_inst,			analytic_productivity_in.assembly_minutes,			analytic_productivity_in.pause_minutes,			analytic_productivity_in.points,			analytic_productivity_in.points_per_hour,			analytic_productivity_in.assembly_hour,			analytic_productivity_in.pause_hour,			analytic_productivity_in.start_utc,			analytic_productivity_in.start_local,			analytic_productivity_in.end_utc,			analytic_productivity_in.end_local$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:analytic_scan_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.analytic_scan_to_v1 (analytic_scan_in analytic_scan) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'analytic_scan_to_v1 (analytic_scan_in analytic_scan)', '()', 'types_plus.analytic_scan_to_v1 analytic_scan_in analytic_scan existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''analytic_scan_to_v1''   and pg_get_function_identity_arguments(oid) = ''analytic_scan_in analytic_scan'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'analytic_scan_to_v1 (analytic_scan_in analytic_scan)', '()', 'types_plus.analytic_scan_to_v1 analytic_scan_in analytic_scan definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''analytic_scan_to_v1''   and pg_get_function_identity_arguments(oid) = ''analytic_scan_in analytic_scan'';', 'CREATE OR REPLACE FUNCTION types_plus.analytic_scan_to_v1(analytic_scan_in analytic_scan) RETURNS analytic_scan_v1 LANGUAGE sqlAS $function$        SELECT			analytic_scan_in.id,			analytic_scan_in.data_file_id,			analytic_scan_in.marked_for_deletion,			analytic_scan_in.hsys_id,			analytic_scan_in.facility_id,			analytic_scan_in.facility_location_id,			analytic_scan_in.specialty_id,			analytic_scan_in.scanned_type,			analytic_scan_in.associated_to,			analytic_scan_in.user_name,			analytic_scan_in.inv_name,			analytic_scan_in.num_inst,			analytic_scan_in.tray_or_pack,			analytic_scan_in.item_name,			analytic_scan_in.scan_time_utc_dts,			analytic_scan_in.scan_time_local_dts,			analytic_scan_in.location_description$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:analytic_sterilizer_load_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.analytic_sterilizer_load_to_v1 (analytic_sterilizer_load_in analytic_sterilizer_load) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'analytic_sterilizer_load_to_v1 (analytic_sterilizer_load_in analytic_sterilizer_load)', '()', 'types_plus.analytic_sterilizer_load_to_v1 analytic_sterilizer_load_in analytic_sterilizer_load existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''analytic_sterilizer_load_to_v1''   and pg_get_function_identity_arguments(oid) = ''analytic_sterilizer_load_in analytic_sterilizer_load'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'analytic_sterilizer_load_to_v1 (analytic_sterilizer_load_in analytic_sterilizer_load)', '()', 'types_plus.analytic_sterilizer_load_to_v1 analytic_sterilizer_load_in analytic_sterilizer_load definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''analytic_sterilizer_load_to_v1''   and pg_get_function_identity_arguments(oid) = ''analytic_sterilizer_load_in analytic_sterilizer_load'';', 'CREATE OR REPLACE FUNCTION types_plus.analytic_sterilizer_load_to_v1(analytic_sterilizer_load_in analytic_sterilizer_load) RETURNS analytic_sterilizer_load_v1 LANGUAGE sqlAS $function$        SELECT			analytic_sterilizer_load_in.id,			analytic_sterilizer_load_in.marked_for_deletion,			analytic_sterilizer_load_in.data_file_id,			analytic_sterilizer_load_in.sterilize_method_id,			analytic_sterilizer_load_in.sterilize_params_id,			analytic_sterilizer_load_in.sterilizer_id,			analytic_sterilizer_load_in.facility_id,			analytic_sterilizer_load_in.web_user_id,			analytic_sterilizer_load_in.status_building_dts,			analytic_sterilizer_load_in.status_building_local_dts,			analytic_sterilizer_load_in.status_done_dts,			analytic_sterilizer_load_in.status_done_local_dts,			analytic_sterilizer_load_in.status,			analytic_sterilizer_load_in.is_iuss,			analytic_sterilizer_load_in.instruments_count,			analytic_sterilizer_load_in.packs_count,			analytic_sterilizer_load_in.trays_count$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:analytic_sterilizer_loadinv_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.analytic_sterilizer_loadinv_to_v1 (analytic_sterilizer_loadinv_in analytic_sterilizer_loadinv) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'analytic_sterilizer_loadinv_to_v1 (analytic_sterilizer_loadinv_in analytic_sterilizer_loadinv)', '()', 'types_plus.analytic_sterilizer_loadinv_to_v1 analytic_sterilizer_loadinv_in analytic_sterilizer_loadinv existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''analytic_sterilizer_loadinv_to_v1''   and pg_get_function_identity_arguments(oid) = ''analytic_sterilizer_loadinv_in analytic_sterilizer_loadinv'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'analytic_sterilizer_loadinv_to_v1 (analytic_sterilizer_loadinv_in analytic_sterilizer_loadinv)', '()', 'types_plus.analytic_sterilizer_loadinv_to_v1 analytic_sterilizer_loadinv_in analytic_sterilizer_loadinv definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''analytic_sterilizer_loadinv_to_v1''   and pg_get_function_identity_arguments(oid) = ''analytic_sterilizer_loadinv_in analytic_sterilizer_loadinv'';', 'CREATE OR REPLACE FUNCTION types_plus.analytic_sterilizer_loadinv_to_v1(analytic_sterilizer_loadinv_in analytic_sterilizer_loadinv) RETURNS analytic_sterilizer_loadinv_v1 LANGUAGE sqlAS $function$        SELECT			analytic_sterilizer_loadinv_in.id,			analytic_sterilizer_loadinv_in.data_file_id,			analytic_sterilizer_loadinv_in.marked_for_deletion,			analytic_sterilizer_loadinv_in.facility_id,			analytic_sterilizer_loadinv_in.hsys_id,			analytic_sterilizer_loadinv_in.inv_id,			analytic_sterilizer_loadinv_in.item_id,			analytic_sterilizer_loadinv_in.item_type_id,			analytic_sterilizer_loadinv_in.speciality_id,			analytic_sterilizer_loadinv_in.sterilize_method_id,			analytic_sterilizer_loadinv_in.sterilize_params_id,			analytic_sterilizer_loadinv_in.sterilizer_id,			analytic_sterilizer_loadinv_in.sterilizerload_id,			analytic_sterilizer_loadinv_in.web_user_id,			analytic_sterilizer_loadinv_in.inv_name_provided,			analytic_sterilizer_loadinv_in.is_iuss,			analytic_sterilizer_loadinv_in.num_inst,			analytic_sterilizer_loadinv_in.qty,			analytic_sterilizer_loadinv_in.category,			analytic_sterilizer_loadinv_in.clinic_dept_name,			analytic_sterilizer_loadinv_in.processing_seconds,			analytic_sterilizer_loadinv_in.done_dts,			analytic_sterilizer_loadinv_in.done_local_dts$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:analytic_sterilizer_loadinv_to_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.analytic_sterilizer_loadinv_to_v2 (analytic_sterilizer_loadinv_in analytic_sterilizer_loadinv) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'analytic_sterilizer_loadinv_to_v2 (analytic_sterilizer_loadinv_in analytic_sterilizer_loadinv)', '()', 'types_plus.analytic_sterilizer_loadinv_to_v2 analytic_sterilizer_loadinv_in analytic_sterilizer_loadinv existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''analytic_sterilizer_loadinv_to_v2''   and pg_get_function_identity_arguments(oid) = ''analytic_sterilizer_loadinv_in analytic_sterilizer_loadinv'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'analytic_sterilizer_loadinv_to_v2 (analytic_sterilizer_loadinv_in analytic_sterilizer_loadinv)', '()', 'types_plus.analytic_sterilizer_loadinv_to_v2 analytic_sterilizer_loadinv_in analytic_sterilizer_loadinv definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''analytic_sterilizer_loadinv_to_v2''   and pg_get_function_identity_arguments(oid) = ''analytic_sterilizer_loadinv_in analytic_sterilizer_loadinv'';', 'CREATE OR REPLACE FUNCTION types_plus.analytic_sterilizer_loadinv_to_v2(analytic_sterilizer_loadinv_in analytic_sterilizer_loadinv) RETURNS analytic_sterilizer_loadinv_v2 LANGUAGE sqlAS $function$        SELECT			analytic_sterilizer_loadinv_in.id,			analytic_sterilizer_loadinv_in.data_file_id,			analytic_sterilizer_loadinv_in.marked_for_deletion,			analytic_sterilizer_loadinv_in.facility_id,			analytic_sterilizer_loadinv_in.hsys_id,			analytic_sterilizer_loadinv_in.inv_id,			analytic_sterilizer_loadinv_in.item_id,			analytic_sterilizer_loadinv_in.item_type_id,			analytic_sterilizer_loadinv_in.speciality_id,			analytic_sterilizer_loadinv_in.sterilize_method_id,			analytic_sterilizer_loadinv_in.sterilize_params_id,			analytic_sterilizer_loadinv_in.sterilizer_id,			analytic_sterilizer_loadinv_in.sterilizerload_id,			analytic_sterilizer_loadinv_in.web_user_id,			analytic_sterilizer_loadinv_in.inv_name_provided,			analytic_sterilizer_loadinv_in.is_iuss,			analytic_sterilizer_loadinv_in.num_inst,			analytic_sterilizer_loadinv_in.qty,			analytic_sterilizer_loadinv_in.category,			analytic_sterilizer_loadinv_in.clinic_dept_name,			analytic_sterilizer_loadinv_in.processing_seconds,			analytic_sterilizer_loadinv_in.done_dts,			analytic_sterilizer_loadinv_in.done_local_dts,			analytic_sterilizer_loadinv_in.status$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:analytic_work_to_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.analytic_work_to_v2 (analytic_work_in analytic_work) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'analytic_work_to_v2 (analytic_work_in analytic_work)', '()', 'types_plus.analytic_work_to_v2 analytic_work_in analytic_work existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''analytic_work_to_v2''   and pg_get_function_identity_arguments(oid) = ''analytic_work_in analytic_work'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'analytic_work_to_v2 (analytic_work_in analytic_work)', '()', 'types_plus.analytic_work_to_v2 analytic_work_in analytic_work definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''analytic_work_to_v2''   and pg_get_function_identity_arguments(oid) = ''analytic_work_in analytic_work'';', 'CREATE OR REPLACE FUNCTION types_plus.analytic_work_to_v2(analytic_work_in analytic_work) RETURNS analytic_work_v2 LANGUAGE sqlAS $function$        SELECT			analytic_work_in.id,			analytic_work_in.key_supplement,			analytic_work_in.hsys_id,			analytic_work_in.facility_id,			analytic_work_in.inv_id,			analytic_work_in.user_id,			analytic_work_in.activity_id,			analytic_work_in.assembly_id,			analytic_work_in.q_event_id,			analytic_work_in.scan_id,			analytic_work_in.scase_id,			analytic_work_in.scase_inv_id,			analytic_work_in.sterilizer_load_id,			analytic_work_in.sterilizer_loadinv_id,			analytic_work_in.start_dts,			analytic_work_in.end_dts,			analytic_work_in.start_local_dts,			analytic_work_in.end_local_dts,			analytic_work_in.date_time,			analytic_work_in.duration,			analytic_work_in.missing_inst,			analytic_work_in.num_inst,			analytic_work_in.num_items,			analytic_work_in.points,			analytic_work_in.num_packs,			analytic_work_in.num_trays,			analytic_work_in.activity,			analytic_work_in.description,			analytic_work_in.marked_for_deletion$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:array_remove_element.tests.sql------------------------------------------------------------------------------------- Checks for tools.array_remove_element (anyarray, integer) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'array_remove_element (anyarray, integer)', '()', 'tools.array_remove_element anyarray, integer existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''array_remove_element''   and pg_get_function_identity_arguments(oid) = ''anyarray, integer'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'array_remove_element (anyarray, integer)', '()', 'tools.array_remove_element anyarray, integer definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''array_remove_element''   and pg_get_function_identity_arguments(oid) = ''anyarray, integer'';', 'CREATE OR REPLACE FUNCTION tools.array_remove_element(anyarray, integer) RETURNS anyarray LANGUAGE sql IMMUTABLEAS $function$SELECT $1[:$2-1] || $1[$2+1:]$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:assembly_prods_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.assembly_prods_to_v1 (assembly_prods_in assembly_prods) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'assembly_prods_to_v1 (assembly_prods_in assembly_prods)', '()', 'types_plus.assembly_prods_to_v1 assembly_prods_in assembly_prods existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''assembly_prods_to_v1''   and pg_get_function_identity_arguments(oid) = ''assembly_prods_in assembly_prods'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'assembly_prods_to_v1 (assembly_prods_in assembly_prods)', '()', 'types_plus.assembly_prods_to_v1 assembly_prods_in assembly_prods definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''assembly_prods_to_v1''   and pg_get_function_identity_arguments(oid) = ''assembly_prods_in assembly_prods'';', 'CREATE OR REPLACE FUNCTION types_plus.assembly_prods_to_v1(assembly_prods_in assembly_prods) RETURNS assembly_prods_v1 LANGUAGE sqlAS $function$        SELECT			assembly_prods_in.id,			assembly_prods_in.data_file_id,			assembly_prods_in.assembly_id,			assembly_prods_in.item_prod_id,			assembly_prods_in.created_dts,			assembly_prods_in.updated_dts,			assembly_prods_in.target,			assembly_prods_in.found_,			assembly_prods_in.repair,			assembly_prods_in.backup,			assembly_prods_in.actual,			assembly_prods_in.assembly_pos,			assembly_prods_in.marked_for_deletion,			assembly_prods_in.created_by,			assembly_prods_in.updated_by,			assembly_prods_in.prod_alert_text_ack,			assembly_prods_in.audit_events$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:assembly_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.assembly_to_v1 (assembly_in assembly) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'assembly_to_v1 (assembly_in assembly)', '()', 'types_plus.assembly_to_v1 assembly_in assembly existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''assembly_to_v1''   and pg_get_function_identity_arguments(oid) = ''assembly_in assembly'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'assembly_to_v1 (assembly_in assembly)', '()', 'types_plus.assembly_to_v1 assembly_in assembly definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''assembly_to_v1''   and pg_get_function_identity_arguments(oid) = ''assembly_in assembly'';', 'CREATE OR REPLACE FUNCTION types_plus.assembly_to_v1(assembly_in assembly) RETURNS assembly_v1 LANGUAGE sqlAS $function$        SELECT			assembly_in.id,			assembly_in.data_file_id,			assembly_in.marked_for_deletion,			assembly_in.created_by_user_id,			assembly_in.done_by_user_id,			assembly_in.facility_location_id,			assembly_in.inv_id,			assembly_in.last_updated_by_data_file_id,			assembly_in.updated_by_user_id,			assembly_in.is_complete,			assembly_in.is_quick_turn,			assembly_in.con_id,			assembly_in.created_by,			assembly_in.difficulty,			assembly_in.quantity,			assembly_in.sequence_no,			assembly_in.num_inst,			assembly_in.points,			assembly_in.done_dts,			assembly_in.created_dts,			assembly_in.updated_dts,			assembly_in.missing_list,			assembly_in.priority,			assembly_in.status,			assembly_in.updated_by$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:calendar_add.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.calendar_add (id_in uuid, calendar_name_in citext, week_starts_on_in day_name, description_in citext) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'calendar_add (id_in uuid, calendar_name_in citext, week_starts_on_in day_name, description_in citext)', '()', 'ascendco.calendar_add id_in uuid, calendar_name_in citext, week_starts_on_in day_name, description_in citext existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''calendar_add''   and pg_get_function_identity_arguments(oid) = ''id_in uuid, calendar_name_in citext, week_starts_on_in day_name, description_in citext'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'calendar_add (id_in uuid, calendar_name_in citext, week_starts_on_in day_name, description_in citext)', '()', 'ascendco.calendar_add id_in uuid, calendar_name_in citext, week_starts_on_in day_name, description_in citext definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''calendar_add''   and pg_get_function_identity_arguments(oid) = ''id_in uuid, calendar_name_in citext, week_starts_on_in day_name, description_in citext'';', 'CREATE OR REPLACE FUNCTION ascendco.calendar_add(id_in uuid, calendar_name_in citext, week_starts_on_in day_name, description_in citext DEFAULT ''''::citext) RETURNS uuid LANGUAGE sqlAS $function$DELETE from calendar WHERE id = id_in; -- CASCADE delete flows through to related child tables.INSERT INTO calendar  (id, calendar_name, week_starts_on, description)            VALUES    (id_in, calendar_name_in, week_starts_on_in, description_in)            RETURNING id; -- The RETURNING clauses is a very cool Postgres extension to SQL. It should be in the standards.$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:calendar_generate_year_of_days.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.calendar_generate_year_of_days (fiscal_year_name_in text_not_empty, fiscal_year_abbr_in text_not_empty, first_date_of_fiscal_year_in date, last_date_of_fiscal_year_in date, week_start_offset integer) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'calendar_generate_year_of_days (fiscal_year_name_in text_not_empty, fiscal_year_abbr_in text_not_empty, first_date_of_fiscal_year_in date, last_date_of_fiscal_year_in date, week_start_offset integer)', '()', 'ascendco.calendar_generate_year_of_days fiscal_year_name_in text_not_empty, fiscal_year_abbr_in text_not_empty, first_date_of_fiscal_year_in date, last_date_of_fiscal_year_in date, week_start_offset integer existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''calendar_generate_year_of_days''   and pg_get_function_identity_arguments(oid) = ''fiscal_year_name_in text_not_empty, fiscal_year_abbr_in text_not_empty, first_date_of_fiscal_year_in date, last_date_of_fiscal_year_in date, week_start_offset integer'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'calendar_generate_year_of_days (fiscal_year_name_in text_not_empty, fiscal_year_abbr_in text_not_empty, first_date_of_fiscal_year_in date, last_date_of_fiscal_year_in date, week_start_offset integer)', '()', 'ascendco.calendar_generate_year_of_days fiscal_year_name_in text_not_empty, fiscal_year_abbr_in text_not_empty, first_date_of_fiscal_year_in date, last_date_of_fiscal_year_in date, week_start_offset integer definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''calendar_generate_year_of_days''   and pg_get_function_identity_arguments(oid) = ''fiscal_year_name_in text_not_empty, fiscal_year_abbr_in text_not_empty, first_date_of_fiscal_year_in date, last_date_of_fiscal_year_in date, week_start_offset integer'';', 'CREATE OR REPLACE FUNCTION ascendco.calendar_generate_year_of_days(fiscal_year_name_in text_not_empty, fiscal_year_abbr_in text_not_empty, first_date_of_fiscal_year_in date, last_date_of_fiscal_year_in date, week_start_offset integer DEFAULT 1) RETURNS TABLE(date_actual date, epoch bigint, day_suffix citext, day_name citext, day_name_abbreviated citext, day_of_week_usa integer, day_of_week_iso integer, day_of_month_actual integer, day_of_quarter_iso integer, day_of_year_actual integer, day_of_year_fiscal integer, week_of_month_actual integer, week_of_year_actual integer, week_of_year_fiscal_name citext, week_of_year_fiscal citext, week_of_year_iso citext, month_actual integer, month_actual_name citext, month_actual_name_abbreviated citext, month_fiscal integer, month_fiscal_name citext, month_fiscal_name_abbreviated citext, quarter_actual integer, quarter_actual_name citext, quarter_fiscal integer, quarter_fiscal_name citext, year_actual integer, first_date_of_week date, last_date_of_week date, first_date_of_month date, last_date_of_month date, first_date_of_quarter date, last_date_of_quarter date, first_date_of_year_actual date, last_date_of_year_actual date, first_date_of_year_fiscal date, last_date_of_year_fiscal date, mmyyyyy citext, mmddyyyy citext, ddmmyyyyy citext, weekend boolean) LANGUAGE plpgsqlAS $function$DECLARE   days_in_year_calculated integer := last_date_of_fiscal_year_in - first_date_of_fiscal_year_in +1;BEGIN-- The parameter types screen out most bad inputs, but it''s still possible to screw up the start-end range. A few quick checks.IF first_date_of_fiscal_year_in > last_date_of_fiscal_year_in THEN  RAISE EXCEPTION USING     message = ''Invalid date range: '' || first_date_of_fiscal_year_in::text || '' to '' || last_date_of_fiscal_year_in::text,     hint = ''The first day in the year is later than the last day in the year.'',     errcode = ''KC400''; -- Custom code, see the error_code table.END IF;IF days_in_year_calculated < 364 OR days_in_year_calculated > 371 THEN  RAISE EXCEPTION USING     message = ''Invalid date range: ''  || first_date_of_fiscal_year_in::text || '' to '' || last_date_of_fiscal_year_in::text,     hint =  days_in_year_calculated::text || '' days in the fiscal year.'' || ''. fiscal years are expected to have 52 or 53 weeks for 364 or 371 days'',     errcode = ''KC401''; -- Custom code, see the error_code table.END IF;RETURN QUERYSELECT	datum                                                           AS date_actual,	EXTRACT(EPOCH FROM datum)::int8                                 AS epoch,-- Note: TO_CHAR ("string" to us 4D folk) argument fm/FM = Fill Mode. Which means "strip padding." Eh?	TO_CHAR(datum, ''fmDDth'')::citext                                AS day_suffix,	TO_CHAR(datum, ''fmDay'')::citext                                 AS day_name,	TO_CHAR(datum, ''fmDy'') ::citext                                 AS day_name_abbreviated,	(EXTRACT(DOW FROM datum) + 1)::integer                          AS day_of_week_usa,     -- 1-7 for Sunday-Monday, like 4D.	(EXTRACT(ISODOW FROM datum))::integer                           AS day_of_week_iso,     -- 1-7 for Monday-Sunday.	(EXTRACT(DAY FROM datum))::integer                              AS day_of_month_actual,	(datum - DATE_TRUNC(''quarter'', datum)::DATE + 1)::integer       AS day_of_quarter_iso,	(EXTRACT(DOY FROM datum))::integer                              AS day_of_year_actual,	(datum - first_date_of_fiscal_year_in +1)::integer              AS day_of_year_fiscal,	TO_CHAR(datum, ''W'')::integer                                    AS week_of_month_actual,	TO_CHAR(datum,''WW'')::integer                                    AS week_of_year_actual,	-- OMG! This next lines really are *horrible*. Want Abbr-00 format. Yeah, maybe there''s a simpler way, maybe this *is* the simpler way.	CONCAT(''Week '', to_char(calendar_get_fiscal_week(datum, first_date_of_fiscal_year_in),''fm00'')::citext, '' '', fiscal_year_abbr_in)::citext  AS week_of_year_fiscal_name,	CONCAT(fiscal_year_abbr_in, ''-'', to_char(calendar_get_fiscal_week(datum, first_date_of_fiscal_year_in),''fm00'')::citext)::citext  AS week_of_year_fiscal,	(EXTRACT(ISOYEAR FROM datum) || TO_CHAR(datum, ''"-W"IW-'') || EXTRACT(ISODOW FROM datum))::citext                      AS week_of_year_iso,	(EXTRACT(MONTH FROM datum))::integer                            AS month_actual,	TO_CHAR(datum, ''Month'')::citext                                 AS month_actual_name,	TO_CHAR(datum, ''Mon'')::citext                                   AS month_actual_name_abbreviated,    calendar_get_fiscal_month (datum, first_date_of_fiscal_year_in) AS month_fiscal, -- Redundnat data with different column names for convenience	TO_CHAR(datum, ''Month'')::citext                                 AS month_fiscal_name,	TO_CHAR(datum, ''Mon'')::citext                                   AS month_fiscal_name_abbreviated,	(EXTRACT(QUARTER FROM datum))::integer                          AS quarter_actual,	CASE	   WHEN EXTRACT(QUARTER FROM datum) = 1 THEN ''First''::citext	   WHEN EXTRACT(QUARTER FROM datum) = 2 THEN ''Second''::citext	   WHEN EXTRACT(QUARTER FROM datum) = 3 THEN ''Third''::citext	   WHEN EXTRACT(QUARTER FROM datum) = 4 THEN ''Fourth''::citext	   ELSE ''''::citext	END                                                                 AS quarter_actual_name,	((datum - first_date_of_fiscal_year_in +1) / (7 * 13) +1)::integer  AS quarter_fiscal,	CASE	   WHEN (datum - first_date_of_fiscal_year_in +1) / (7 * 13) +1 = 1 THEN ''First''::citext	   WHEN (datum - first_date_of_fiscal_year_in +1) / (7 * 13) +1 = 2 THEN ''Second''::citext	   WHEN (datum - first_date_of_fiscal_year_in +1) / (7 * 13) +1 = 3 THEN ''Third''::citext	   WHEN (datum - first_date_of_fiscal_year_in +1) / (7 * 13) +1 = 4 THEN ''Fourth''::citext	   ELSE ''''::citext	END                                                                 AS quarter_fiscal_name,	(EXTRACT(ISOYEAR FROM datum))::integer AS year_actual,  -- calendar year	datum + (week_start_offset     - EXTRACT(ISODOW FROM datum))::int   AS first_date_of_week,	datum + (week_start_offset + 6 - EXTRACT(ISODOW FROM datum))::int   AS last_date_of_week,	datum + (1 - EXTRACT(DAY FROM datum))::INT                          AS first_date_of_month,	(DATE_TRUNC(''MONTH'', datum) + INTERVAL ''1 MONTH - 1 day'')::DATE     AS last_date_of_month,	DATE_TRUNC(''quarter'', datum)::DATE                                  AS first_date_of_quarter,    (DATE_TRUNC(''quarter'', datum) + INTERVAL ''3 MONTH - 1 day'')::DATE   AS last_date_of_quarter,	TO_DATE(EXTRACT(YEAR FROM datum) || ''-01-01'', ''YYYY-MM-DD'')         AS first_date_of_year_actual,	TO_DATE(EXTRACT(YEAR FROM datum) || ''-12-31'', ''YYYY-MM-DD'')         AS last_date_of_year_actual,	first_date_of_fiscal_year_in                                        AS first_date_of_year_fiscal,	last_date_of_fiscal_year_in                                         AS last_date_of_year_fiscal,	TO_CHAR(datum, ''mmyyyyy'')::citext                                   AS mmyyyyy,	TO_CHAR(datum, ''mmddyyyy'')::citext                                  AS mmddyyyy,	TO_CHAR(datum, ''ddmmyyyyy'')::citext                                 AS ddmmyyyyy,	CASE	   WHEN EXTRACT(ISODOW FROM datum) IN (6, 7) THEN TRUE	   ELSE FALSE	END AS weekend-- Synthesize a list of dates. This is then run against each line in the SELECT above,-- and the result is inserted into calendar_date.FROM (SELECT first_date_of_fiscal_year_in + SEQUENCE.DAY AS datum      FROM GENERATE_SERIES(0, days_in_year_calculated -1 ) AS SEQUENCE (DAY)      GROUP BY SEQUENCE.DAY) DQORDER BY 1;RAISE NOTICE ''fiscal_year_name_in: %'', fiscal_year_name_in;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:calendar_get_fiscal_month.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.calendar_get_fiscal_month (date_in date, first_date_of_fiscal_year_in date) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'calendar_get_fiscal_month (date_in date, first_date_of_fiscal_year_in date)', '()', 'ascendco.calendar_get_fiscal_month date_in date, first_date_of_fiscal_year_in date existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''calendar_get_fiscal_month''   and pg_get_function_identity_arguments(oid) = ''date_in date, first_date_of_fiscal_year_in date'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'calendar_get_fiscal_month (date_in date, first_date_of_fiscal_year_in date)', '()', 'ascendco.calendar_get_fiscal_month date_in date, first_date_of_fiscal_year_in date definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''calendar_get_fiscal_month''   and pg_get_function_identity_arguments(oid) = ''date_in date, first_date_of_fiscal_year_in date'';', 'CREATE OR REPLACE FUNCTION ascendco.calendar_get_fiscal_month(date_in date, first_date_of_fiscal_year_in date) RETURNS integer LANGUAGE plpgsqlAS $function$DECLARE    fiscal_week integer  := calendar_get_fiscal_week (date_in, first_date_of_fiscal_year_in);    fiscal_month integer := 0;BEGINSELECTCASE WHEN fiscal_week <  5 THEN  1	 WHEN fiscal_week <  9 THEN  2	 WHEN fiscal_week < 14 THEN  3	 WHEN fiscal_week < 18 THEN  4	 WHEN fiscal_week < 22 THEN  5	 WHEN fiscal_week < 27 THEN  6	 WHEN fiscal_week < 32 THEN  7	 WHEN fiscal_week < 35 THEN  8	 WHEN fiscal_week < 40 THEN  9	 WHEN fiscal_week < 44 THEN 10	 WHEN fiscal_week < 48 THEN 11	 ELSE                       12END INTO fiscal_month;RETURN fiscal_month;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:calendar_get_fiscal_week.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.calendar_get_fiscal_week (date_in date, first_date_of_fiscal_year_in date) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'calendar_get_fiscal_week (date_in date, first_date_of_fiscal_year_in date)', '()', 'ascendco.calendar_get_fiscal_week date_in date, first_date_of_fiscal_year_in date existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''calendar_get_fiscal_week''   and pg_get_function_identity_arguments(oid) = ''date_in date, first_date_of_fiscal_year_in date'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'calendar_get_fiscal_week (date_in date, first_date_of_fiscal_year_in date)', '()', 'ascendco.calendar_get_fiscal_week date_in date, first_date_of_fiscal_year_in date definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''calendar_get_fiscal_week''   and pg_get_function_identity_arguments(oid) = ''date_in date, first_date_of_fiscal_year_in date'';', 'CREATE OR REPLACE FUNCTION ascendco.calendar_get_fiscal_week(date_in date, first_date_of_fiscal_year_in date) RETURNS integer LANGUAGE sqlAS $function$SELECT ((date_in - first_date_of_fiscal_year_in) / 7 ) +1$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:calendar_insert_year_of_days.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.calendar_insert_year_of_days (calendar_id_in uuid, calendar_year_id_in uuid, fiscal_year_name_in text, fiscal_year_abbr_in text, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'calendar_insert_year_of_days (calendar_id_in uuid, calendar_year_id_in uuid, fiscal_year_name_in text, fiscal_year_abbr_in text, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer)', '()', 'ascendco.calendar_insert_year_of_days calendar_id_in uuid, calendar_year_id_in uuid, fiscal_year_name_in text, fiscal_year_abbr_in text, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''calendar_insert_year_of_days''   and pg_get_function_identity_arguments(oid) = ''calendar_id_in uuid, calendar_year_id_in uuid, fiscal_year_name_in text, fiscal_year_abbr_in text, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'calendar_insert_year_of_days (calendar_id_in uuid, calendar_year_id_in uuid, fiscal_year_name_in text, fiscal_year_abbr_in text, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer)', '()', 'ascendco.calendar_insert_year_of_days calendar_id_in uuid, calendar_year_id_in uuid, fiscal_year_name_in text, fiscal_year_abbr_in text, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''calendar_insert_year_of_days''   and pg_get_function_identity_arguments(oid) = ''calendar_id_in uuid, calendar_year_id_in uuid, fiscal_year_name_in text, fiscal_year_abbr_in text, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer'';', 'CREATE OR REPLACE FUNCTION ascendco.calendar_insert_year_of_days(calendar_id_in uuid, calendar_year_id_in uuid, fiscal_year_name_in text, fiscal_year_abbr_in text, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer) RETURNS void LANGUAGE plpgsqlAS $function$BEGININSERT INTO calendar_day (            calendar_id,            calendar_year_id,            date_actual,            epoch,            day_suffix,            day_name,            day_name_abbreviated,            day_of_week_usa,            day_of_week_iso,            day_of_month_actual,            day_of_quarter_iso,            day_of_year_actual,            day_of_year_fiscal,            week_of_month_actual,            week_of_year_actual,            week_of_year_fiscal_name,            week_of_year_fiscal,            week_of_year_iso,            month_actual,            month_actual_name,            month_actual_name_abbreviated,            month_fiscal,            month_fiscal_name,            month_fiscal_name_abbreviated,            quarter_actual,            quarter_actual_name,            quarter_fiscal,            quarter_fiscal_name,            year_actual,            first_date_of_week,            last_date_of_week,            first_date_of_month,            last_date_of_month,            first_date_of_quarter,            last_date_of_quarter,            first_date_of_year_actual,            last_date_of_year_actual,            first_date_of_year_fiscal,            last_date_of_year_fiscal,            mmyyyyy,            mmddyyyy,            ddmmyyyyy,            weekend         )     SELECT calendar_id_in,            calendar_year_id_in,            date_actual,            epoch,            day_suffix,            day_name,            day_name_abbreviated,            day_of_week_usa,            day_of_week_iso,            day_of_month_actual,            day_of_quarter_iso,            day_of_year_actual,            day_of_year_fiscal,            week_of_month_actual,            week_of_year_actual,            week_of_year_fiscal_name,            week_of_year_fiscal,            week_of_year_iso,            month_actual,            month_actual_name,            month_actual_name_abbreviated,            month_fiscal,            month_fiscal_name,            month_fiscal_name_abbreviated,            quarter_actual,            quarter_actual_name,            quarter_fiscal,            quarter_fiscal_name,            year_actual,            first_date_of_week,            last_date_of_week,            first_date_of_month,            last_date_of_month,            first_date_of_quarter,            last_date_of_quarter,            first_date_of_year_actual,            last_date_of_year_actual,            first_date_of_year_fiscal,            last_date_of_year_fiscal,            mmyyyyy,            mmddyyyy,            ddmmyyyyy,            weekend     from  calendar_generate_year_of_days (                  fiscal_year_name_in,                  fiscal_year_abbr_in,                  first_date_in_year_in,                  last_date_in_year_in,                  week_start_offset)      order by date_actual;RETURN; -- void/NULLEND$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:calendar_year_add.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.calendar_year_add (calendar_id_in uuid, fiscal_year_name_in citext, fiscal_year_abbr_in citext, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'calendar_year_add (calendar_id_in uuid, fiscal_year_name_in citext, fiscal_year_abbr_in citext, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer)', '()', 'ascendco.calendar_year_add calendar_id_in uuid, fiscal_year_name_in citext, fiscal_year_abbr_in citext, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''calendar_year_add''   and pg_get_function_identity_arguments(oid) = ''calendar_id_in uuid, fiscal_year_name_in citext, fiscal_year_abbr_in citext, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'calendar_year_add (calendar_id_in uuid, fiscal_year_name_in citext, fiscal_year_abbr_in citext, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer)', '()', 'ascendco.calendar_year_add calendar_id_in uuid, fiscal_year_name_in citext, fiscal_year_abbr_in citext, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''calendar_year_add''   and pg_get_function_identity_arguments(oid) = ''calendar_id_in uuid, fiscal_year_name_in citext, fiscal_year_abbr_in citext, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer'';', 'CREATE OR REPLACE FUNCTION ascendco.calendar_year_add(calendar_id_in uuid, fiscal_year_name_in citext, fiscal_year_abbr_in citext, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer DEFAULT 1) RETURNS citext LANGUAGE plpgsqlAS $function$DECLARE   calendar_year_id_out                             uuid;   -- Returned by INSERT below.   days_in_year_calculated            int2      :=  last_date_in_year_in - first_date_in_year_in + 1;   weeks_in_year_calculated           int2      :=  days_in_year_calculated/7;   first_day_of_week_usa_calculated   int2      :=  extract (dow from first_date_in_year_in) + 1;  -- 1-7, Sunday-Monday, US convention.   first_day_of_week_iso_calclated    int2      :=  extract (isodow from first_date_in_year_in); -- 1-7, Monday-Saturday, ISO convention.-- Note: TO_CHAR adds a space after the day name, that''s what the regex is about. See-- https://stackoverflow.com/questions/22699535/trim-trailing-spaces-with-postgresql   first_day_of_week_name_calculated  day_name  :=  regexp_replace(to_char (first_date_in_year_in, ''Day'') , ''\s+$'', ''''); -- Sunday-Monday. day_name is a custom domain (type+rules).BEGIN-- The parameter types screen out most bad inputs, but it''s still possible to screw up the start-end range. A few quick checks.IF first_date_in_year_in > last_date_in_year_in THEN  RAISE EXCEPTION USING     message = ''Invalid date range: '' || first_date_in_year_in::text || '' to '' || last_date_in_year_in::text,     hint = ''The first day in the year is later than the last day in the year.'',     errcode = ''KC400''; -- Custom code, see the error_code table.END IF;IF days_in_year_calculated < 364 OR days_in_year_calculated > 371 THEN  RAISE EXCEPTION USING     message = ''Invalid date range: ''  || first_date_in_year_in::text || '' to '' || last_date_in_year_in::text,     hint =  days_in_year_calculated::text || '' days in the fiscal year. fiscal years are expected to have 52 or 53 weeks for 364 or 371 days total.'',     errcode = ''KC401''; -- Custom code, see the error_code table.END IF;DELETE FROM ascendco.calendar_year      WHERE calendar_id = calendar_id_in  -- CASCADE delete flows through to related child tables.        AND fiscal_year_name = fiscal_year_name_in;INSERT INTO calendar_year  (calendar_id,                            fiscal_year_name,                            fiscal_year_abbr,                            first_date_in_year,                            last_date_in_year,                            days_in_year,                            weeks_in_year,                            first_day_of_week_usa,                            first_day_of_week_iso,                            first_day_of_week_name,                            week_start_offset)                    VALUES (calendar_id_in,                            fiscal_year_name_in,                            fiscal_year_abbr_in,                            first_date_in_year_in,                            last_date_in_year_in,                            days_in_year_calculated,                            weeks_in_year_calculated,                            first_day_of_week_usa_calculated,                            first_day_of_week_iso_calclated,                            first_day_of_week_name_calculated,                            week_start_offset)--  The RETURNING clauses is a very cool Postgres extension to SQL. It should be in the standards.--  The ID is set in the table definition on INSERT as a generated UUID.            RETURNING id into calendar_year_id_out;-- PERFORM instead of SELECT to discard the result.-- The records are still created, they''re just not returned by this function.PERFORM calendar_insert_year_of_days(        calendar_id_in,        calendar_year_id_out,        fiscal_year_name_in,        fiscal_year_abbr_in,        first_date_in_year_in,        last_date_in_year_in,        week_start_offset);RETURN calendar_year_id_out;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:check_if_patch_has_been_run_before.tests.sql------------------------------------------------------------------------------------- Checks for dba.check_if_patch_has_been_run_before (patch_name_in text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'check_if_patch_has_been_run_before (patch_name_in text)', '()', 'dba.check_if_patch_has_been_run_before patch_name_in text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''check_if_patch_has_been_run_before''   and pg_get_function_identity_arguments(oid) = ''patch_name_in text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'check_if_patch_has_been_run_before (patch_name_in text)', '()', 'dba.check_if_patch_has_been_run_before patch_name_in text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''check_if_patch_has_been_run_before''   and pg_get_function_identity_arguments(oid) = ''patch_name_in text'';', 'CREATE OR REPLACE FUNCTION dba.check_if_patch_has_been_run_before(patch_name_in text) RETURNS boolean LANGUAGE plpgsqlAS $function$DECLARE  row_count int8;BEGINSELECT count(*) INTO row_count  FROM patch_log WHERE patch_name = patch_name_in;IF (row_count = 0) THEN  RETURN false;ELSE  RAISE EXCEPTION USING	 message = ''Patch has been run before'',	 hint = ''Patches should be run in order, and may not be reapplied.'',	 errcode = ''KC001''; -- Custom code for ''Patch has been run before.''END IF;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:clear_deleted_records.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.clear_deleted_records () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'clear_deleted_records ()', '()', 'ascendco.clear_deleted_records  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''clear_deleted_records''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'clear_deleted_records ()', '()', 'ascendco.clear_deleted_records  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''clear_deleted_records''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION ascendco.clear_deleted_records() RETURNS SETOF void LANGUAGE plpgsqlAS $function$BEGIN     DELETE FROM ascendco.analytic_productivity WHERE marked_for_deletion = true;     ANALYZE  ascendco.analytic_productivity;     DELETE FROM ascendco.analytic_sterilizer_load WHERE marked_for_deletion = true;     ANALYZE  ascendco.analytic_sterilizer_load;     DELETE FROM ascendco.analytic_sterilizer_loadinv WHERE marked_for_deletion = true;     ANALYZE  ascendco.analytic_sterilizer_loadinv;     DELETE FROM ascendco.item_type WHERE marked_for_deletion = true;     ANALYZE  ascendco.item_type;     DELETE FROM ascendco.specialty WHERE marked_for_deletion = true;     ANALYZE  ascendco.specialty;     DELETE FROM ascendco.sterilize_method WHERE marked_for_deletion = true;     ANALYZE  ascendco.sterilize_method;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:clinic_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.clinic_to_v1 (clinic_in clinic) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'clinic_to_v1 (clinic_in clinic)', '()', 'types_plus.clinic_to_v1 clinic_in clinic existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''clinic_to_v1''   and pg_get_function_identity_arguments(oid) = ''clinic_in clinic'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'clinic_to_v1 (clinic_in clinic)', '()', 'types_plus.clinic_to_v1 clinic_in clinic definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''clinic_to_v1''   and pg_get_function_identity_arguments(oid) = ''clinic_in clinic'';', 'CREATE OR REPLACE FUNCTION types_plus.clinic_to_v1(clinic_in clinic) RETURNS clinic_v1 LANGUAGE sqlAS $function$                   SELECT			clinic_in.id,			clinic_in.hsys_id,			clinic_in.created_dts,			clinic_in.updated_dts,			clinic_in.marked_for_deletion,			clinic_in.receive_at_clinic,			clinic_in.name_,			clinic_in.created_by,			clinic_in.updated_by               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:column_tetris.tests.sql------------------------------------------------------------------------------------- Checks for dba.column_tetris (table_in regclass) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'column_tetris (table_in regclass)', '()', 'dba.column_tetris table_in regclass existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''column_tetris''   and pg_get_function_identity_arguments(oid) = ''table_in regclass'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'column_tetris (table_in regclass)', '()', 'dba.column_tetris table_in regclass definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''column_tetris''   and pg_get_function_identity_arguments(oid) = ''table_in regclass'';', 'CREATE OR REPLACE FUNCTION dba.column_tetris(table_in regclass) RETURNS TABLE(column_name text, type_name text, type_align text, alignment_description text, type_length smallint, suggestioned_position bigint, current_position smallint) LANGUAGE sqlAS $function$   SELECT a.attname::text  AS column_name,          t.typname::text  AS type_name,          t.typalign::text AS type_align,          CASE             WHEN typalign = ''c'' THEN ''char alignment, no alignment needed''             WHEN typalign = ''s'' THEN ''short alignment, 2 bytes on most machines''             WHEN typalign = ''i'' THEN ''int alignment, 4 bytes on most machines''             WHEN typalign = ''d'' THEN ''double alignment, 8 bytes on many machines, but by no means all''             ELSE ''Unexpected typalign '' || typalign			END AS alignment_description,          t.typlen   AS type_length,          ROW_NUMBER () OVER (ORDER BY t.typlen DESC,a.attname) as suggested_position,          a.attnum   AS currrent_position     FROM pg_class c     JOIN pg_attribute a ON (a.attrelid = c.oid)     JOIN pg_type t ON (t.oid = a.atttypid)    WHERE c.relname = table_in::name AND          a.attnum >= 0 ORDER BY t.typlen DESC,a.attname;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:connection_snapshot_kvp.tests.sql------------------------------------------------------------------------------------- Checks for tools.connection_snapshot_kvp () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'connection_snapshot_kvp ()', '()', 'tools.connection_snapshot_kvp  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''connection_snapshot_kvp''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'connection_snapshot_kvp ()', '()', 'tools.connection_snapshot_kvp  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''connection_snapshot_kvp''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION tools.connection_snapshot_kvp() RETURNS TABLE(setting_name text, setting_value text) LANGUAGE plpgsqlAS $function$DECLARE	search_path text;	BEGIN	 	 SELECT setting FROM pg_settings WHERE name=''search_path'' INTO search_path;	 SELECT ''user_name'',current_user INTO setting_name,setting_value;				RETURN NEXT;	 SELECT ''session_user_name'',session_user INTO setting_name,setting_value;		RETURN NEXT;	 SELECT ''role_nane'',current_role INTO setting_name,setting_value;				RETURN NEXT;	 SELECT ''database_name'',current_database() INTO setting_name,setting_value;		RETURN NEXT;	 SELECT ''server_version'',version() INTO setting_name,setting_value;				RETURN NEXT;	 SELECT ''search_path'',search_path INTO setting_name,setting_value;				RETURN NEXT;	 SELECT ''inet_client_addr'',inet_client_addr() INTO setting_name,setting_value;	RETURN NEXT;	 SELECT ''inet_client_port'',inet_client_port() INTO setting_name,setting_value;	RETURN NEXT;	 SELECT ''inet_server_addr'',inet_server_addr() INTO setting_name,setting_value;	RETURN NEXT;	 SELECT ''inet_server_port'',inet_server_port() INTO setting_name,setting_value;	RETURN NEXT;	 SELECT ''query'',current_query() INTO setting_name,setting_value;				RETURN NEXT;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:connection_snapshot.tests.sql------------------------------------------------------------------------------------- Checks for tools.connection_snapshot () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'connection_snapshot ()', '()', 'tools.connection_snapshot  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''connection_snapshot''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'connection_snapshot ()', '()', 'tools.connection_snapshot  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''connection_snapshot''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION tools.connection_snapshot() RETURNS TABLE(user_name text, session_user_name text, role_nane text, database_name text, server_version text, search_path text, inet_client_addr inet, inet_client_port integer, inet_server_addr inet, inet_server_port integer, query text) LANGUAGE plpgsqlAS $function$ BEGIN	 user_name := current_user;	 session_user_name := session_user;	 role_nane := current_role;	 database_name := current_database();	 server_version := version();	 	 SELECT setting FROM pg_settings WHERE name=''search_path'' INTO search_path;	 inet_client_addr := inet_client_addr();	 inet_client_port := inet_client_port();	 inet_server_addr := inet_server_addr();	 inet_server_port := inet_server_port();		 query := current_query();		 RETURN NEXT;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:convert_ib_timezone_name.tests.sql------------------------------------------------------------------------------------- Checks for api.convert_ib_timezone_name (tz_name_in citext) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'api', 'convert_ib_timezone_name (tz_name_in citext)', '()', 'api.convert_ib_timezone_name tz_name_in citext existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''convert_ib_timezone_name''   and pg_get_function_identity_arguments(oid) = ''tz_name_in citext'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'api', 'convert_ib_timezone_name (tz_name_in citext)', '()', 'api.convert_ib_timezone_name tz_name_in citext definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''convert_ib_timezone_name''   and pg_get_function_identity_arguments(oid) = ''tz_name_in citext'';', 'CREATE OR REPLACE FUNCTION api.convert_ib_timezone_name(tz_name_in citext) RETURNS citext LANGUAGE sql IMMUTABLEAS $function$-- IB uses custom names, convert these to standard tz names.SELECTCASE WHEN tz_name_in = ''Arizona''  THEN ''US/Arizona''::citext     WHEN tz_name_in = ''Central''  THEN ''US/Central''::citext     WHEN tz_name_in = ''Eastern''  THEN ''US/Eastern''::citext     WHEN tz_name_in = ''Mountain'' THEN ''US/Mountain''::citext     WHEN tz_name_in = ''Pacific''  THEN ''US/Pacific''::citext     WHEN tz_name_in = ''Western''  THEN ''US/Pacific''::citext  -- IB uses ''Western'' instead of ''Pacific''     ELSE ''UTC''::citextEND$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:count_rows_unqualified.tests.sql------------------------------------------------------------------------------------- Checks for tools.count_rows_unqualified (tablename text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'count_rows_unqualified (tablename text)', '()', 'tools.count_rows_unqualified tablename text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''count_rows_unqualified''   and pg_get_function_identity_arguments(oid) = ''tablename text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'count_rows_unqualified (tablename text)', '()', 'tools.count_rows_unqualified tablename text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''count_rows_unqualified''   and pg_get_function_identity_arguments(oid) = ''tablename text'';', 'CREATE OR REPLACE FUNCTION tools.count_rows_unqualified(tablename text) RETURNS integer LANGUAGE plpgsqlAS $function$DECLAREresult integer;query varchar;-- Man, don''t use this code anywhere live...it needs to be rewritten to use quot_ident(), etc. to avoid injection.BEGINquery := ''SELECT count(1) FROM '' || tablename;execute query into result;return result;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:count_rows.tests.sql------------------------------------------------------------------------------------- Checks for tools.count_rows (schema text, tablename text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'count_rows (schema text, tablename text)', '()', 'tools.count_rows schema text, tablename text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''count_rows''   and pg_get_function_identity_arguments(oid) = ''schema text, tablename text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'count_rows (schema text, tablename text)', '()', 'tools.count_rows schema text, tablename text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''count_rows''   and pg_get_function_identity_arguments(oid) = ''schema text, tablename text'';', 'CREATE OR REPLACE FUNCTION tools.count_rows(schema text, tablename text) RETURNS integer LANGUAGE plpgsqlAS $function$DECLAREresult integer;query varchar;BEGINquery := ''SELECT count(1) FROM '' || schema || ''.'' || tablename;execute query into result;return result;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:domo_dataset_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.domo_dataset_to_v1 (domo_dataset_in domo_dataset) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'domo_dataset_to_v1 (domo_dataset_in domo_dataset)', '()', 'types_plus.domo_dataset_to_v1 domo_dataset_in domo_dataset existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''domo_dataset_to_v1''   and pg_get_function_identity_arguments(oid) = ''domo_dataset_in domo_dataset'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'domo_dataset_to_v1 (domo_dataset_in domo_dataset)', '()', 'types_plus.domo_dataset_to_v1 domo_dataset_in domo_dataset definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''domo_dataset_to_v1''   and pg_get_function_identity_arguments(oid) = ''domo_dataset_in domo_dataset'';', 'CREATE OR REPLACE FUNCTION types_plus.domo_dataset_to_v1(domo_dataset_in domo_dataset) RETURNS domo_dataset_v1 LANGUAGE sqlAS $function$                   SELECT			domo_dataset_in.id,			domo_dataset_in.dataset_name,			domo_dataset_in.rows_count,			domo_dataset_in.columns_count,			domo_dataset_in.created_at_dts,			domo_dataset_in.updated_at_dts               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:domo_passthrough_expand.tests.sql------------------------------------------------------------------------------------- Checks for api.domo_passthrough_expand (type_name text, packed_data jsonb) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'api', 'domo_passthrough_expand (type_name text, packed_data jsonb)', '()', 'api.domo_passthrough_expand type_name text, packed_data jsonb existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''domo_passthrough_expand''   and pg_get_function_identity_arguments(oid) = ''type_name text, packed_data jsonb'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'api', 'domo_passthrough_expand (type_name text, packed_data jsonb)', '()', 'api.domo_passthrough_expand type_name text, packed_data jsonb definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''domo_passthrough_expand''   and pg_get_function_identity_arguments(oid) = ''type_name text, packed_data jsonb'';', 'CREATE OR REPLACE FUNCTION api.domo_passthrough_expand(type_name text, packed_data jsonb) RETURNS SETOF record LANGUAGE plpgsql STABLEAS $function$BEGIN    RETURN QUERY EXECUTE FORMAT   ''select *      from jsonb_populate_recordset(null::%1$I, %2$I) as expanded_data;'',           type_name,           packed_data;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:domo_passthrough_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.domo_passthrough_to_v1 (domo_passthrough_in domo_passthrough) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'domo_passthrough_to_v1 (domo_passthrough_in domo_passthrough)', '()', 'types_plus.domo_passthrough_to_v1 domo_passthrough_in domo_passthrough existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''domo_passthrough_to_v1''   and pg_get_function_identity_arguments(oid) = ''domo_passthrough_in domo_passthrough'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'domo_passthrough_to_v1 (domo_passthrough_in domo_passthrough)', '()', 'types_plus.domo_passthrough_to_v1 domo_passthrough_in domo_passthrough definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''domo_passthrough_to_v1''   and pg_get_function_identity_arguments(oid) = ''domo_passthrough_in domo_passthrough'';', 'CREATE OR REPLACE FUNCTION types_plus.domo_passthrough_to_v1(domo_passthrough_in domo_passthrough) RETURNS domo_passthrough_v1 LANGUAGE sqlAS $function$        SELECT			domo_passthrough_in.source_id,			domo_passthrough_in.hsys_id,			domo_passthrough_in.facility_id,			domo_passthrough_in.view_version,			domo_passthrough_in.dataset_name,			domo_passthrough_in.data$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:domo_passthrough_to_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.domo_passthrough_to_v2 (domo_passthrough_in domo_passthrough) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'domo_passthrough_to_v2 (domo_passthrough_in domo_passthrough)', '()', 'types_plus.domo_passthrough_to_v2 domo_passthrough_in domo_passthrough existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''domo_passthrough_to_v2''   and pg_get_function_identity_arguments(oid) = ''domo_passthrough_in domo_passthrough'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'domo_passthrough_to_v2 (domo_passthrough_in domo_passthrough)', '()', 'types_plus.domo_passthrough_to_v2 domo_passthrough_in domo_passthrough definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''domo_passthrough_to_v2''   and pg_get_function_identity_arguments(oid) = ''domo_passthrough_in domo_passthrough'';', 'CREATE OR REPLACE FUNCTION types_plus.domo_passthrough_to_v2(domo_passthrough_in domo_passthrough) RETURNS domo_passthrough_v2 LANGUAGE sqlAS $function$        SELECT			domo_passthrough_in.key_supplement,			domo_passthrough_in.source_id,			domo_passthrough_in.hsys_id,			domo_passthrough_in.facility_id,			domo_passthrough_in.view_version,			domo_passthrough_in.dataset_name,			domo_passthrough_in.data,			domo_passthrough_in.from_dts,			domo_passthrough_in.to_dts$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:dts_to_yyyy_mm_int.tests.sql------------------------------------------------------------------------------------- Checks for tools.dts_to_yyyy_mm_int (timestamp without time zone) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'dts_to_yyyy_mm_int (timestamp without time zone)', '()', 'tools.dts_to_yyyy_mm_int timestamp without time zone existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''dts_to_yyyy_mm_int''   and pg_get_function_identity_arguments(oid) = ''timestamp without time zone'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'dts_to_yyyy_mm_int (timestamp without time zone)', '()', 'tools.dts_to_yyyy_mm_int timestamp without time zone definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''dts_to_yyyy_mm_int''   and pg_get_function_identity_arguments(oid) = ''timestamp without time zone'';', 'CREATE OR REPLACE FUNCTION tools.dts_to_yyyy_mm_int(timestamp without time zone) RETURNS integer LANGUAGE sql IMMUTABLE PARALLEL SAFEAS $function$SELECT (EXTRACT(year FROM $1) * 100 + EXTRACT(month FROM $1))::int$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:dynamic_pivot.tests.sql------------------------------------------------------------------------------------- Checks for tools.dynamic_pivot (central_query text, headers_query text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'dynamic_pivot (central_query text, headers_query text)', '()', 'tools.dynamic_pivot central_query text, headers_query text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''dynamic_pivot''   and pg_get_function_identity_arguments(oid) = ''central_query text, headers_query text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'dynamic_pivot (central_query text, headers_query text)', '()', 'tools.dynamic_pivot central_query text, headers_query text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''dynamic_pivot''   and pg_get_function_identity_arguments(oid) = ''central_query text, headers_query text'';', 'CREATE OR REPLACE FUNCTION tools.dynamic_pivot(central_query text, headers_query text) RETURNS refcursor LANGUAGE plpgsqlAS $function$DECLARE  left_column text;  header_column text;  value_column text;  h_value text;  headers_clause text;  query text;  j json;  r record;  curs refcursor;  i int:=1;BEGIN  -- find the column names of the source query  EXECUTE ''select row_to_json(_r.*) from ('' ||  central_query || '') AS _r'' into j;  FOR r in SELECT * FROM json_each_text(j)  LOOP    IF (i=1) THEN left_column := r.key;      ELSEIF (i=2) THEN header_column := r.key;      ELSEIF (i=3) THEN value_column := r.key;    END IF;    i := i+1;  END LOOP;  --  build the dynamic transposition query (based on the canonical model)  FOR h_value in EXECUTE headers_query  LOOP    headers_clause := concat(headers_clause,     format(chr(10)||'',min(case when %I=%L then %I::text end) as %I'',           header_column,	   h_value,	   value_column,	   h_value ));  END LOOP;  query := format(''SELECT %I %s FROM (select *,row_number() over() as rn from (%s) AS _c) as _d GROUP BY %I order by min(rn)'',           left_column,	   headers_clause,	   central_query,	   left_column);  -- open the cursor so the caller can FETCH right away  OPEN curs FOR execute query;  RETURN curs;END $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:explain_this.tests.sql------------------------------------------------------------------------------------- Checks for dba.explain_this (l_query text, OUT explain json) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'explain_this (l_query text, OUT explain json)', '()', 'dba.explain_this l_query text, OUT explain json existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''explain_this''   and pg_get_function_identity_arguments(oid) = ''l_query text, OUT explain json'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'explain_this (l_query text, OUT explain json)', '()', 'dba.explain_this l_query text, OUT explain json definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''explain_this''   and pg_get_function_identity_arguments(oid) = ''l_query text, OUT explain json'';', 'CREATE OR REPLACE FUNCTION dba.explain_this(l_query text, OUT explain json) RETURNS SETOF json LANGUAGE plpgsql STRICT SECURITY DEFINERAS $function$BEGIN  RETURN QUERY EXECUTE ''explain (format json) '' || l_query;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:facility_activities_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.facility_activities_to_v1 (facility_activities_in facility_activities) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'facility_activities_to_v1 (facility_activities_in facility_activities)', '()', 'types_plus.facility_activities_to_v1 facility_activities_in facility_activities existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''facility_activities_to_v1''   and pg_get_function_identity_arguments(oid) = ''facility_activities_in facility_activities'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'facility_activities_to_v1 (facility_activities_in facility_activities)', '()', 'types_plus.facility_activities_to_v1 facility_activities_in facility_activities definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''facility_activities_to_v1''   and pg_get_function_identity_arguments(oid) = ''facility_activities_in facility_activities'';', 'CREATE OR REPLACE FUNCTION types_plus.facility_activities_to_v1(facility_activities_in facility_activities) RETURNS facility_activities_v1 LANGUAGE sqlAS $function$                   SELECT			facility_activities_in.id,			facility_activities_in.facility_id,			facility_activities_in.last_updated_by_data_file_id,			facility_activities_in.created_dts,			facility_activities_in.updated_dts,			facility_activities_in.marked_for_deletion,			facility_activities_in.name_,			facility_activities_in.created_by,			facility_activities_in.updated_by               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:facility_department_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.facility_department_to_v1 (facility_department_in facility_department) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'facility_department_to_v1 (facility_department_in facility_department)', '()', 'types_plus.facility_department_to_v1 facility_department_in facility_department existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''facility_department_to_v1''   and pg_get_function_identity_arguments(oid) = ''facility_department_in facility_department'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'facility_department_to_v1 (facility_department_in facility_department)', '()', 'types_plus.facility_department_to_v1 facility_department_in facility_department definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''facility_department_to_v1''   and pg_get_function_identity_arguments(oid) = ''facility_department_in facility_department'';', 'CREATE OR REPLACE FUNCTION types_plus.facility_department_to_v1(facility_department_in facility_department) RETURNS facility_department_v1 LANGUAGE sqlAS $function$                   SELECT			facility_department_in.id,			facility_department_in.facility_id,			facility_department_in.their_id,			facility_department_in.created_dts,			facility_department_in.updated_dts,			facility_department_in.marked_for_deletion,			facility_department_in.is_available_in_sonar,			facility_department_in.receive_at_dept,			facility_department_in.is_from_emr,			facility_department_in.name_,			facility_department_in.created_by,			facility_department_in.updated_by,			facility_department_in.label_name,			facility_department_in.inv_audit               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:facility_get_id.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.facility_get_id (facility_name_in citext) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'facility_get_id (facility_name_in citext)', '()', 'ascendco.facility_get_id facility_name_in citext existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''facility_get_id''   and pg_get_function_identity_arguments(oid) = ''facility_name_in citext'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'facility_get_id (facility_name_in citext)', '()', 'ascendco.facility_get_id facility_name_in citext definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''facility_get_id''   and pg_get_function_identity_arguments(oid) = ''facility_name_in citext'';', 'CREATE OR REPLACE FUNCTION ascendco.facility_get_id(facility_name_in citext) RETURNS uuid LANGUAGE sql STABLEAS $function$SELECT coalesce(    (SELECT id FROM ascendco.facility WHERE name_ = facility_name_in),    ''00000000-0000-0000-0000-000000000000''::uuid);$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:facility_get_name.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.facility_get_name (facility_id_in uuid) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'facility_get_name (facility_id_in uuid)', '()', 'ascendco.facility_get_name facility_id_in uuid existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''facility_get_name''   and pg_get_function_identity_arguments(oid) = ''facility_id_in uuid'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'facility_get_name (facility_id_in uuid)', '()', 'ascendco.facility_get_name facility_id_in uuid definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''facility_get_name''   and pg_get_function_identity_arguments(oid) = ''facility_id_in uuid'';', 'CREATE OR REPLACE FUNCTION ascendco.facility_get_name(facility_id_in uuid) RETURNS citext LANGUAGE sql STABLEAS $function$-- Need to put the select as an expression *inside* the COALESCE, or else it never fires on NULL. D''oh!-- Not the same in a straight select for Reasons That I Do Not Undestand.-- https://stackoverflow.com/questions/65973653/SELECT coalesce((SELECT name_ FROM ascendco.facility WHERE id = facility_id_in),'''');$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:facility_location_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.facility_location_to_v1 (facility_location_in facility_location) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'facility_location_to_v1 (facility_location_in facility_location)', '()', 'types_plus.facility_location_to_v1 facility_location_in facility_location existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''facility_location_to_v1''   and pg_get_function_identity_arguments(oid) = ''facility_location_in facility_location'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'facility_location_to_v1 (facility_location_in facility_location)', '()', 'types_plus.facility_location_to_v1 facility_location_in facility_location definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''facility_location_to_v1''   and pg_get_function_identity_arguments(oid) = ''facility_location_in facility_location'';', 'CREATE OR REPLACE FUNCTION types_plus.facility_location_to_v1(facility_location_in facility_location) RETURNS facility_location_v1 LANGUAGE sqlAS $function$        SELECT			facility_location_in.id,			facility_location_in.marked_for_deletion,			facility_location_in.facility_id,			facility_location_in.type_,			facility_location_in.name_$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:facility_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.facility_to_v1 (facility_in facility) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'facility_to_v1 (facility_in facility)', '()', 'types_plus.facility_to_v1 facility_in facility existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''facility_to_v1''   and pg_get_function_identity_arguments(oid) = ''facility_in facility'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'facility_to_v1 (facility_in facility)', '()', 'types_plus.facility_to_v1 facility_in facility definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''facility_to_v1''   and pg_get_function_identity_arguments(oid) = ''facility_in facility'';', 'CREATE OR REPLACE FUNCTION types_plus.facility_to_v1(facility_in facility) RETURNS facility_v1 LANGUAGE sqlAS $function$        SELECT			facility_in.id,			facility_in.marked_for_deletion,			facility_in.hsys_id,			facility_in.name_,			facility_in.tz_name$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:facility_to_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.facility_to_v2 (facility_in facility) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'facility_to_v2 (facility_in facility)', '()', 'types_plus.facility_to_v2 facility_in facility existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''facility_to_v2''   and pg_get_function_identity_arguments(oid) = ''facility_in facility'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'facility_to_v2 (facility_in facility)', '()', 'types_plus.facility_to_v2 facility_in facility definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''facility_to_v2''   and pg_get_function_identity_arguments(oid) = ''facility_in facility'';', 'CREATE OR REPLACE FUNCTION types_plus.facility_to_v2(facility_in facility) RETURNS facility_v2 LANGUAGE sqlAS $function$                   SELECT			facility_in.id,			facility_in.hsys_id,			facility_in.production_label_form_id,			facility_in.permanent_label_form_id,			facility_in.missing_inst_label_form_id,			facility_in.facility_location_label_form_id,			facility_in.sterilizer_label_form_id,			facility_in.user_badge_label_form_id,			facility_in.workstation_label_form_id,			facility_in.default_spd_facility_id,			facility_in.created_dts,			facility_in.updated_dts,			facility_in.sonar_auto_logout_minutes,			facility_in.sonar_auto_logout_dialog_minutes,			facility_in.num_ors,			facility_in.sonar_go_live_date,			facility_in.marked_for_deletion,			facility_in.is_count_sheet_source_truth,			facility_in.hide_doc_names_for_stats,			facility_in.is_item_master_live,			facility_in.is_sonar_live,			facility_in.sterilizer_print_at_sterilizing,			facility_in.sterilizer_print_at_cooling,			facility_in.sterilizer_print_at_released,			facility_in.can_set_all_found_in_assembly,			facility_in.name_,			facility_in.their_id,			facility_in.created_by,			facility_in.updated_by,			facility_in.reporting_name,			facility_in.label_name,			facility_in.tz_name,			facility_in.sonar_name_full,			facility_in.sonar_count_sheet_form_name,			facility_in.sterilize_alert_level,			facility_in.sonar_scanner_stop_char,			facility_in.emr_location_name,			facility_in.sonar_features,			facility_in.interfaces,			facility_in.needs_scheduling,			facility_in.analytics_prefs               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:field_data_profile.tests.sql------------------------------------------------------------------------------------- Checks for dba.field_data_profile (table_name text, field_name text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'field_data_profile (table_name text, field_name text)', '()', 'dba.field_data_profile table_name text, field_name text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''field_data_profile''   and pg_get_function_identity_arguments(oid) = ''table_name text, field_name text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'field_data_profile (table_name text, field_name text)', '()', 'dba.field_data_profile table_name text, field_name text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''field_data_profile''   and pg_get_function_identity_arguments(oid) = ''table_name text, field_name text'';', 'CREATE OR REPLACE FUNCTION dba.field_data_profile(table_name text, field_name text) RETURNS TABLE(distinct_value citext, page_correlation real, field_cardinality bigint, rows_count bigint, value_frequency bigint, selectivity numeric, proportion_chart text) LANGUAGE plpgsqlAS $function$BEGINRETURN QUERY EXECUTE ''with table_estimate as (select correlation  from pg_stats   where tablename = '''''' || table_name || '''''' and         attname   = '''''' || field_name || ''''''),          distinct_values as  (select distinct '' || quote_ident(field_name) || ''::citext as distinct_value,         count(*) as frequency     from '' || quote_ident(table_name) || '' group by '' || quote_ident(field_name) || ''),  row_figures as  (select count(*) as rows_count     from '' || quote_ident(table_name) || '') select  distinct_values.distinct_value,        table_estimate.correlation as page_correlation,        (select count(*) as field_cardinality from distinct_values),		 row_figures.rows_count,		 distinct_values.frequency as value_frequency,          round((distinct_values.frequency::decimal / row_figures.rows_count::decimal),3) as value_selectivity,        repeat('' || quote_literal(''‚ñÄ'') || '', ((distinct_values.frequency::decimal / row_figures.rows_count::decimal)*100)::int) as proportion_chart           from distinct_values,        table_estimate,        row_figures        ''    	using  table_name, field_name;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:find_outliers.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.find_outliers (table_name text, field_name text, frequency_threshold integer, value_threshold integer) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'find_outliers (table_name text, field_name text, frequency_threshold integer, value_threshold integer)', '()', 'ascendco.find_outliers table_name text, field_name text, frequency_threshold integer, value_threshold integer existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''find_outliers''   and pg_get_function_identity_arguments(oid) = ''table_name text, field_name text, frequency_threshold integer, value_threshold integer'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'find_outliers (table_name text, field_name text, frequency_threshold integer, value_threshold integer)', '()', 'ascendco.find_outliers table_name text, field_name text, frequency_threshold integer, value_threshold integer definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''find_outliers''   and pg_get_function_identity_arguments(oid) = ''table_name text, field_name text, frequency_threshold integer, value_threshold integer'';', 'CREATE OR REPLACE FUNCTION ascendco.find_outliers(table_name text, field_name text, frequency_threshold integer, value_threshold integer) RETURNS TABLE(value_ integer, frequency_percentile integer, value_percentile integer) LANGUAGE plpgsqlAS $function$BEGIN	RETURN QUERY EXECUTE ''withfrequency_counts as (   select '' ||  field_name || ''::INT as value_,          count(*) as frequency              from '' || table_name || ''			  where '' ||  field_name || '' > 0	      group by 1	      order by 2),frequency_percentiles as (   select *,         ntile(100) over (order by frequency asc) as frequency_percentile,         ntile(100) over (order by value_ asc) as value_percentile	  from frequency_counts)select value_,       frequency_percentile,       value_percentile  from frequency_percentiles   where frequency_percentile < '' || frequency_threshold || ''  and         value_ >         (select value_          from frequency_counts          where value_percentile > '' || value_threshold || ''          limit 1)order by 1,2,3'';END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:find_rare_and_large.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.find_rare_and_large (table_name text, field_name text, frequency_threshold integer, value_threshold integer, target_server text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'find_rare_and_large (table_name text, field_name text, frequency_threshold integer, value_threshold integer, target_server text)', '()', 'ascendco.find_rare_and_large table_name text, field_name text, frequency_threshold integer, value_threshold integer, target_server text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''find_rare_and_large''   and pg_get_function_identity_arguments(oid) = ''table_name text, field_name text, frequency_threshold integer, value_threshold integer, target_server text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'find_rare_and_large (table_name text, field_name text, frequency_threshold integer, value_threshold integer, target_server text)', '()', 'ascendco.find_rare_and_large table_name text, field_name text, frequency_threshold integer, value_threshold integer, target_server text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''find_rare_and_large''   and pg_get_function_identity_arguments(oid) = ''table_name text, field_name text, frequency_threshold integer, value_threshold integer, target_server text'';', 'CREATE OR REPLACE FUNCTION ascendco.find_rare_and_large(table_name text, field_name text, frequency_threshold integer, value_threshold integer, target_server text DEFAULT ''All''::text) RETURNS TABLE(value_ integer, frequency integer, frequency_percentile integer, value_percentile integer) LANGUAGE plpgsqlAS $function$BEGINIF (target_server = ''All'') THEN    RETURN QUERY EXECUTE ''	with frequency_counts as (	  select '' || quote_ident(field_name) || ''::INT as value_,	   	      count(*) as frequency	    from '' || quote_ident(table_name) || ''	   where '' || quote_ident(field_name) || '' > 0	group by 1	order by 2),	frequency_percentiles as (	  select *,	         ntile(100) over (order by frequency asc) as frequency_percentile,	         ntile(100) over (order by value_ asc) as value_percentile	   from frequency_counts)	select value_,	       frequency::INT,	       frequency_percentile,	       value_percentile	  from frequency_percentiles	   where frequency_percentile < $3 and	         value_ >	         (select value_	          from frequency_counts	          where value_percentile > $4	          limit 1)	order by 1,2,3''	using  table_name, field_name, frequency_threshold, value_threshold;ELSE    RETURN QUERY EXECUTE ''	with frequency_counts as (	  select '' || quote_ident(field_name) || ''::INT as value_,	   	      count(*) as frequency	    from '' || quote_ident(table_name) || '' 	inner join data_file_info on (data_file_info.id = '' || quote_ident(table_name) || ''.data_file_id)	   where '' || quote_ident(field_name) || '' > 0 and	         data_file_info.server_name_ = $5	group by 1	order by 2),	frequency_percentiles as (	  select *,	         ntile(100) over (order by frequency asc) as frequency_percentile,	         ntile(100) over (order by value_ asc) as value_percentile	   from frequency_counts)	select value_,	       frequency::INT,	       frequency_percentile,	       value_percentile	  from frequency_percentiles	   where frequency_percentile < $3 and	         value_ >	         (select value_	          from frequency_counts	          where value_percentile >$4	          limit 1)	order by 1,2,3''	using  table_name, field_name, frequency_threshold, value_threshold, target_server;END IF;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:focus_to_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.focus_to_v2 (focus_in focus) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'focus_to_v2 (focus_in focus)', '()', 'types_plus.focus_to_v2 focus_in focus existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''focus_to_v2''   and pg_get_function_identity_arguments(oid) = ''focus_in focus'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'focus_to_v2 (focus_in focus)', '()', 'types_plus.focus_to_v2 focus_in focus definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''focus_to_v2''   and pg_get_function_identity_arguments(oid) = ''focus_in focus'';', 'CREATE OR REPLACE FUNCTION types_plus.focus_to_v2(focus_in focus) RETURNS focus_v2 LANGUAGE sqlAS $function$                   SELECT			focus_in.scase_id,			focus_in.hsys_id,			focus_in.facility_id,			focus_in.sched_dts,			focus_in.facility_name,			focus_in.or_name,			focus_in.case_seq,			focus_in.desc_,			focus_in.status,			focus_in.transport_from,			focus_in.surgeon_name,			focus_in.proc_name,			focus_in.when_               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:form_template_get_name.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.form_template_get_name (id_in uuid) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'form_template_get_name (id_in uuid)', '()', 'ascendco.form_template_get_name id_in uuid existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''form_template_get_name''   and pg_get_function_identity_arguments(oid) = ''id_in uuid'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'form_template_get_name (id_in uuid)', '()', 'ascendco.form_template_get_name id_in uuid definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''form_template_get_name''   and pg_get_function_identity_arguments(oid) = ''id_in uuid'';', 'CREATE OR REPLACE FUNCTION ascendco.form_template_get_name(id_in uuid) RETURNS citext LANGUAGE sqlAS $function$-- Need to put the select as an expression *inside* the COALESCE, or else it never fires on NULL. D''oh!-- Not the same in a straight select for Reasons That I Do Not Undestand.-- https://stackoverflow.com/questions/65973653/SELECT coalesce((SELECT name_ FROM ascendco.form_template WHERE id = id_in),'''');$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:form_template_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.form_template_to_v1 (form_template_in form_template) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'form_template_to_v1 (form_template_in form_template)', '()', 'types_plus.form_template_to_v1 form_template_in form_template existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''form_template_to_v1''   and pg_get_function_identity_arguments(oid) = ''form_template_in form_template'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'form_template_to_v1 (form_template_in form_template)', '()', 'types_plus.form_template_to_v1 form_template_in form_template definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''form_template_to_v1''   and pg_get_function_identity_arguments(oid) = ''form_template_in form_template'';', 'CREATE OR REPLACE FUNCTION types_plus.form_template_to_v1(form_template_in form_template) RETURNS form_template_v1 LANGUAGE sqlAS $function$                   SELECT			form_template_in.id,			form_template_in.created_dts,			form_template_in.updated_dts,			form_template_in.marked_for_deletion,			form_template_in.name_,			form_template_in.comments_,			form_template_in.updated_by,			form_template_in.created_by,			form_template_in.form_definition               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:format_uuid.tests.sql------------------------------------------------------------------------------------- Checks for tools.format_uuid (id uuid) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'format_uuid (id uuid)', '()', 'tools.format_uuid id uuid existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''format_uuid''   and pg_get_function_identity_arguments(oid) = ''id uuid'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'format_uuid (id uuid)', '()', 'tools.format_uuid id uuid definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''format_uuid''   and pg_get_function_identity_arguments(oid) = ''id uuid'';', 'CREATE OR REPLACE FUNCTION tools.format_uuid(id uuid) RETURNS text LANGUAGE sqlAS $function$SELECT UPPER(REPLACE(id::text,''-'', ''''));$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:function_list.test.sqlselect * from test_case_setup('Function', 'Global', 'function_list', '()', 'Function list comparison', 'select string_agg(oid::regprocedure::text, '','' order by oid::regprocedure::text) as function_list  from pg_proc where prokind = ''f''   and pronamespace::regnamespace::text NOT IN (''information_schema'',''pg_catalog'',''extensions'');', '_stats_agg_accumulator(_stats_agg_accum_type,double precision),_stats_agg_finalizer(_stats_agg_accum_type),activity_for_facility(uuid),activity_to_v1(activity),activity_to_v2(activity),analytic_productivity_to_v1(analytic_productivity),analytic_scan_to_v1(analytic_scan),analytic_sterilizer_load_to_v1(analytic_sterilizer_load),analytic_sterilizer_loadinv_to_v1(analytic_sterilizer_loadinv),analytic_sterilizer_loadinv_to_v2(analytic_sterilizer_loadinv),analytic_work_to_v2(analytic_work),array_remove_element(anyarray,integer),assembly_prods_to_v1(assembly_prods),assembly_to_v1(assembly),calendar_add(uuid,citext,day_name,citext),calendar_generate_year_of_days(text_not_empty,text_not_empty,date,date,integer),calendar_get_fiscal_month(date,date),calendar_get_fiscal_week(date,date),calendar_insert_year_of_days(uuid,uuid,text,text,date,date,integer),calendar_year_add(uuid,citext,citext,date,date,integer),check_if_patch_has_been_run_before(text),clear_deleted_records(),clinic_to_v1(clinic),column_tetris(regclass),connection_snapshot(),connection_snapshot_kvp(),convert_ib_timezone_name(citext),count_rows(text,text),count_rows_unqualified(text),domo_dataset_to_v1(domo_dataset),domo_passthrough_expand(text,jsonb),domo_passthrough_to_v1(domo_passthrough),domo_passthrough_to_v2(domo_passthrough),dts_to_yyyy_mm_int(timestamp without time zone),dynamic_pivot(text,text),event_triggers.on_ddl_create_or_alter(),event_triggers.on_ddl_drop(),explain_this(text),facility_activities_to_v1(facility_activities),facility_department_to_v1(facility_department),facility_get_id(citext),facility_get_name(uuid),facility_location_to_v1(facility_location),facility_to_v1(facility),facility_to_v2(facility),field_data_profile(text,text),find_outliers(text,text,integer,integer),find_rare_and_large(text,text,integer,integer,text),focus_to_v2(focus),form_template_get_name(uuid),form_template_to_v1(form_template),format_uuid(uuid),fuzzy_compare(citext,citext,citext,citext,real,citext),fuzzy_compare_cross(jsonb,jsonb,real,citext),fuzzy_compare_pairwise(jsonb,jsonb,real,citext),fuzzy_match(citext,uuid,integer,citext,real,integer),get_current_user(),get_function_owner_name(oid),get_session_timezone(),hour_bin_get_bin(integer,citext),hour_bin_get_bin_label(integer,citext),hour_number(timestamp with time zone),hsys_get_facility_ids(uuid),hsys_get_id(citext),hsys_get_id_by_facility_id(uuid),hsys_get_name(uuid),hsys_get_name_by_facility_id(uuid),hsys_to_v1(hsys),hsys_to_v2(hsys),insert_activity_v1(activity_v1[]),insert_activity_v2(activity_v2[]),insert_analytic_productivity_v1(analytic_productivity_v1[]),insert_analytic_scan_v1(analytic_scan_v1[]),insert_analytic_sterilizer_load_v1(analytic_sterilizer_load_v1[]),insert_analytic_sterilizer_loadinv_v1(analytic_sterilizer_loadinv_v1[]),insert_analytic_sterilizer_loadinv_v2(analytic_sterilizer_loadinv_v2[]),insert_analytic_work_v2(analytic_work_v2[]),insert_assembly_prods_v1(assembly_prods_v1[]),insert_assembly_v1(assembly_v1[]),insert_clinic_v1(clinic_v1[]),insert_domo_dataset_v1(domo_dataset_v1[]),insert_domo_passthrough_v1(domo_passthrough_v1[]),insert_domo_passthrough_v2(domo_passthrough_v2[]),insert_facility_activities_v1(facility_activities_v1[]),insert_facility_department_v1(facility_department_v1[]),insert_facility_location_v1(facility_location_v1[]),insert_facility_v1(facility_v1[]),insert_facility_v2(facility_v2[]),insert_focus_v2(focus_v2[]),insert_form_template_v1(form_template_v1[]),insert_hsys_v1(hsys_v1[]),insert_hsys_v2(hsys_v2[]),insert_inv_v2(inv_v2[]),insert_item_arch_v1(item_arch_v1[]),insert_item_type_v1(item_type_v1[]),insert_item_v2(item_v2[]),insert_loaner_case_v1(loaner_case_v1[]),insert_loaner_item_v1(loaner_item_v1[]),insert_loaner_iteminv_v1(loaner_iteminv_v1[]),insert_loaner_v1(loaner_v1[]),insert_need_v5(need_v5[]),insert_productivity_detail_v1(productivity_detail_v1[]),insert_push_audit_v1(push_audit_v1[]),insert_q_audit_step_v1(q_audit_step_v1[]),insert_q_event_audit_step_v1(q_event_audit_step_v1[]),insert_q_event_person_v1(q_event_person_v1[]),insert_q_event_v1(q_event_v1[]),insert_q_level_v1(q_level_v1[]),insert_q_subtype_v1(q_subtype_v1[]),insert_q_type_v1(q_type_v1[]),insert_rep_v1(rep_v1[]),insert_specialty_v1(specialty_v1[]),insert_stat_facility_v1(stat_facility_v1[]),insert_sterilize_method_v1(sterilize_method_v1[]),insert_sterilize_params_v1(sterilize_params_v1[]),insert_sterilizer_load_v1(sterilizer_load_v1[]),insert_sterilizer_load_v2(sterilizer_load_v2[]),insert_sterilizer_log_v1(sterilizer_log_v1[]),insert_sterilizer_v1(sterilizer_v1[]),insert_sup_parent_v1(sup_parent_v1[]),insert_sup_v2(sup_v2[]),insert_text_collection_v1(text_text[],boolean,uuid,citext),insert_web_user_v1(web_user_v1[]),insert_web_user_v2(web_user_v2[]),interval_generator(timestamp with time zone,timestamp with time zone,interval),inv_getdesc(uuid,citext),inv_to_v2(inv),item_arch_to_v1(item_arch),item_to_v2(item),item_type_to_v1(item_type),loaner_case_to_v1(loaner_case),loaner_item_to_v1(loaner_item),loaner_iteminv_to_v1(loaner_iteminv),loaner_to_v1(loaner),minutes_old(timestamp with time zone),monge_elkan(text,text,text,boolean,boolean),need_to_v5(need),num2words(text),numeric_field_analysis(text,text),numeric_field_buckets(text,text,integer),numeric_field_stats(text,text),outlier_fix(),patch_log_insert(citext,citext,text),pg_stat_statements(),productivity_detail_to_v1(productivity_detail),productivity_user(uuid,date,date,uuid),push_log_count_since(timestamp with time zone),push_log_recent(citext,integer),push_log_sum_since(timestamp with time zone),push_target_add_if_missing(citext,citext,citext,citext),q_audit_step_to_v1(q_audit_step),q_event_audit_step_to_v1(q_event_audit_step),q_event_person_to_v1(q_event_person),q_event_to_v1(q_event),q_level_to_v1(q_level),q_subtype_to_v1(q_subtype),q_type_to_v1(q_type),rcl_get_record_id(uuid),relkind_name(text),rep_to_v1(rep),row_count_estimate(text),show_database_rights(text),show_functions(),show_owners(),show_schema_rights(text),show_table_rights(text),show_view_rights(text),specialty_to_v1(specialty),stat_facility_to_v1(stat_facility),sterilize_method_to_v1(sterilize_method),sterilize_params_to_v1(sterilize_params),sterilizer_load_to_v1(sterilizer_load),sterilizer_load_to_v2(sterilizer_load),sterilizer_log_to_v1(sterilizer_log),sterilizer_to_v1(sterilizer),sup_parent_to_v1(sup_parent),sup_to_v2(sup),system_analyze_after_deletions(),system_delete_marked(),table_delete_marked(regclass),test_case_setup(citext,citext,citext,citext,citext,text,citext,citext,citext,jsonb,test_outcome,user_name[],boolean,boolean,citext,citext),test_result_insert(uuid,boolean,test_outcome,user_name,uuid,citext,citext,citext,citext,jsonb),text_collection_get_id(citext),trigger_function_calendar_day_before_insert(),trigger_function_calendar_year_before_upsert(),trigger_function_log_deletion_count(),trigger_function_log_truncation_count(),trigger_function_outlier_upsert(),trigger_function_record_changes_log_detail_after_insert(),trigger_function_record_changes_log_detail_before_insert(),trigger_function_record_changes_log_detail_stop_duplicates(),trigger_function_row_compare_upsert(),trigger_function_update_last_updated_dts(),typcategory_name(text),typtype_name(text),view_count_estimate(regclass),view_get_column_descriptions(text),view_get_referenced_tables(text),views_using_field(text,text),web_user_to_v1(web_user),web_user_to_v2(web_user),word_count(citext),word_type(citext),work_get_source_name(citext)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:fuzzy_compare_cross.tests.sql------------------------------------------------------------------------------------- Checks for tools.fuzzy_compare_cross (base_jsonb_in jsonb, comparison_jsonb_in jsonb, handicap_factor_in real, monge_elkan_similarity_method_in citext) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'fuzzy_compare_cross (base_jsonb_in jsonb, comparison_jsonb_in jsonb, handicap_factor_in real, monge_elkan_similarity_method_in citext)', '()', 'tools.fuzzy_compare_cross base_jsonb_in jsonb, comparison_jsonb_in jsonb, handicap_factor_in real, monge_elkan_similarity_method_in citext existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''fuzzy_compare_cross''   and pg_get_function_identity_arguments(oid) = ''base_jsonb_in jsonb, comparison_jsonb_in jsonb, handicap_factor_in real, monge_elkan_similarity_method_in citext'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'fuzzy_compare_cross (base_jsonb_in jsonb, comparison_jsonb_in jsonb, handicap_factor_in real, monge_elkan_similarity_method_in citext)', '()', 'tools.fuzzy_compare_cross base_jsonb_in jsonb, comparison_jsonb_in jsonb, handicap_factor_in real, monge_elkan_similarity_method_in citext definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''fuzzy_compare_cross''   and pg_get_function_identity_arguments(oid) = ''base_jsonb_in jsonb, comparison_jsonb_in jsonb, handicap_factor_in real, monge_elkan_similarity_method_in citext'';', 'CREATE OR REPLACE FUNCTION tools.fuzzy_compare_cross(base_jsonb_in jsonb, comparison_jsonb_in jsonb, handicap_factor_in real DEFAULT 0.3, monge_elkan_similarity_method_in citext DEFAULT ''jarowinkler''::citext) RETURNS TABLE(base_text citext, comparison_text citext, base_id citext, comparison_id citext, highest_score decimal_score, best_method citext, avg_score decimal_score, avg_quadratic_score decimal_score, lowest_score decimal_score, equality_check integer, jaro_score decimal_score, jaro_winkler_score decimal_score, levenshtein_score decimal_score, monge_elkan_score decimal_score, monge_elkan_quadratic_score decimal_score, monge_elkan_handicap_score decimal_score, monge_elkan_quadratic_handicap_score decimal_score, qgram_score decimal_score, trigram_score decimal_score) LANGUAGE plpgsqlAS $function$BEGIN-------------------------------------------------------------- Safety checks for parameters stitched into the SQL.------------------------------------------------------------    monge_elkan_similarity_method_in  := lower(monge_elkan_similarity_method_in);	IF monge_elkan_similarity_method_in NOT IN (''jaro'',''jarowinkler'',''qgram'') THEN		RAISE EXCEPTION USING			message = ''Invalid distance measure name '' || monge_elkan_similarity_method_in,			hint = ''Valid methods are jaro, jarowinkler, and qgram'',			errcode = ''KC300''; -- Custom code for ''Bad lookup ID''.    END IF;-------------------------------------------------------------- Range/sanity checks on thresholds------------------------------------------------------------	IF handicap_factor_in < 0 OR handicap_factor_in > 1 THEN		RAISE EXCEPTION USING			message = ''handicap_factor value is out of range.'',			hint = ''Value must be in the range 0-1.'',			errcode = ''KC202''; -- Custom code for ''Numeric parameter value is too low''.    END IF;RETURN QUERYWITHbase_expanded AS ( select *   from jsonb_to_recordset(     base_jsonb_in)  AS base_unpacked (                 text citext,                 id citext) ),comparison_expanded AS ( select *   from jsonb_to_recordset(     comparison_jsonb_in)  AS comparison_unpacked (                 text citext,                 id citext) ),combined_lists AS (select base_expanded.text         AS base_text_x,       base_expanded.id           AS base_id_x,       comparison_expanded.text   AS comparison_text_x,       comparison_expanded.id     AS comparison_id_x  from base_expanded,       comparison_expanded),---------------------------------------------------------- Pull in the basic scores, and add some handicaps--------------------------------------------------------basic_scores AS (select base_text_x,       comparison_text_x,       base_id_x,       comparison_id_x,       (base_text_x = comparison_text_x)::int4                                              AS equality_check_x,       monge_elkan(base_text_x, comparison_text_x, monge_elkan_similarity_method_in)        AS monge_elkan_score_x,       sqrt(monge_elkan(base_text_x, comparison_text_x, monge_elkan_similarity_method_in))  AS monge_elkan_quadratic_score_x,       jaccard(base_text_x, comparison_text_x)                                              AS jaccard_coefficient_x,       jaccard(base_text_x, comparison_text_x) * handicap_factor_in                         AS jaccard_handicap_x,       qgram(base_text_x,comparison_text_x)                                                 AS qgram_score_x,       similarity(base_text_x,comparison_text_x)                                            AS trigram_score_x,       lev(base_text_x,comparison_text_x)                                                   AS levenshtein_score_x,       jaro(base_text_x,comparison_text_x)                                                  AS jaro_score_x,       jarowinkler(base_text_x,comparison_text_x)                                           AS jaro_winkler_score_x  from combined_lists),---------------------------------------------------------- Pull in the basic scores, and add some handicaps--------------------------------------------------------extended_scores AS (SELECT  base_text_x,        comparison_text_x,        base_id_x,        comparison_id_x,        equality_check_x,        jaro_score_x,        jaro_winkler_score_x,        levenshtein_score_x,        monge_elkan_score_x,        monge_elkan_quadratic_score_x,        (monge_elkan_score_x - jaccard_handicap_x) AS monge_elkan_handicap_score_x,        (monge_elkan_quadratic_score_x - jaccard_handicap_x) AS monge_elkan_quadratic_handicap_score_x,        jaccard_coefficient_x,        jaccard_handicap_x,        qgram_score_x,        trigram_score_x  FROM basic_scores),---------------------------------------------------------- Augment with overall stats on range of scores--------------------------------------------------------  score_stats AS (  SELECT base_text_x,         comparison_text_x,         base_id_x,         comparison_id_x,         equality_check_x,         jaro_score_x,         jaro_winkler_score_x,         levenshtein_score_x,         monge_elkan_score_x,         monge_elkan_quadratic_score_x,         monge_elkan_handicap_score_x,         monge_elkan_quadratic_handicap_score_x,         jaccard_coefficient_x,         jaccard_handicap_x,         qgram_score_x,         trigram_score_x,           GREATEST (           equality_check_x,           jaro_score_x,           jaro_winkler_score_x,           levenshtein_score_x,           monge_elkan_score_x,           monge_elkan_handicap_score_x,           monge_elkan_quadratic_score_x,           monge_elkan_quadratic_handicap_score_x,           qgram_score_x,           trigram_score_x) AS highest_score_x,-- Leave out equality_check_x out of LEAST and AVG scores. It''s either 0 or 1, almost always 0.        LEAST (           jaro_score_x,           jaro_winkler_score_x,           levenshtein_score_x,           monge_elkan_score_x,           monge_elkan_handicap_score_x,           monge_elkan_quadratic_score_x,           monge_elkan_quadratic_handicap_score_x,           qgram_score_x,           trigram_score_x) AS lowest_score_x,         ((jaro_score_x +           jaro_winkler_score_x +           levenshtein_score_x +           monge_elkan_score_x +           monge_elkan_handicap_score_x +           monge_elkan_quadratic_score_x +           monge_elkan_quadratic_handicap_score_x +           qgram_score_x +           trigram_score_x) / 10) AS avg_score_x,           sqrt((jaro_score_x +           jaro_winkler_score_x +           levenshtein_score_x +           monge_elkan_score_x +           monge_elkan_handicap_score_x +           monge_elkan_quadratic_score_x +           monge_elkan_quadratic_handicap_score_x +           qgram_score_x +           trigram_score_x) / 10) AS avg_quadratic_score_x     FROM extended_scores        )---------------------------------------------------------- Final result: Get everything, along with the top score--------------------------------------------------------SELECT base_text_x,       comparison_text_x,       base_id_x,       comparison_id_x,       highest_score_x::decimal_score,        -- Ugh. Researching better methods for doing this part...and some of the others...bit too long.        -- In case of a tie, this code picks the first match.       CASE          WHEN highest_score_x = 0                                      THEN ''none''          WHEN highest_score_x = equality_check_x                       THEN ''equality_check''          WHEN highest_score_x = monge_elkan_score_x                    THEN ''monge_elkan''          WHEN highest_score_x = monge_elkan_handicap_score_x           THEN ''monge_elkan_handicap''          WHEN highest_score_x = monge_elkan_quadratic_score_x          THEN ''monge_elkan_quadratic''          WHEN highest_score_x = monge_elkan_quadratic_handicap_score_x THEN ''monge_elkan_quadratic_handicap''          WHEN highest_score_x = qgram_score_x                          THEN ''qgram''          WHEN highest_score_x = trigram_score_x                        THEN ''trigram''          WHEN highest_score_x = levenshtein_score_x                    THEN ''levenshtein''          WHEN highest_score_x = jaro_score_x                           THEN ''jaro''          WHEN highest_score_x = jaro_winkler_score_x                   THEN ''jaro_winkler''          WHEN highest_score_x = avg_score_x                            THEN ''avg''          WHEN highest_score_x = avg_quadratic_score_x                  THEN ''avg_quadratic''          ELSE ''Undefined''::citext        END AS best_method,       avg_score_x::decimal_score,       avg_quadratic_score_x::decimal_score,       lowest_score_x::decimal_score,       equality_check_x::int4,       jaro_score_x::decimal_score::decimal_score,       jaro_winkler_score_x::decimal_score,       levenshtein_score_x::decimal_score,       monge_elkan_score_x::decimal_score,       monge_elkan_quadratic_score_x::decimal_score,       monge_elkan_handicap_score_x::decimal_score,       monge_elkan_quadratic_handicap_score_x::decimal_score,       qgram_score_x::decimal_score,       trigram_score_x::decimal_score  FROM score_stats;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:fuzzy_compare_pairwise.tests.sql------------------------------------------------------------------------------------- Checks for tools.fuzzy_compare_pairwise (base_jsonb_in jsonb, comparison_jsonb_in jsonb, handicap_factor_in real, monge_elkan_similarity_method_in citext) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'fuzzy_compare_pairwise (base_jsonb_in jsonb, comparison_jsonb_in jsonb, handicap_factor_in real, monge_elkan_similarity_method_in citext)', '()', 'tools.fuzzy_compare_pairwise base_jsonb_in jsonb, comparison_jsonb_in jsonb, handicap_factor_in real, monge_elkan_similarity_method_in citext existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''fuzzy_compare_pairwise''   and pg_get_function_identity_arguments(oid) = ''base_jsonb_in jsonb, comparison_jsonb_in jsonb, handicap_factor_in real, monge_elkan_similarity_method_in citext'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'fuzzy_compare_pairwise (base_jsonb_in jsonb, comparison_jsonb_in jsonb, handicap_factor_in real, monge_elkan_similarity_method_in citext)', '()', 'tools.fuzzy_compare_pairwise base_jsonb_in jsonb, comparison_jsonb_in jsonb, handicap_factor_in real, monge_elkan_similarity_method_in citext definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''fuzzy_compare_pairwise''   and pg_get_function_identity_arguments(oid) = ''base_jsonb_in jsonb, comparison_jsonb_in jsonb, handicap_factor_in real, monge_elkan_similarity_method_in citext'';', 'CREATE OR REPLACE FUNCTION tools.fuzzy_compare_pairwise(base_jsonb_in jsonb, comparison_jsonb_in jsonb, handicap_factor_in real DEFAULT 0.3, monge_elkan_similarity_method_in citext DEFAULT ''jarowinkler''::citext) RETURNS TABLE(base_text citext, comparison_text citext, base_id citext, comparison_id citext, highest_score decimal_score, best_method citext, avg_score decimal_score, avg_quadratic_score decimal_score, lowest_score decimal_score, equality_check integer, jaro_score decimal_score, jaro_winkler_score decimal_score, levenshtein_score decimal_score, monge_elkan_score decimal_score, monge_elkan_quadratic_score decimal_score, monge_elkan_handicap_score decimal_score, monge_elkan_quadratic_handicap_score decimal_score, qgram_score decimal_score, trigram_score decimal_score) LANGUAGE plpgsqlAS $function$BEGIN-------------------------------------------------------------- Safety checks for parameters stitched into the SQL.------------------------------------------------------------    monge_elkan_similarity_method_in  := lower(monge_elkan_similarity_method_in);    IF monge_elkan_similarity_method_in NOT IN (''jaro'',''jarowinkler'',''qgram'') THEN        RAISE EXCEPTION USING            message = ''Invalid distance measure name '' || monge_elkan_similarity_method_in,            hint = ''Valid methods are jaro, jarowinkler, and qgram'',            errcode = ''KC300''; -- Custom code for ''Bad lookup ID''.    END IF;-------------------------------------------------------------- Range/sanity checks on thresholds------------------------------------------------------------    IF handicap_factor_in < 0 OR handicap_factor_in > 1 THEN        RAISE EXCEPTION USING            message = ''handicap_factor value is out of range.'',            hint = ''Value must be in the range 0-1.'',            errcode = ''KC202''; -- Custom code for ''Numeric parameter value is too low''.    END IF;RETURN QUERYWITHbase_expanded AS (   SELECT * FROM jsonb_array_elements(base_jsonb_in::jsonb)       WITH ORDINALITY AS x(element, idx)),comparison_expanded AS (   SELECT * FROM jsonb_array_elements(comparison_jsonb_in::jsonb)       WITH ORDINALITY AS y(element, idx) ),-- Pairwise JOIN using ordinality-geneated index as the joining term.-- So, base element 1 to comaprison element 1, and so on.combined_lists AS (select base_expanded.element ->> ''text''        AS base_text_x,       base_expanded.element ->> ''id''          AS base_id_x,       comparison_expanded.element ->> ''text''  AS comparison_text_x,       comparison_expanded.element ->> ''id''    AS comparison_id_x  from base_expanded  join comparison_expanded ON (comparison_expanded.idx = base_expanded.idx)),---------------------------------------------------------- Pull in the basic scores, and add some handicaps--------------------------------------------------------basic_scores AS (select base_text_x,       comparison_text_x,       base_id_x,       comparison_id_x,       (base_text_x = comparison_text_x)::int4                                              AS equality_check_x,       monge_elkan(base_text_x, comparison_text_x,monge_elkan_similarity_method_in)         AS monge_elkan_score_x,       sqrt(monge_elkan(base_text_x, comparison_text_x, monge_elkan_similarity_method_in))  AS monge_elkan_quadratic_score_x,       jaccard(base_text_x,comparison_text_x)                                               AS jaccard_coefficient,       jaccard(base_text_x,comparison_text_x) * handicap_factor_in                          AS jaccard_handicap,       qgram(base_text_x,comparison_text_x)                                                 AS qgram_score_x,       similarity(base_text_x,comparison_text_x)                                            AS trigram_score_x,       lev(base_text_x,comparison_text_x)                                                   AS levenshtein_score_x,       jaro(base_text_x,comparison_text_x)                                                  AS jaro_score_x,       jarowinkler(base_text_x,comparison_text_x)                                           AS jaro_winkler_score_x  from combined_lists),---------------------------------------------------------- Pull in the basic scores, and add some handicaps--------------------------------------------------------extended_scores AS (SELECT  base_text_x,        comparison_text_x,        base_id_x,        comparison_id_x,        equality_check_x,        jaro_score_x::decimal_score,        jaro_winkler_score_x::decimal_score,        levenshtein_score_x::decimal_score,        monge_elkan_score_x::decimal_score,        monge_elkan_quadratic_score_x::decimal_score,        (monge_elkan_score_x - jaccard_handicap)::decimal_score AS monge_elkan_handicap_score_x,        (monge_elkan_quadratic_score_x - jaccard_handicap)::decimal_score AS monge_elkan_quadratic_handicap_score_x,        jaccard_coefficient,        jaccard_handicap,        qgram_score_x::decimal_score,        trigram_score_x::decimal_score  FROM basic_scores),---------------------------------------------------------- Augment with overall stats on range of scores--------------------------------------------------------  score_stats AS (  SELECT base_text_x,         comparison_text_x,         base_id_x,         comparison_id_x,         equality_check_x,         jaro_score_x,         jaro_winkler_score_x,         levenshtein_score_x,         monge_elkan_score_x,         monge_elkan_quadratic_score_x,         monge_elkan_handicap_score_x,         monge_elkan_quadratic_handicap_score_x,         jaccard_coefficient,         jaccard_handicap,         qgram_score_x,         trigram_score_x,           GREATEST (           equality_check_x,           jaro_score_x,           jaro_winkler_score_x,           levenshtein_score_x,           monge_elkan_score_x,           monge_elkan_handicap_score_x,           monge_elkan_quadratic_score_x,           monge_elkan_quadratic_handicap_score_x,           qgram_score_x,           trigram_score_x)::decimal_score AS highest_score_x,-- Leave out equality_check_x out of LEAST and AVG scores. It''s either 0 or 1, almost always 0.        LEAST (           jaro_score_x,           jaro_winkler_score_x,           levenshtein_score_x,           monge_elkan_score_x,           monge_elkan_handicap_score_x,           monge_elkan_quadratic_score_x,           monge_elkan_quadratic_handicap_score_x,           qgram_score_x,           trigram_score_x)::decimal_score AS lowest_score_x,         ((jaro_score_x +           jaro_winkler_score_x +           levenshtein_score_x +           monge_elkan_score_x +           monge_elkan_handicap_score_x +           monge_elkan_quadratic_score_x +           monge_elkan_quadratic_handicap_score_x +           qgram_score_x +           trigram_score_x) / 10)::decimal_score AS avg_score_x,           sqrt((jaro_score_x +           jaro_winkler_score_x +           levenshtein_score_x +           monge_elkan_score_x +           monge_elkan_handicap_score_x +           monge_elkan_quadratic_score_x +           monge_elkan_quadratic_handicap_score_x +           qgram_score_x +           trigram_score_x) / 10)::decimal_score AS avg_quadratic_score_x     FROM extended_scores        )---------------------------------------------------------- Final result: Get everything, along with the top score--------------------------------------------------------SELECT base_text_x::citext,       comparison_text_x::citext,       base_id_x::citext,       comparison_id_x::citext,       highest_score_x,        -- Ugh. Researching better methods for doing this part...and some of the others...bit too long.        -- In case of a tie, this code picks the first match.       CASE          WHEN highest_score_x = 0 THEN ''none''          WHEN highest_score_x = equality_check_x                       THEN ''equality_check''          WHEN highest_score_x = monge_elkan_score_x                    THEN ''monge_elkan''          WHEN highest_score_x = monge_elkan_handicap_score_x           THEN ''monge_elkan_handicap''          WHEN highest_score_x = monge_elkan_quadratic_score_x          THEN ''monge_elkan_quadratic''          WHEN highest_score_x = monge_elkan_quadratic_handicap_score_x THEN ''monge_elkan_quadratic_handicap''          WHEN highest_score_x = qgram_score_x                          THEN ''qgram''          WHEN highest_score_x = trigram_score_x                        THEN ''trigram''          WHEN highest_score_x = levenshtein_score_x                    THEN ''levenshtein''          WHEN highest_score_x = jaro_score_x                           THEN ''jaro''          WHEN highest_score_x = jaro_winkler_score_x                   THEN ''jaro_winkler''          WHEN highest_score_x = avg_score_x                            THEN ''avg''          WHEN highest_score_x = avg_quadratic_score_x                  THEN ''avg_quadratic''          ELSE ''Undefined''::citext        END AS best_method_x,       avg_score_x,       avg_quadratic_score_x,       lowest_score_x,       equality_check_x,       jaro_score_x,       jaro_winkler_score_x,       levenshtein_score_x,       monge_elkan_score_x,       monge_elkan_quadratic_score_x,       monge_elkan_handicap_score_x,       monge_elkan_quadratic_handicap_score_x,       qgram_score_x,       trigram_score_x  FROM score_stats;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:fuzzy_compare.tests.sql------------------------------------------------------------------------------------- Checks for tools.fuzzy_compare (base_text_in citext, comparison_text_in citext, base_id_in citext, comparison_id_in citext, handicap_factor_in real, monge_elkan_similarity_method_in citext) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'fuzzy_compare (base_text_in citext, comparison_text_in citext, base_id_in citext, comparison_id_in citext, handicap_factor_in real, monge_elkan_similarity_method_in citext)', '()', 'tools.fuzzy_compare base_text_in citext, comparison_text_in citext, base_id_in citext, comparison_id_in citext, handicap_factor_in real, monge_elkan_similarity_method_in citext existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''fuzzy_compare''   and pg_get_function_identity_arguments(oid) = ''base_text_in citext, comparison_text_in citext, base_id_in citext, comparison_id_in citext, handicap_factor_in real, monge_elkan_similarity_method_in citext'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'fuzzy_compare (base_text_in citext, comparison_text_in citext, base_id_in citext, comparison_id_in citext, handicap_factor_in real, monge_elkan_similarity_method_in citext)', '()', 'tools.fuzzy_compare base_text_in citext, comparison_text_in citext, base_id_in citext, comparison_id_in citext, handicap_factor_in real, monge_elkan_similarity_method_in citext definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''fuzzy_compare''   and pg_get_function_identity_arguments(oid) = ''base_text_in citext, comparison_text_in citext, base_id_in citext, comparison_id_in citext, handicap_factor_in real, monge_elkan_similarity_method_in citext'';', 'CREATE OR REPLACE FUNCTION tools.fuzzy_compare(base_text_in citext, comparison_text_in citext, base_id_in citext DEFAULT ''''::citext, comparison_id_in citext DEFAULT ''''::citext, handicap_factor_in real DEFAULT 0.3, monge_elkan_similarity_method_in citext DEFAULT ''jarowinkler''::citext) RETURNS TABLE(base_text citext, comparison_text citext, base_id citext, comparison_id citext, highest_score decimal_score, best_method citext, avg_score decimal_score, avg_quadratic_score decimal_score, lowest_score decimal_score, equality_check integer, jaro_score decimal_score, jaro_winkler_score decimal_score, levenshtein_score decimal_score, monge_elkan_score decimal_score, monge_elkan_quadratic_score decimal_score, monge_elkan_handicap_score decimal_score, monge_elkan_quadratic_handicap_score decimal_score, qgram_score decimal_score, trigram_score decimal_score) LANGUAGE plpgsqlAS $function$DECLARE-------------------------------------------------------------- Setup query template, which you can RAISE NOTICE while .-- developing to see what''s in it.------------------------------------------------------------sql text := ''WITHbasic_scores AS (  SELECT $1                           AS base_text,         $2                           AS comparison_text,         $3                           AS base_id,         $4                           AS comparison_id,         ($1 = $2)::int4              AS equality_check,         monge_elkan($1,$2,$6)        AS monge_elkan_score,         sqrt(monge_elkan($1,$2,$6))  AS monge_elkan_quadratic_score,         jaccard($1,$2)               AS jaccard_coefficient,         jaccard($1,$2) * $5          AS jaccard_handicap,         qgram($1,$2)                 AS qgram_score,         similarity($1,$2)            AS trigram_score,         word_similarity($1,$2)       AS word_score,         lev($1,$2)                   AS levenshtein_score,         jaro($1,$2)                  AS jaro_score,         jarowinkler($1,$2)           AS jaro_winkler_score),---------------------------------------------------------- Pull in the basic scores, and add some handicaps--------------------------------------------------------extended_scores AS (SELECT  base_text,        comparison_text,        base_id,        comparison_id,        equality_check,        jaro_score::decimal_score,        jaro_winkler_score::decimal_score,        levenshtein_score::decimal_score,        monge_elkan_score::decimal_score,        monge_elkan_quadratic_score::decimal_score,        (monge_elkan_score - jaccard_handicap)::decimal_score AS monge_elkan_handicap_score,        (monge_elkan_quadratic_score - jaccard_handicap)::decimal_score AS monge_elkan_quadratic_handicap_score,        jaccard_coefficient,        jaccard_handicap,        qgram_score::decimal_score,        trigram_score::decimal_score  FROM basic_scores),  score_stats AS (  SELECT GREATEST (           equality_check,           jaro_score,           jaro_winkler_score,           levenshtein_score,           monge_elkan_score,           monge_elkan_handicap_score,           monge_elkan_quadratic_score,           monge_elkan_quadratic_handicap_score,           qgram_score,           trigram_score)::decimal_score AS highest_score,-- Leave out equality_check out of LEAST and AVG scores. It''''s either 0 or 1, almost always 0.        LEAST (           jaro_score,           jaro_winkler_score,           levenshtein_score,           monge_elkan_score,           monge_elkan_handicap_score,           monge_elkan_quadratic_score,           monge_elkan_quadratic_handicap_score,           qgram_score,           trigram_score)::decimal_score AS lowest_score,         ((jaro_score +           jaro_winkler_score +           levenshtein_score +           monge_elkan_score +           monge_elkan_handicap_score +           monge_elkan_quadratic_score +           monge_elkan_quadratic_handicap_score +           qgram_score +           trigram_score) / 10)::decimal_score AS avg_score,          sqrt((jaro_score +           jaro_winkler_score +           levenshtein_score +           monge_elkan_score +           monge_elkan_handicap_score +           monge_elkan_quadratic_score +           monge_elkan_quadratic_handicap_score +           qgram_score +           trigram_score ) / 10)::decimal_score AS avg_quadratic_score     FROM extended_scores        )---------------------------------------------------------- Final result: Get everything, along with the top score--------------------------------------------------------SELECT extended_scores.base_text,       extended_scores.comparison_text,       extended_scores.base_id,       extended_scores.comparison_id,       score_stats.highest_score,        -- Ugh. Researching better methods for doing this part...and some of the others...bit too long.        -- In case of a tie, this code picks the first match.       CASE          WHEN score_stats.highest_score = 0 THEN ''''none''''          WHEN score_stats.highest_score = equality_check THEN ''''equality_check''''          WHEN score_stats.highest_score = extended_scores.monge_elkan_score THEN ''''monge_elkan''''          WHEN score_stats.highest_score = extended_scores.monge_elkan_handicap_score THEN ''''monge_elkan_handicap''''          WHEN score_stats.highest_score = extended_scores.monge_elkan_quadratic_score THEN ''''monge_elkan_quadratic''''          WHEN score_stats.highest_score = extended_scores.monge_elkan_quadratic_handicap_score THEN ''''monge_elkan_quadratic_handicap''''          WHEN score_stats.highest_score = extended_scores.qgram_score THEN ''''qgram''''          WHEN score_stats.highest_score = extended_scores.trigram_score THEN ''''trigram''''          WHEN score_stats.highest_score = extended_scores.levenshtein_score THEN ''''levenshtein''''          WHEN score_stats.highest_score = extended_scores.jaro_score THEN ''''jaro''''          WHEN score_stats.highest_score = extended_scores.jaro_winkler_score THEN ''''jaro_winkler''''          WHEN score_stats.highest_score = score_stats.avg_score THEN ''''avg''''          WHEN score_stats.highest_score = score_stats.avg_quadratic_score THEN ''''avg_quadratic''''        ELSE ''''Undefined''''::citext END AS best_method,       score_stats.avg_score,       score_stats.avg_quadratic_score,       score_stats.lowest_score,       extended_scores.equality_check,       extended_scores.jaro_score,       extended_scores.jaro_winkler_score,       extended_scores.levenshtein_score,       extended_scores.monge_elkan_score,       extended_scores.monge_elkan_quadratic_score,       extended_scores.monge_elkan_handicap_score,       extended_scores.monge_elkan_quadratic_handicap_score,       extended_scores.qgram_score,       extended_scores.trigram_score  FROM extended_scores,       score_stats;'';BEGIN-------------------------------------------------------------- Safety checks for parameters stitched into the SQL.------------------------------------------------------------	IF base_text_in = '''' THEN		RAISE EXCEPTION USING			message = ''A base string must be supplied.'',			errcode = ''KC101''; -- Custom code for ''Empty string parameter''.    END IF;    monge_elkan_similarity_method_in  := lower(monge_elkan_similarity_method_in);	IF monge_elkan_similarity_method_in NOT IN (''jaro'',''jarowinkler'',''qgram'') THEN		RAISE EXCEPTION USING			message = ''Invalid distance measure name '''''' || monge_elkan_similarity_method_in || '''''''',			hint = ''Valid methods are jaro, jarowinkler, and qgram'',			errcode = ''KC300''; -- Custom code for ''Bad lookup ID''.    END IF;-------------------------------------------------------------- Range/sanity checks on thresholds------------------------------------------------------------	IF handicap_factor_in < 0 OR handicap_factor_in > 1 THEN		RAISE EXCEPTION USING			message = ''handicap_factor value is out of range.'',			hint = ''Value must be in the range 0-1.'',			errcode = ''KC202''; -- Custom code for ''Numeric parameter value is too low''.    END IF;-------------------------------------------------------------- If you''ve gotten this far, everything looks good. Run it!------------------------------------------------------------    RETURN QUERY EXECUTE sql    USING base_text_in,          comparison_text_in,          base_id_in,          comparison_id_in,          handicap_factor_in,          monge_elkan_similarity_method_in;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:fuzzy_match.tests.sql------------------------------------------------------------------------------------- Checks for tools.fuzzy_match (base_text_in citext, text_collection_id_in uuid, neighbors_to_check_max_in integer, monge_elkan_similarity_method_in citext, neighbor_qgram_threshold_min_in real, result_rows_max_in integer) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'fuzzy_match (base_text_in citext, text_collection_id_in uuid, neighbors_to_check_max_in integer, monge_elkan_similarity_method_in citext, neighbor_qgram_threshold_min_in real, result_rows_max_in integer)', '()', 'tools.fuzzy_match base_text_in citext, text_collection_id_in uuid, neighbors_to_check_max_in integer, monge_elkan_similarity_method_in citext, neighbor_qgram_threshold_min_in real, result_rows_max_in integer existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''fuzzy_match''   and pg_get_function_identity_arguments(oid) = ''base_text_in citext, text_collection_id_in uuid, neighbors_to_check_max_in integer, monge_elkan_similarity_method_in citext, neighbor_qgram_threshold_min_in real, result_rows_max_in integer'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'fuzzy_match (base_text_in citext, text_collection_id_in uuid, neighbors_to_check_max_in integer, monge_elkan_similarity_method_in citext, neighbor_qgram_threshold_min_in real, result_rows_max_in integer)', '()', 'tools.fuzzy_match base_text_in citext, text_collection_id_in uuid, neighbors_to_check_max_in integer, monge_elkan_similarity_method_in citext, neighbor_qgram_threshold_min_in real, result_rows_max_in integer definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''fuzzy_match''   and pg_get_function_identity_arguments(oid) = ''base_text_in citext, text_collection_id_in uuid, neighbors_to_check_max_in integer, monge_elkan_similarity_method_in citext, neighbor_qgram_threshold_min_in real, result_rows_max_in integer'';', 'CREATE OR REPLACE FUNCTION tools.fuzzy_match(base_text_in citext, text_collection_id_in uuid, neighbors_to_check_max_in integer DEFAULT 25, monge_elkan_similarity_method_in citext DEFAULT ''jarowinkler''::citext, neighbor_qgram_threshold_min_in real DEFAULT 0.2, result_rows_max_in integer DEFAULT 25) RETURNS TABLE(base_text citext, neighbor_text citext, neighbor_id citext, neighbor_rank integer, neighbors_count integer, highest_score decimal_score, best_method citext, avg_score decimal_score, avg_quadratic_score decimal_score, equality_check integer, jaro_score decimal_score, jaro_winkler_score decimal_score, monge_elkan_score decimal_score, monge_elkan_quadratic_score decimal_score, qgram_score decimal_score, trigram_score decimal_score) LANGUAGE plpgsql STABLEAS $function$DECLARE-------------------------------------------------------------- Setup query template, which you can RAISE NOTICE while .-- developing to see what''s in it.------------------------------------------------------------sql text := ''WITHnear_neighbors AS (  select distinct on (text <-> $1) text AS neighbor_text,         $1                             AS base_text,         source_id                      AS neighbor_id    from text_collection_item   where collection_id = $2  limit $3),measures AS (  select *,         DENSE_RANK() OVER(ORDER BY qgram(base_text, neighbor_text) DESC) AS neighbor_rank,         (base_text = neighbor_text)::int4                                AS equality_check,         monge_elkan(base_text, neighbor_text, $4)                        AS monge_elkan_score,         sqrt(monge_elkan(base_text, neighbor_text, $4))                  AS monge_elkan_quadratic_score,         jaro (base_text, neighbor_text)                                  AS jaro_score,         jarowinkler (base_text, neighbor_text)                           AS jaro_winkler_score,         qgram(base_text, neighbor_text)                                  AS qgram_score,         similarity(base_text, neighbor_text)                             AS trigram_score  from near_neighbors), handicap AS (    select base_text,           neighbor_text,           neighbor_id,           neighbor_rank::int4,           count(*) OVER() AS neighbors_count, -- Weird-looking way to get a count out of near_neighbors.           equality_check,           CASE             WHEN monge_elkan_score = 1 AND equality_check = 0 THEN 0.95             ELSE monge_elkan_score           END AS monge_elkan_score,           CASE             WHEN monge_elkan_quadratic_score = 1 AND equality_check = 0 THEN 0.95             ELSE monge_elkan_quadratic_score           END AS monge_elkan_quadratic_score,           jaro_score,           jaro_winkler_score,           qgram_score,           trigram_score      from measures     where qgram_score >= $5 ),stats AS (  select *,        (handicap.monge_elkan_score +         handicap.monge_elkan_quadratic_score +         jaro_score +         jaro_winkler_score +         qgram_score +         trigram_score) / 6 AS avg_score    from handicap), calculations AS (  select *,         sqrt(avg_score) AS avg_quadratic_score,         greatest (           monge_elkan_score,           monge_elkan_quadratic_score,           avg_score,           sqrt(avg_score),           jaro_score,           jaro_winkler_score,           qgram_score,           trigram_score) AS highest_score from stats)-- Final query, pull it all together and selsort  select base_text,         neighbor_text,         neighbor_id,         neighbor_rank::int4,         neighbors_count::int4,         highest_score::decimal_score,         (CASE highest_score            WHEN equality_check              THEN ''''equality''''            WHEN monge_elkan_quadratic_score THEN ''''monge_elkan_quadratic''''            WHEN monge_elkan_score           THEN ''''monge_elkan''''            WHEN jaro_score                  THEN ''''jaro''''            WHEN jaro_winkler_score          THEN ''''jaro_winkler''''            WHEN qgram_score                 THEN ''''qgram''''            WHEN trigram_score               THEN ''''trigram''''            WHEN avg_score                   THEN ''''avg''''            WHEN avg_quadratic_score         THEN ''''avg_quadratic''''            ELSE ''''Undefined''''         END)::citext AS best_method,         avg_score::decimal_score,         avg_quadratic_score::decimal_score,         equality_check::int4,         jaro_score::decimal_score,         jaro_winkler_score::decimal_score,         monge_elkan_score::decimal_score,         monge_elkan_quadratic_score::decimal_score,         qgram_score::decimal_score,         trigram_score::decimal_score    from calculationsorder by highest_score               DESC,         equality_check              DESC,         monge_elkan_quadratic_score DESC,         monge_elkan_score           DESC,         jaro_score                  DESC,         jaro_winkler_score          DESC,         qgram_score                 DESC,         trigram_score               DESC  limit $6'';BEGIN-------------------------------------------------------------- Existence check for the text_collection------------------------------------------------------------	IF NOT EXISTS (select 1 from text_collection where id = text_collection_id_in) THEN		RAISE EXCEPTION USING			message = ''text_collection not found with id = '''''' || text_collection_id_in || '''''''',			errcode = ''KC100''; -- Custom code for ''Bad string selector parameter value''.    END IF;-------------------------------------------------------------- Safety checks for parameters stitched into the SQL.------------------------------------------------------------	IF base_text_in = '''' THEN		RAISE EXCEPTION USING			message = ''A base string must be supplied.'',			errcode = ''KC101''; -- Custom code for ''Empty string parameter''.    END IF;    monge_elkan_similarity_method_in  := lower(monge_elkan_similarity_method_in);	IF monge_elkan_similarity_method_in NOT IN (''jaro'',''jarowinkler'',''qgram'') THEN		RAISE EXCEPTION USING			message = ''Invalid distance measure name '''''' || monge_elkan_similarity_method_in || '''''''',			hint = ''Valid methods are jaro, jarowinkler, and qgram'',			errcode = ''KC300''; -- Custom code for ''Bad lookup ID''.    END IF;-------------------------------------------------------------- Range/sanity checks on thresholds------------------------------------------------------------	IF neighbors_to_check_max_in < 1 THEN		RAISE EXCEPTION USING			message = ''neighbors_to_check_max value is too low.'',			hint = ''Value must be 1 or higher.'',			errcode = ''KC200''; -- Custom code for ''Numeric parameter value is too low''.    END IF;	IF result_rows_max_in < 1 THEN		RAISE EXCEPTION USING			message = ''result_rows_max value is too low.'',			hint = ''Value must be 1 or higher.'',			errcode = ''KC200''; -- Custom code for ''Numeric parameter value is too low''.    END IF;	IF neighbor_qgram_threshold_min_in < 0 OR neighbor_qgram_threshold_min_in > 1 THEN		RAISE EXCEPTION USING			message = ''neighbor_qgram_threshold_min value is out of range.'',			hint = ''Value must be in the range 0-1.'',			errcode = ''KC202''; -- Custom code for ''Numeric parameter value is too low''.    END IF;-------------------------------------------------------------- If you''ve gotten this far, everything looks good. Run it!------------------------------------------------------------    RETURN QUERY EXECUTE sql    USING base_text_in,          text_collection_id_in,          neighbors_to_check_max_in,          monge_elkan_similarity_method_in,          neighbor_qgram_threshold_min_in,          result_rows_max_in;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:get_current_user.tests.sql------------------------------------------------------------------------------------- Checks for tools.get_current_user () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'get_current_user ()', '()', 'tools.get_current_user  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''get_current_user''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'get_current_user ()', '()', 'tools.get_current_user  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''get_current_user''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION tools.get_current_user() RETURNS text LANGUAGE sqlAS $function$SELECT current_user::text; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:get_function_owner_name.tests.sql------------------------------------------------------------------------------------- Checks for tools.get_function_owner_name (function_oid oid) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'get_function_owner_name (function_oid oid)', '()', 'tools.get_function_owner_name function_oid oid existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''get_function_owner_name''   and pg_get_function_identity_arguments(oid) = ''function_oid oid'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'get_function_owner_name (function_oid oid)', '()', 'tools.get_function_owner_name function_oid oid definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''get_function_owner_name''   and pg_get_function_identity_arguments(oid) = ''function_oid oid'';', 'CREATE OR REPLACE FUNCTION tools.get_function_owner_name(function_oid oid) RETURNS text LANGUAGE sqlAS $function$SELECT rolname::text   FROM pg_authid WHERE oid = (	 	SELECT pg_proc.proowner	 	  FROM pg_proc	 	 WHERE oid = function_oid	 	 )$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:get_session_timezone.tests.sql------------------------------------------------------------------------------------- Checks for tools.get_session_timezone () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'get_session_timezone ()', '()', 'tools.get_session_timezone  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''get_session_timezone''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'get_session_timezone ()', '()', 'tools.get_session_timezone  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''get_session_timezone''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION tools.get_session_timezone() RETURNS text LANGUAGE sqlAS $function$	SELECT current_setting(''TIMEZONE''); $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:hour_bin_get_bin_label.tests.sql------------------------------------------------------------------------------------- Checks for api.hour_bin_get_bin_label (hour_number integer, bin_group citext) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'api', 'hour_bin_get_bin_label (hour_number integer, bin_group citext)', '()', 'api.hour_bin_get_bin_label hour_number integer, bin_group citext existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''hour_bin_get_bin_label''   and pg_get_function_identity_arguments(oid) = ''hour_number integer, bin_group citext'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'api', 'hour_bin_get_bin_label (hour_number integer, bin_group citext)', '()', 'api.hour_bin_get_bin_label hour_number integer, bin_group citext definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''hour_bin_get_bin_label''   and pg_get_function_identity_arguments(oid) = ''hour_number integer, bin_group citext'';', 'CREATE OR REPLACE FUNCTION api.hour_bin_get_bin_label(hour_number integer, bin_group citext DEFAULT ''Four hour blocks''::citext) RETURNS citext LANGUAGE sql STABLEAS $function$SELECT bin_labelFROM hour_binWHERE bin_hour = $1 AND bin_group = $2$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:hour_bin_get_bin.tests.sql------------------------------------------------------------------------------------- Checks for api.hour_bin_get_bin (hour_number integer, bin_group citext) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'api', 'hour_bin_get_bin (hour_number integer, bin_group citext)', '()', 'api.hour_bin_get_bin hour_number integer, bin_group citext existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''hour_bin_get_bin''   and pg_get_function_identity_arguments(oid) = ''hour_number integer, bin_group citext'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'api', 'hour_bin_get_bin (hour_number integer, bin_group citext)', '()', 'api.hour_bin_get_bin hour_number integer, bin_group citext definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''hour_bin_get_bin''   and pg_get_function_identity_arguments(oid) = ''hour_number integer, bin_group citext'';', 'CREATE OR REPLACE FUNCTION api.hour_bin_get_bin(hour_number integer, bin_group citext DEFAULT ''Four hour blocks''::citext) RETURNS smallint LANGUAGE sql STABLEAS $function$SELECT bin_numberFROM hour_binWHERE bin_hour = $1 AND bin_group = $2$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:hour_number.tests.sql------------------------------------------------------------------------------------- Checks for api.hour_number (dts timestamp with time zone) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'api', 'hour_number (dts timestamp with time zone)', '()', 'api.hour_number dts timestamp with time zone existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''hour_number''   and pg_get_function_identity_arguments(oid) = ''dts timestamp with time zone'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'api', 'hour_number (dts timestamp with time zone)', '()', 'api.hour_number dts timestamp with time zone definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''hour_number''   and pg_get_function_identity_arguments(oid) = ''dts timestamp with time zone'';', 'CREATE OR REPLACE FUNCTION api.hour_number(dts timestamp with time zone) RETURNS smallint LANGUAGE sql STABLEAS $function$/* day numbers are 0-6 and hours are 0-23 in postgres. this function shifts those to 1-7 and 1-24,   and gives you the hour-in-the-week result. so 12:30 am sunday night is 1, 1:00 sunday night is 2	 1:00 monday night is 25, and so on. */select ((extract(dow from dts) + 1) * 24 +	   (extract (hour from dts) + 1)) ::int2$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:hsys_get_facility_ids.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.hsys_get_facility_ids (hsys_id_in uuid) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'hsys_get_facility_ids (hsys_id_in uuid)', '()', 'ascendco.hsys_get_facility_ids hsys_id_in uuid existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''hsys_get_facility_ids''   and pg_get_function_identity_arguments(oid) = ''hsys_id_in uuid'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'hsys_get_facility_ids (hsys_id_in uuid)', '()', 'ascendco.hsys_get_facility_ids hsys_id_in uuid definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''hsys_get_facility_ids''   and pg_get_function_identity_arguments(oid) = ''hsys_id_in uuid'';', 'CREATE OR REPLACE FUNCTION ascendco.hsys_get_facility_ids(hsys_id_in uuid) RETURNS TABLE(facility_id uuid) LANGUAGE sql STABLEAS $function$select id from facility where hsys_id = hsys_id_in;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:hsys_get_id_by_facility_id.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.hsys_get_id_by_facility_id (facility_id_in uuid) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'hsys_get_id_by_facility_id (facility_id_in uuid)', '()', 'ascendco.hsys_get_id_by_facility_id facility_id_in uuid existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''hsys_get_id_by_facility_id''   and pg_get_function_identity_arguments(oid) = ''facility_id_in uuid'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'hsys_get_id_by_facility_id (facility_id_in uuid)', '()', 'ascendco.hsys_get_id_by_facility_id facility_id_in uuid definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''hsys_get_id_by_facility_id''   and pg_get_function_identity_arguments(oid) = ''facility_id_in uuid'';', 'CREATE OR REPLACE FUNCTION ascendco.hsys_get_id_by_facility_id(facility_id_in uuid) RETURNS uuid LANGUAGE sql STABLEAS $function$SELECT coalesce(    (SELECT hsys_id FROM ascendco.facility WHERE id = facility_id_in),    ''00000000-0000-0000-0000-000000000000''::uuid);$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:hsys_get_id.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.hsys_get_id (hsys_name_in citext) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'hsys_get_id (hsys_name_in citext)', '()', 'ascendco.hsys_get_id hsys_name_in citext existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''hsys_get_id''   and pg_get_function_identity_arguments(oid) = ''hsys_name_in citext'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'hsys_get_id (hsys_name_in citext)', '()', 'ascendco.hsys_get_id hsys_name_in citext definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''hsys_get_id''   and pg_get_function_identity_arguments(oid) = ''hsys_name_in citext'';', 'CREATE OR REPLACE FUNCTION ascendco.hsys_get_id(hsys_name_in citext) RETURNS uuid LANGUAGE sql STABLEAS $function$SELECT coalesce(    (SELECT id FROM ascendco.hsys WHERE name_ = hsys_name_in),    ''00000000-0000-0000-0000-000000000000''::uuid);$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:hsys_get_name_by_facility_id.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.hsys_get_name_by_facility_id (facility_id_in uuid) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'hsys_get_name_by_facility_id (facility_id_in uuid)', '()', 'ascendco.hsys_get_name_by_facility_id facility_id_in uuid existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''hsys_get_name_by_facility_id''   and pg_get_function_identity_arguments(oid) = ''facility_id_in uuid'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'hsys_get_name_by_facility_id (facility_id_in uuid)', '()', 'ascendco.hsys_get_name_by_facility_id facility_id_in uuid definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''hsys_get_name_by_facility_id''   and pg_get_function_identity_arguments(oid) = ''facility_id_in uuid'';', 'CREATE OR REPLACE FUNCTION ascendco.hsys_get_name_by_facility_id(facility_id_in uuid) RETURNS citext LANGUAGE sql STABLEAS $function$SELECT coalesce(	(SELECT name_ FROM ascendco.hsys WHERE id = (select hsys_id  from facility where id = facility_id_in)),	'''');$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:hsys_get_name.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.hsys_get_name (hsys_id_in uuid) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'hsys_get_name (hsys_id_in uuid)', '()', 'ascendco.hsys_get_name hsys_id_in uuid existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''hsys_get_name''   and pg_get_function_identity_arguments(oid) = ''hsys_id_in uuid'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'hsys_get_name (hsys_id_in uuid)', '()', 'ascendco.hsys_get_name hsys_id_in uuid definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''hsys_get_name''   and pg_get_function_identity_arguments(oid) = ''hsys_id_in uuid'';', 'CREATE OR REPLACE FUNCTION ascendco.hsys_get_name(hsys_id_in uuid) RETURNS citext LANGUAGE sql STABLEAS $function$-- Need to put the select as an expression *inside* the COALESCE, or else it never fires on NULL. D''oh!-- Not the same in a straight select for Reasons That I Do Not Undestand.-- https://stackoverflow.com/questions/65973653/SELECT coalesce((SELECT name_ FROM ascendco.hsys WHERE id = hsys_id_in),'''');$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:hsys_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.hsys_to_v1 (hsys_in hsys) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'hsys_to_v1 (hsys_in hsys)', '()', 'types_plus.hsys_to_v1 hsys_in hsys existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''hsys_to_v1''   and pg_get_function_identity_arguments(oid) = ''hsys_in hsys'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'hsys_to_v1 (hsys_in hsys)', '()', 'types_plus.hsys_to_v1 hsys_in hsys definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''hsys_to_v1''   and pg_get_function_identity_arguments(oid) = ''hsys_in hsys'';', 'CREATE OR REPLACE FUNCTION types_plus.hsys_to_v1(hsys_in hsys) RETURNS hsys_v1 LANGUAGE sqlAS $function$        SELECT			hsys_in.id,			hsys_in.marked_for_deletion,			hsys_in.name_$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:hsys_to_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.hsys_to_v2 (hsys_in hsys) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'hsys_to_v2 (hsys_in hsys)', '()', 'types_plus.hsys_to_v2 hsys_in hsys existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''hsys_to_v2''   and pg_get_function_identity_arguments(oid) = ''hsys_in hsys'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'hsys_to_v2 (hsys_in hsys)', '()', 'types_plus.hsys_to_v2 hsys_in hsys definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''hsys_to_v2''   and pg_get_function_identity_arguments(oid) = ''hsys_in hsys'';', 'CREATE OR REPLACE FUNCTION types_plus.hsys_to_v2(hsys_in hsys) RETURNS hsys_v2 LANGUAGE sqlAS $function$        SELECT			hsys_in.id,			hsys_in.marked_for_deletion,			hsys_in.name_,			hsys_in.sonar_client_version,			hsys_in.sonar_server_version,			hsys_in.sonar_browser_version$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_activity_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_activity_v1 (data_in activity_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_activity_v1 (data_in activity_v1[])', '()', 'types_plus.insert_activity_v1 data_in activity_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_activity_v1''   and pg_get_function_identity_arguments(oid) = ''data_in activity_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_activity_v1 (data_in activity_v1[])', '()', 'types_plus.insert_activity_v1 data_in activity_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_activity_v1''   and pg_get_function_identity_arguments(oid) = ''data_in activity_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_activity_v1(data_in activity_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO activity (			id,			facility_id,			facility_activities_id,			web_user_id,			other_desc,			start_dts,			done_dts,			last_updated_by_data_file_id,			created_by,			created_dts,			updated_by,			updated_dts,			duration_seconds)                  SELECT			rows_in.id,			rows_in.facility_id,			rows_in.facility_activities_id,			rows_in.web_user_id,			rows_in.other_desc,			rows_in.start_dts,			rows_in.done_dts,			rows_in.last_updated_by_data_file_id,			rows_in.created_by,			rows_in.created_dts,			rows_in.updated_by,			rows_in.updated_dts,			rows_in.duration_seconds                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			facility_id = EXCLUDED.facility_id,			facility_activities_id = EXCLUDED.facility_activities_id,			web_user_id = EXCLUDED.web_user_id,			other_desc = EXCLUDED.other_desc,			start_dts = EXCLUDED.start_dts,			done_dts = EXCLUDED.done_dts,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			created_by = EXCLUDED.created_by,			created_dts = EXCLUDED.created_dts,			updated_by = EXCLUDED.updated_by,			updated_dts = EXCLUDED.updated_dts,			duration_seconds = EXCLUDED.duration_seconds          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_activity_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_activity_v2 (data_in activity_v2[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_activity_v2 (data_in activity_v2[])', '()', 'types_plus.insert_activity_v2 data_in activity_v2[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_activity_v2''   and pg_get_function_identity_arguments(oid) = ''data_in activity_v2[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_activity_v2 (data_in activity_v2[])', '()', 'types_plus.insert_activity_v2 data_in activity_v2[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_activity_v2''   and pg_get_function_identity_arguments(oid) = ''data_in activity_v2[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_activity_v2(data_in activity_v2[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO activity (			id,			facility_id,			facility_activities_id,			web_user_id,			last_updated_by_data_file_id,			updated_dts,			created_dts,			done_dts,			start_dts,			duration_seconds,			marked_for_deletion,			other_desc,			created_by,			updated_by)                  SELECT			rows_in.id,			rows_in.facility_id,			rows_in.facility_activities_id,			rows_in.web_user_id,			rows_in.last_updated_by_data_file_id,			rows_in.updated_dts,			rows_in.created_dts,			rows_in.done_dts,			rows_in.start_dts,			rows_in.duration_seconds,			rows_in.marked_for_deletion,			rows_in.other_desc,			rows_in.created_by,			rows_in.updated_by                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			facility_id = EXCLUDED.facility_id,			facility_activities_id = EXCLUDED.facility_activities_id,			web_user_id = EXCLUDED.web_user_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			updated_dts = EXCLUDED.updated_dts,			created_dts = EXCLUDED.created_dts,			done_dts = EXCLUDED.done_dts,			start_dts = EXCLUDED.start_dts,			duration_seconds = EXCLUDED.duration_seconds,			marked_for_deletion = EXCLUDED.marked_for_deletion,			other_desc = EXCLUDED.other_desc,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_analytic_productivity_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_analytic_productivity_v1 (data_in analytic_productivity_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_analytic_productivity_v1 (data_in analytic_productivity_v1[])', '()', 'types_plus.insert_analytic_productivity_v1 data_in analytic_productivity_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_analytic_productivity_v1''   and pg_get_function_identity_arguments(oid) = ''data_in analytic_productivity_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_analytic_productivity_v1 (data_in analytic_productivity_v1[])', '()', 'types_plus.insert_analytic_productivity_v1 data_in analytic_productivity_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_analytic_productivity_v1''   and pg_get_function_identity_arguments(oid) = ''data_in analytic_productivity_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_analytic_productivity_v1(data_in analytic_productivity_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO analytic_productivity (			id,			data_file_id,			marked_for_deletion,			hsys_id,			facility_id,			facility_location_id,			specialty_id,			item_type_id,			user_name,			inv_name,			item_name,			tray_or_pack,			num_inst,			assembly_minutes,			pause_minutes,			points,			points_per_hour,			assembly_hour,			pause_hour,			start_utc,			start_local,			end_utc,			end_local)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.hsys_id,			rows_in.facility_id,			rows_in.facility_location_id,			rows_in.specialty_id,			rows_in.item_type_id,			rows_in.user_name,			rows_in.inv_name,			rows_in.item_name,			rows_in.tray_or_pack,			rows_in.num_inst,			rows_in.assembly_minutes,			rows_in.pause_minutes,			rows_in.points,			rows_in.points_per_hour,			rows_in.assembly_hour,			rows_in.pause_hour,			rows_in.start_utc,			rows_in.start_local,			rows_in.end_utc,			rows_in.end_local        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			hsys_id = EXCLUDED.hsys_id,			facility_id = EXCLUDED.facility_id,			facility_location_id = EXCLUDED.facility_location_id,			specialty_id = EXCLUDED.specialty_id,			item_type_id = EXCLUDED.item_type_id,			user_name = EXCLUDED.user_name,			inv_name = EXCLUDED.inv_name,			item_name = EXCLUDED.item_name,			tray_or_pack = EXCLUDED.tray_or_pack,			num_inst = EXCLUDED.num_inst,			assembly_minutes = EXCLUDED.assembly_minutes,			pause_minutes = EXCLUDED.pause_minutes,			points = EXCLUDED.points,			points_per_hour = EXCLUDED.points_per_hour,			assembly_hour = EXCLUDED.assembly_hour,			pause_hour = EXCLUDED.pause_hour,			start_utc = EXCLUDED.start_utc,			start_local = EXCLUDED.start_local,			end_utc = EXCLUDED.end_utc,			end_local = EXCLUDED.end_local        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_analytic_scan_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_analytic_scan_v1 (data_in analytic_scan_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_analytic_scan_v1 (data_in analytic_scan_v1[])', '()', 'types_plus.insert_analytic_scan_v1 data_in analytic_scan_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_analytic_scan_v1''   and pg_get_function_identity_arguments(oid) = ''data_in analytic_scan_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_analytic_scan_v1 (data_in analytic_scan_v1[])', '()', 'types_plus.insert_analytic_scan_v1 data_in analytic_scan_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_analytic_scan_v1''   and pg_get_function_identity_arguments(oid) = ''data_in analytic_scan_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_analytic_scan_v1(data_in analytic_scan_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO analytic_scan (			id,			data_file_id,			marked_for_deletion,			hsys_id,			facility_id,			facility_location_id,			specialty_id,			scanned_type,			associated_to,			user_name,			inv_name,			num_inst,			tray_or_pack,			item_name,			scan_time_utc_dts,			scan_time_local_dts,			location_description)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.hsys_id,			rows_in.facility_id,			rows_in.facility_location_id,			rows_in.specialty_id,			rows_in.scanned_type,			rows_in.associated_to,			rows_in.user_name,			rows_in.inv_name,			rows_in.num_inst,			rows_in.tray_or_pack,			rows_in.item_name,			rows_in.scan_time_utc_dts,			rows_in.scan_time_local_dts,			rows_in.location_description        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			hsys_id = EXCLUDED.hsys_id,			facility_id = EXCLUDED.facility_id,			facility_location_id = EXCLUDED.facility_location_id,			specialty_id = EXCLUDED.specialty_id,			scanned_type = EXCLUDED.scanned_type,			associated_to = EXCLUDED.associated_to,			user_name = EXCLUDED.user_name,			inv_name = EXCLUDED.inv_name,			num_inst = EXCLUDED.num_inst,			tray_or_pack = EXCLUDED.tray_or_pack,			item_name = EXCLUDED.item_name,			scan_time_utc_dts = EXCLUDED.scan_time_utc_dts,			scan_time_local_dts = EXCLUDED.scan_time_local_dts,			location_description = EXCLUDED.location_description        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_analytic_sterilizer_load_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_analytic_sterilizer_load_v1 (data_in analytic_sterilizer_load_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_analytic_sterilizer_load_v1 (data_in analytic_sterilizer_load_v1[])', '()', 'types_plus.insert_analytic_sterilizer_load_v1 data_in analytic_sterilizer_load_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_analytic_sterilizer_load_v1''   and pg_get_function_identity_arguments(oid) = ''data_in analytic_sterilizer_load_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_analytic_sterilizer_load_v1 (data_in analytic_sterilizer_load_v1[])', '()', 'types_plus.insert_analytic_sterilizer_load_v1 data_in analytic_sterilizer_load_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_analytic_sterilizer_load_v1''   and pg_get_function_identity_arguments(oid) = ''data_in analytic_sterilizer_load_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_analytic_sterilizer_load_v1(data_in analytic_sterilizer_load_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO analytic_sterilizer_load (			id,			marked_for_deletion,			data_file_id,			sterilize_method_id,			sterilize_params_id,			sterilizer_id,			facility_id,			web_user_id,			status_building_dts,			status_building_local_dts,			status_done_dts,			status_done_local_dts,			status,			is_iuss,			instruments_count,			packs_count,			trays_count)        SELECT			rows_in.id,			rows_in.marked_for_deletion,			rows_in.data_file_id,			rows_in.sterilize_method_id,			rows_in.sterilize_params_id,			rows_in.sterilizer_id,			rows_in.facility_id,			rows_in.web_user_id,			rows_in.status_building_dts,			rows_in.status_building_local_dts,			rows_in.status_done_dts,			rows_in.status_done_local_dts,			rows_in.status,			rows_in.is_iuss,			rows_in.instruments_count,			rows_in.packs_count,			rows_in.trays_count        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			marked_for_deletion = EXCLUDED.marked_for_deletion,			data_file_id = EXCLUDED.data_file_id,			sterilize_method_id = EXCLUDED.sterilize_method_id,			sterilize_params_id = EXCLUDED.sterilize_params_id,			sterilizer_id = EXCLUDED.sterilizer_id,			facility_id = EXCLUDED.facility_id,			web_user_id = EXCLUDED.web_user_id,			status_building_dts = EXCLUDED.status_building_dts,			status_building_local_dts = EXCLUDED.status_building_local_dts,			status_done_dts = EXCLUDED.status_done_dts,			status_done_local_dts = EXCLUDED.status_done_local_dts,			status = EXCLUDED.status,			is_iuss = EXCLUDED.is_iuss,			instruments_count = EXCLUDED.instruments_count,			packs_count = EXCLUDED.packs_count,			trays_count = EXCLUDED.trays_count        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_analytic_sterilizer_loadinv_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_analytic_sterilizer_loadinv_v1 (data_in analytic_sterilizer_loadinv_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_analytic_sterilizer_loadinv_v1 (data_in analytic_sterilizer_loadinv_v1[])', '()', 'types_plus.insert_analytic_sterilizer_loadinv_v1 data_in analytic_sterilizer_loadinv_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_analytic_sterilizer_loadinv_v1''   and pg_get_function_identity_arguments(oid) = ''data_in analytic_sterilizer_loadinv_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_analytic_sterilizer_loadinv_v1 (data_in analytic_sterilizer_loadinv_v1[])', '()', 'types_plus.insert_analytic_sterilizer_loadinv_v1 data_in analytic_sterilizer_loadinv_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_analytic_sterilizer_loadinv_v1''   and pg_get_function_identity_arguments(oid) = ''data_in analytic_sterilizer_loadinv_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_analytic_sterilizer_loadinv_v1(data_in analytic_sterilizer_loadinv_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO analytic_sterilizer_loadinv (			id,			data_file_id,			marked_for_deletion,			facility_id,			hsys_id,			inv_id,			item_id,			item_type_id,			speciality_id,			sterilize_method_id,			sterilize_params_id,			sterilizer_id,			sterilizerload_id,			web_user_id,			inv_name_provided,			is_iuss,			num_inst,			qty,			category,			clinic_dept_name,			processing_seconds,			done_dts,			done_local_dts)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.facility_id,			rows_in.hsys_id,			rows_in.inv_id,			rows_in.item_id,			rows_in.item_type_id,			rows_in.speciality_id,			rows_in.sterilize_method_id,			rows_in.sterilize_params_id,			rows_in.sterilizer_id,			rows_in.sterilizerload_id,			rows_in.web_user_id,			rows_in.inv_name_provided,			rows_in.is_iuss,			rows_in.num_inst,			rows_in.qty,			rows_in.category,			rows_in.clinic_dept_name,			rows_in.processing_seconds,			rows_in.done_dts,			rows_in.done_local_dts        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			facility_id = EXCLUDED.facility_id,			hsys_id = EXCLUDED.hsys_id,			inv_id = EXCLUDED.inv_id,			item_id = EXCLUDED.item_id,			item_type_id = EXCLUDED.item_type_id,			speciality_id = EXCLUDED.speciality_id,			sterilize_method_id = EXCLUDED.sterilize_method_id,			sterilize_params_id = EXCLUDED.sterilize_params_id,			sterilizer_id = EXCLUDED.sterilizer_id,			sterilizerload_id = EXCLUDED.sterilizerload_id,			web_user_id = EXCLUDED.web_user_id,			inv_name_provided = EXCLUDED.inv_name_provided,			is_iuss = EXCLUDED.is_iuss,			num_inst = EXCLUDED.num_inst,			qty = EXCLUDED.qty,			category = EXCLUDED.category,			clinic_dept_name = EXCLUDED.clinic_dept_name,			processing_seconds = EXCLUDED.processing_seconds,			done_dts = EXCLUDED.done_dts,			done_local_dts = EXCLUDED.done_local_dts        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_analytic_sterilizer_loadinv_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_analytic_sterilizer_loadinv_v2 (data_in analytic_sterilizer_loadinv_v2[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_analytic_sterilizer_loadinv_v2 (data_in analytic_sterilizer_loadinv_v2[])', '()', 'types_plus.insert_analytic_sterilizer_loadinv_v2 data_in analytic_sterilizer_loadinv_v2[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_analytic_sterilizer_loadinv_v2''   and pg_get_function_identity_arguments(oid) = ''data_in analytic_sterilizer_loadinv_v2[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_analytic_sterilizer_loadinv_v2 (data_in analytic_sterilizer_loadinv_v2[])', '()', 'types_plus.insert_analytic_sterilizer_loadinv_v2 data_in analytic_sterilizer_loadinv_v2[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_analytic_sterilizer_loadinv_v2''   and pg_get_function_identity_arguments(oid) = ''data_in analytic_sterilizer_loadinv_v2[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_analytic_sterilizer_loadinv_v2(data_in analytic_sterilizer_loadinv_v2[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO analytic_sterilizer_loadinv (			id,			data_file_id,			marked_for_deletion,			facility_id,			hsys_id,			inv_id,			item_id,			item_type_id,			speciality_id,			sterilize_method_id,			sterilize_params_id,			sterilizer_id,			sterilizerload_id,			web_user_id,			inv_name_provided,			is_iuss,			num_inst,			qty,			category,			clinic_dept_name,			processing_seconds,			done_dts,			done_local_dts,			status)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.facility_id,			rows_in.hsys_id,			rows_in.inv_id,			rows_in.item_id,			rows_in.item_type_id,			rows_in.speciality_id,			rows_in.sterilize_method_id,			rows_in.sterilize_params_id,			rows_in.sterilizer_id,			rows_in.sterilizerload_id,			rows_in.web_user_id,			rows_in.inv_name_provided,			rows_in.is_iuss,			rows_in.num_inst,			rows_in.qty,			rows_in.category,			rows_in.clinic_dept_name,			rows_in.processing_seconds,			rows_in.done_dts,			rows_in.done_local_dts,			rows_in.status        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			facility_id = EXCLUDED.facility_id,			hsys_id = EXCLUDED.hsys_id,			inv_id = EXCLUDED.inv_id,			item_id = EXCLUDED.item_id,			item_type_id = EXCLUDED.item_type_id,			speciality_id = EXCLUDED.speciality_id,			sterilize_method_id = EXCLUDED.sterilize_method_id,			sterilize_params_id = EXCLUDED.sterilize_params_id,			sterilizer_id = EXCLUDED.sterilizer_id,			sterilizerload_id = EXCLUDED.sterilizerload_id,			web_user_id = EXCLUDED.web_user_id,			inv_name_provided = EXCLUDED.inv_name_provided,			is_iuss = EXCLUDED.is_iuss,			num_inst = EXCLUDED.num_inst,			qty = EXCLUDED.qty,			category = EXCLUDED.category,			clinic_dept_name = EXCLUDED.clinic_dept_name,			processing_seconds = EXCLUDED.processing_seconds,			done_dts = EXCLUDED.done_dts,			done_local_dts = EXCLUDED.done_local_dts,			status = EXCLUDED.status        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_analytic_work_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_analytic_work_v2 (data_in analytic_work_v2[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_analytic_work_v2 (data_in analytic_work_v2[])', '()', 'types_plus.insert_analytic_work_v2 data_in analytic_work_v2[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_analytic_work_v2''   and pg_get_function_identity_arguments(oid) = ''data_in analytic_work_v2[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_analytic_work_v2 (data_in analytic_work_v2[])', '()', 'types_plus.insert_analytic_work_v2 data_in analytic_work_v2[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_analytic_work_v2''   and pg_get_function_identity_arguments(oid) = ''data_in analytic_work_v2[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_analytic_work_v2(data_in analytic_work_v2[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO analytic_work (			id,			key_supplement,			hsys_id,			facility_id,			inv_id,			user_id,			activity_id,			assembly_id,			q_event_id,			scan_id,			scase_id,			scase_inv_id,			sterilizer_load_id,			sterilizer_loadinv_id,			start_dts,			end_dts,			start_local_dts,			end_local_dts,			date_time,			duration,			missing_inst,			num_inst,			num_items,			points,			num_packs,			num_trays,			activity,			description,			marked_for_deletion)        SELECT			rows_in.id,			rows_in.key_supplement,			rows_in.hsys_id,			rows_in.facility_id,			rows_in.inv_id,			rows_in.user_id,			rows_in.activity_id,			rows_in.assembly_id,			rows_in.q_event_id,			rows_in.scan_id,			rows_in.scase_id,			rows_in.scase_inv_id,			rows_in.sterilizer_load_id,			rows_in.sterilizer_loadinv_id,			rows_in.start_dts,			rows_in.end_dts,			rows_in.start_local_dts,			rows_in.end_local_dts,			rows_in.date_time,			rows_in.duration,			rows_in.missing_inst,			rows_in.num_inst,			rows_in.num_items,			rows_in.points,			rows_in.num_packs,			rows_in.num_trays,			rows_in.activity,			rows_in.description,			rows_in.marked_for_deletion        FROM unnest(data_in) as rows_in        ON CONFLICT(id, key_supplement) DO UPDATE SET			key_supplement = EXCLUDED.key_supplement,			hsys_id = EXCLUDED.hsys_id,			facility_id = EXCLUDED.facility_id,			inv_id = EXCLUDED.inv_id,			user_id = EXCLUDED.user_id,			activity_id = EXCLUDED.activity_id,			assembly_id = EXCLUDED.assembly_id,			q_event_id = EXCLUDED.q_event_id,			scan_id = EXCLUDED.scan_id,			scase_id = EXCLUDED.scase_id,			scase_inv_id = EXCLUDED.scase_inv_id,			sterilizer_load_id = EXCLUDED.sterilizer_load_id,			sterilizer_loadinv_id = EXCLUDED.sterilizer_loadinv_id,			start_dts = EXCLUDED.start_dts,			end_dts = EXCLUDED.end_dts,			start_local_dts = EXCLUDED.start_local_dts,			end_local_dts = EXCLUDED.end_local_dts,			date_time = EXCLUDED.date_time,			duration = EXCLUDED.duration,			missing_inst = EXCLUDED.missing_inst,			num_inst = EXCLUDED.num_inst,			num_items = EXCLUDED.num_items,			points = EXCLUDED.points,			num_packs = EXCLUDED.num_packs,			num_trays = EXCLUDED.num_trays,			activity = EXCLUDED.activity,			description = EXCLUDED.description,			marked_for_deletion = EXCLUDED.marked_for_deletion        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_assembly_prods_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_assembly_prods_v1 (data_in assembly_prods_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_assembly_prods_v1 (data_in assembly_prods_v1[])', '()', 'types_plus.insert_assembly_prods_v1 data_in assembly_prods_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_assembly_prods_v1''   and pg_get_function_identity_arguments(oid) = ''data_in assembly_prods_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_assembly_prods_v1 (data_in assembly_prods_v1[])', '()', 'types_plus.insert_assembly_prods_v1 data_in assembly_prods_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_assembly_prods_v1''   and pg_get_function_identity_arguments(oid) = ''data_in assembly_prods_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_assembly_prods_v1(data_in assembly_prods_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- Note: This method is hand-tweaked to populate updated_date with a whole date (4 bytes), like-- !2021-04-15''. This is how the partitions are divided on the table level.-- Why not a generated column instead? Can''t use it for partition keys.-- Why not an expression condition on the partition key? Not allowed, if you also have a PK.-- Why not a trigger? Ugh, bit of hassle & wildly inefficient.-- We already wear the overhead of this insert handler method, so let''s put it to work!-- Kind of a drag, if there''s an INSERT mechanism other than this method. Such as, COPY, import, etc.-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO assembly_prods (			id,			data_file_id,			assembly_id,			item_prod_id,			created_dts,			updated_dts,			target,			found_,			repair,			backup,			actual,			assembly_pos,			marked_for_deletion,			created_by,			updated_by,			prod_alert_text_ack,			audit_events,			updated_date)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.assembly_id,			rows_in.item_prod_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.target,			rows_in.found_,			rows_in.repair,			rows_in.backup,			rows_in.actual,			rows_in.assembly_pos,			rows_in.marked_for_deletion,			rows_in.created_by,			rows_in.updated_by,			rows_in.prod_alert_text_ack,			rows_in.audit_events,			updated_dts::date-- <-- Extract this value in advance for the partition key.        FROM unnest(data_in) as rows_in        ON CONFLICT ON CONSTRAINT assembly_prods_pkey DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			assembly_id = EXCLUDED.assembly_id,			item_prod_id = EXCLUDED.item_prod_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			target = EXCLUDED.target,			found_ = EXCLUDED.found_,			repair = EXCLUDED.repair,			backup = EXCLUDED.backup,			actual = EXCLUDED.actual,			assembly_pos = EXCLUDED.assembly_pos,			marked_for_deletion = EXCLUDED.marked_for_deletion,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			prod_alert_text_ack = EXCLUDED.prod_alert_text_ack,			audit_events = EXCLUDED.audit_events,			updated_date = EXCLUDED.updated_date        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_assembly_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_assembly_v1 (data_in assembly_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_assembly_v1 (data_in assembly_v1[])', '()', 'types_plus.insert_assembly_v1 data_in assembly_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_assembly_v1''   and pg_get_function_identity_arguments(oid) = ''data_in assembly_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_assembly_v1 (data_in assembly_v1[])', '()', 'types_plus.insert_assembly_v1 data_in assembly_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_assembly_v1''   and pg_get_function_identity_arguments(oid) = ''data_in assembly_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_assembly_v1(data_in assembly_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO assembly (			id,			data_file_id,			marked_for_deletion,			created_by_user_id,			done_by_user_id,			facility_location_id,			inv_id,			last_updated_by_data_file_id,			updated_by_user_id,			is_complete,			is_quick_turn,			con_id,			created_by,			difficulty,			quantity,			sequence_no,			num_inst,			points,			done_dts,			created_dts,			updated_dts,			missing_list,			priority,			status,			updated_by)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.created_by_user_id,			rows_in.done_by_user_id,			rows_in.facility_location_id,			rows_in.inv_id,			rows_in.last_updated_by_data_file_id,			rows_in.updated_by_user_id,			rows_in.is_complete,			rows_in.is_quick_turn,			rows_in.con_id,			rows_in.created_by,			rows_in.difficulty,			rows_in.quantity,			rows_in.sequence_no,			rows_in.num_inst,			rows_in.points,			rows_in.done_dts,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.missing_list,			rows_in.priority,			rows_in.status,			rows_in.updated_by        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			created_by_user_id = EXCLUDED.created_by_user_id,			done_by_user_id = EXCLUDED.done_by_user_id,			facility_location_id = EXCLUDED.facility_location_id,			inv_id = EXCLUDED.inv_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			updated_by_user_id = EXCLUDED.updated_by_user_id,			is_complete = EXCLUDED.is_complete,			is_quick_turn = EXCLUDED.is_quick_turn,			con_id = EXCLUDED.con_id,			created_by = EXCLUDED.created_by,			difficulty = EXCLUDED.difficulty,			quantity = EXCLUDED.quantity,			sequence_no = EXCLUDED.sequence_no,			num_inst = EXCLUDED.num_inst,			points = EXCLUDED.points,			done_dts = EXCLUDED.done_dts,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			missing_list = EXCLUDED.missing_list,			priority = EXCLUDED.priority,			status = EXCLUDED.status,			updated_by = EXCLUDED.updated_by        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_clinic_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_clinic_v1 (data_in clinic_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_clinic_v1 (data_in clinic_v1[])', '()', 'types_plus.insert_clinic_v1 data_in clinic_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_clinic_v1''   and pg_get_function_identity_arguments(oid) = ''data_in clinic_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_clinic_v1 (data_in clinic_v1[])', '()', 'types_plus.insert_clinic_v1 data_in clinic_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_clinic_v1''   and pg_get_function_identity_arguments(oid) = ''data_in clinic_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_clinic_v1(data_in clinic_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO clinic (			id,			hsys_id,			created_dts,			updated_dts,			marked_for_deletion,			receive_at_clinic,			name_,			created_by,			updated_by)                  SELECT			rows_in.id,			rows_in.hsys_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.marked_for_deletion,			rows_in.receive_at_clinic,			rows_in.name_,			rows_in.created_by,			rows_in.updated_by                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			hsys_id = EXCLUDED.hsys_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			marked_for_deletion = EXCLUDED.marked_for_deletion,			receive_at_clinic = EXCLUDED.receive_at_clinic,			name_ = EXCLUDED.name_,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_domo_dataset_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_domo_dataset_v1 (data_in domo_dataset_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_domo_dataset_v1 (data_in domo_dataset_v1[])', '()', 'types_plus.insert_domo_dataset_v1 data_in domo_dataset_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_domo_dataset_v1''   and pg_get_function_identity_arguments(oid) = ''data_in domo_dataset_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_domo_dataset_v1 (data_in domo_dataset_v1[])', '()', 'types_plus.insert_domo_dataset_v1 data_in domo_dataset_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_domo_dataset_v1''   and pg_get_function_identity_arguments(oid) = ''data_in domo_dataset_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_domo_dataset_v1(data_in domo_dataset_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO domo_dataset (			id,			dataset_name,			rows_count,			columns_count,			created_at_dts,			updated_at_dts)                  SELECT			rows_in.id,			rows_in.dataset_name,			rows_in.rows_count,			rows_in.columns_count,			rows_in.created_at_dts,			rows_in.updated_at_dts                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			dataset_name = EXCLUDED.dataset_name,			rows_count = EXCLUDED.rows_count,			columns_count = EXCLUDED.columns_count,			created_at_dts = EXCLUDED.created_at_dts,			updated_at_dts = EXCLUDED.updated_at_dts          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_domo_passthrough_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_domo_passthrough_v1 (data_in domo_passthrough_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_domo_passthrough_v1 (data_in domo_passthrough_v1[])', '()', 'types_plus.insert_domo_passthrough_v1 data_in domo_passthrough_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_domo_passthrough_v1''   and pg_get_function_identity_arguments(oid) = ''data_in domo_passthrough_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_domo_passthrough_v1 (data_in domo_passthrough_v1[])', '()', 'types_plus.insert_domo_passthrough_v1 data_in domo_passthrough_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_domo_passthrough_v1''   and pg_get_function_identity_arguments(oid) = ''data_in domo_passthrough_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_domo_passthrough_v1(data_in domo_passthrough_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.-- 2020-04-05: Updated constraint clause to to match unqiue index name in v2 of table.with inserted_rows as (        INSERT INTO domo_passthrough (			source_id,			hsys_id,			facility_id,			view_version,			dataset_name,			data)        SELECT			rows_in.source_id,			rows_in.hsys_id,			rows_in.facility_id,			rows_in.view_version,			rows_in.dataset_name,			rows_in.data        FROM unnest(data_in) as rows_in        ON CONFLICT ON CONSTRAINT domo_passthrough_key_unique DO UPDATE SET			hsys_id         = EXCLUDED.hsys_id,			facility_id     = EXCLUDED.facility_id,			view_version    = EXCLUDED.view_version,			data            = EXCLUDED.data        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_domo_passthrough_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_domo_passthrough_v2 (data_in domo_passthrough_v2[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_domo_passthrough_v2 (data_in domo_passthrough_v2[])', '()', 'types_plus.insert_domo_passthrough_v2 data_in domo_passthrough_v2[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_domo_passthrough_v2''   and pg_get_function_identity_arguments(oid) = ''data_in domo_passthrough_v2[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_domo_passthrough_v2 (data_in domo_passthrough_v2[])', '()', 'types_plus.insert_domo_passthrough_v2 data_in domo_passthrough_v2[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_domo_passthrough_v2''   and pg_get_function_identity_arguments(oid) = ''data_in domo_passthrough_v2[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_domo_passthrough_v2(data_in domo_passthrough_v2[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO domo_passthrough (			key_supplement,			source_id,			hsys_id,			facility_id,			view_version,			dataset_name,			data,			from_dts,			to_dts)        SELECT			rows_in.key_supplement,			rows_in.source_id,			rows_in.hsys_id,			rows_in.facility_id,			rows_in.view_version,			rows_in.dataset_name,			rows_in.data,			rows_in.from_dts,			rows_in.to_dts        FROM unnest(data_in) as rows_in        ON CONFLICT ON CONSTRAINT domo_passthrough_key_unique DO UPDATE SET			hsys_id         = EXCLUDED.hsys_id,			facility_id     = EXCLUDED.facility_id,			view_version    = EXCLUDED.view_version,			data            = EXCLUDED.data,			from_dts        = EXCLUDED.from_dts,			to_dts          = EXCLUDED.to_dts        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_facility_activities_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_facility_activities_v1 (data_in facility_activities_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_facility_activities_v1 (data_in facility_activities_v1[])', '()', 'types_plus.insert_facility_activities_v1 data_in facility_activities_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_facility_activities_v1''   and pg_get_function_identity_arguments(oid) = ''data_in facility_activities_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_facility_activities_v1 (data_in facility_activities_v1[])', '()', 'types_plus.insert_facility_activities_v1 data_in facility_activities_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_facility_activities_v1''   and pg_get_function_identity_arguments(oid) = ''data_in facility_activities_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_facility_activities_v1(data_in facility_activities_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO facility_activities (			id,			facility_id,			last_updated_by_data_file_id,			created_dts,			updated_dts,			marked_for_deletion,			name_,			created_by,			updated_by)                  SELECT			rows_in.id,			rows_in.facility_id,			rows_in.last_updated_by_data_file_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.marked_for_deletion,			rows_in.name_,			rows_in.created_by,			rows_in.updated_by                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			facility_id = EXCLUDED.facility_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			marked_for_deletion = EXCLUDED.marked_for_deletion,			name_ = EXCLUDED.name_,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_facility_department_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_facility_department_v1 (data_in facility_department_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_facility_department_v1 (data_in facility_department_v1[])', '()', 'types_plus.insert_facility_department_v1 data_in facility_department_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_facility_department_v1''   and pg_get_function_identity_arguments(oid) = ''data_in facility_department_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_facility_department_v1 (data_in facility_department_v1[])', '()', 'types_plus.insert_facility_department_v1 data_in facility_department_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_facility_department_v1''   and pg_get_function_identity_arguments(oid) = ''data_in facility_department_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_facility_department_v1(data_in facility_department_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO facility_department (			id,			facility_id,			their_id,			created_dts,			updated_dts,			marked_for_deletion,			is_available_in_sonar,			receive_at_dept,			is_from_emr,			name_,			created_by,			updated_by,			label_name,			inv_audit)                  SELECT			rows_in.id,			rows_in.facility_id,			rows_in.their_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.marked_for_deletion,			rows_in.is_available_in_sonar,			rows_in.receive_at_dept,			rows_in.is_from_emr,			rows_in.name_,			rows_in.created_by,			rows_in.updated_by,			rows_in.label_name,			rows_in.inv_audit                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			facility_id = EXCLUDED.facility_id,			their_id = EXCLUDED.their_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_available_in_sonar = EXCLUDED.is_available_in_sonar,			receive_at_dept = EXCLUDED.receive_at_dept,			is_from_emr = EXCLUDED.is_from_emr,			name_ = EXCLUDED.name_,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			label_name = EXCLUDED.label_name,			inv_audit = EXCLUDED.inv_audit          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_facility_location_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_facility_location_v1 (data_in facility_location_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_facility_location_v1 (data_in facility_location_v1[])', '()', 'types_plus.insert_facility_location_v1 data_in facility_location_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_facility_location_v1''   and pg_get_function_identity_arguments(oid) = ''data_in facility_location_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_facility_location_v1 (data_in facility_location_v1[])', '()', 'types_plus.insert_facility_location_v1 data_in facility_location_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_facility_location_v1''   and pg_get_function_identity_arguments(oid) = ''data_in facility_location_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_facility_location_v1(data_in facility_location_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO facility_location (			id,			marked_for_deletion,			facility_id,			type_,			name_)        SELECT			rows_in.id,			rows_in.marked_for_deletion,			rows_in.facility_id,			rows_in.type_,			rows_in.name_        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			marked_for_deletion = EXCLUDED.marked_for_deletion,			facility_id = EXCLUDED.facility_id,			type_ = EXCLUDED.type_,			name_ = EXCLUDED.name_        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_facility_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_facility_v1 (data_in facility_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_facility_v1 (data_in facility_v1[])', '()', 'types_plus.insert_facility_v1 data_in facility_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_facility_v1''   and pg_get_function_identity_arguments(oid) = ''data_in facility_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_facility_v1 (data_in facility_v1[])', '()', 'types_plus.insert_facility_v1 data_in facility_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_facility_v1''   and pg_get_function_identity_arguments(oid) = ''data_in facility_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_facility_v1(data_in facility_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO facility (			id,			marked_for_deletion,			hsys_id,			name_,			tz_name)        SELECT			rows_in.id,			rows_in.marked_for_deletion,			rows_in.hsys_id,			rows_in.name_,			rows_in.tz_name        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			marked_for_deletion = EXCLUDED.marked_for_deletion,			hsys_id = EXCLUDED.hsys_id,			name_ = EXCLUDED.name_,			tz_name = EXCLUDED.tz_name        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_facility_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_facility_v2 (data_in facility_v2[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_facility_v2 (data_in facility_v2[])', '()', 'types_plus.insert_facility_v2 data_in facility_v2[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_facility_v2''   and pg_get_function_identity_arguments(oid) = ''data_in facility_v2[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_facility_v2 (data_in facility_v2[])', '()', 'types_plus.insert_facility_v2 data_in facility_v2[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_facility_v2''   and pg_get_function_identity_arguments(oid) = ''data_in facility_v2[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_facility_v2(data_in facility_v2[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO facility (			id,			hsys_id,			production_label_form_id,			permanent_label_form_id,			missing_inst_label_form_id,			facility_location_label_form_id,			sterilizer_label_form_id,			user_badge_label_form_id,			workstation_label_form_id,			default_spd_facility_id,			created_dts,			updated_dts,			sonar_auto_logout_minutes,			sonar_auto_logout_dialog_minutes,			num_ors,			sonar_go_live_date,			marked_for_deletion,			is_count_sheet_source_truth,			hide_doc_names_for_stats,			is_item_master_live,			is_sonar_live,			sterilizer_print_at_sterilizing,			sterilizer_print_at_cooling,			sterilizer_print_at_released,			can_set_all_found_in_assembly,			name_,			their_id,			created_by,			updated_by,			reporting_name,			label_name,			tz_name,			sonar_name_full,			sonar_count_sheet_form_name,			sterilize_alert_level,			sonar_scanner_stop_char,			emr_location_name,			sonar_features,			interfaces,			needs_scheduling,			analytics_prefs)                  SELECT			rows_in.id,			rows_in.hsys_id,			rows_in.production_label_form_id,			rows_in.permanent_label_form_id,			rows_in.missing_inst_label_form_id,			rows_in.facility_location_label_form_id,			rows_in.sterilizer_label_form_id,			rows_in.user_badge_label_form_id,			rows_in.workstation_label_form_id,			rows_in.default_spd_facility_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.sonar_auto_logout_minutes,			rows_in.sonar_auto_logout_dialog_minutes,			rows_in.num_ors,			rows_in.sonar_go_live_date,			rows_in.marked_for_deletion,			rows_in.is_count_sheet_source_truth,			rows_in.hide_doc_names_for_stats,			rows_in.is_item_master_live,			rows_in.is_sonar_live,			rows_in.sterilizer_print_at_sterilizing,			rows_in.sterilizer_print_at_cooling,			rows_in.sterilizer_print_at_released,			rows_in.can_set_all_found_in_assembly,			rows_in.name_,			rows_in.their_id,			rows_in.created_by,			rows_in.updated_by,			rows_in.reporting_name,			rows_in.label_name,			rows_in.tz_name,			rows_in.sonar_name_full,			rows_in.sonar_count_sheet_form_name,			rows_in.sterilize_alert_level,			rows_in.sonar_scanner_stop_char,			rows_in.emr_location_name,			rows_in.sonar_features,			rows_in.interfaces,			rows_in.needs_scheduling,			rows_in.analytics_prefs                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			hsys_id = EXCLUDED.hsys_id,			production_label_form_id = EXCLUDED.production_label_form_id,			permanent_label_form_id = EXCLUDED.permanent_label_form_id,			missing_inst_label_form_id = EXCLUDED.missing_inst_label_form_id,			facility_location_label_form_id = EXCLUDED.facility_location_label_form_id,			sterilizer_label_form_id = EXCLUDED.sterilizer_label_form_id,			user_badge_label_form_id = EXCLUDED.user_badge_label_form_id,			workstation_label_form_id = EXCLUDED.workstation_label_form_id,			default_spd_facility_id = EXCLUDED.default_spd_facility_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			sonar_auto_logout_minutes = EXCLUDED.sonar_auto_logout_minutes,			sonar_auto_logout_dialog_minutes = EXCLUDED.sonar_auto_logout_dialog_minutes,			num_ors = EXCLUDED.num_ors,			sonar_go_live_date = EXCLUDED.sonar_go_live_date,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_count_sheet_source_truth = EXCLUDED.is_count_sheet_source_truth,			hide_doc_names_for_stats = EXCLUDED.hide_doc_names_for_stats,			is_item_master_live = EXCLUDED.is_item_master_live,			is_sonar_live = EXCLUDED.is_sonar_live,			sterilizer_print_at_sterilizing = EXCLUDED.sterilizer_print_at_sterilizing,			sterilizer_print_at_cooling = EXCLUDED.sterilizer_print_at_cooling,			sterilizer_print_at_released = EXCLUDED.sterilizer_print_at_released,			can_set_all_found_in_assembly = EXCLUDED.can_set_all_found_in_assembly,			name_ = EXCLUDED.name_,			their_id = EXCLUDED.their_id,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			reporting_name = EXCLUDED.reporting_name,			label_name = EXCLUDED.label_name,			tz_name = EXCLUDED.tz_name,			sonar_name_full = EXCLUDED.sonar_name_full,			sonar_count_sheet_form_name = EXCLUDED.sonar_count_sheet_form_name,			sterilize_alert_level = EXCLUDED.sterilize_alert_level,			sonar_scanner_stop_char = EXCLUDED.sonar_scanner_stop_char,			emr_location_name = EXCLUDED.emr_location_name,			sonar_features = EXCLUDED.sonar_features,			interfaces = EXCLUDED.interfaces,			needs_scheduling = EXCLUDED.needs_scheduling,			analytics_prefs = EXCLUDED.analytics_prefs          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_focus_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_focus_v2 (data_in focus_v2[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_focus_v2 (data_in focus_v2[])', '()', 'types_plus.insert_focus_v2 data_in focus_v2[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_focus_v2''   and pg_get_function_identity_arguments(oid) = ''data_in focus_v2[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_focus_v2 (data_in focus_v2[])', '()', 'types_plus.insert_focus_v2 data_in focus_v2[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_focus_v2''   and pg_get_function_identity_arguments(oid) = ''data_in focus_v2[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_focus_v2(data_in focus_v2[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO focus (			scase_id,			hsys_id,			facility_id,			sched_dts,			facility_name,			or_name,			case_seq,			desc_,			status,			transport_from,			surgeon_name,			proc_name,			when_)                  SELECT			rows_in.scase_id,			rows_in.hsys_id,			rows_in.facility_id,			rows_in.sched_dts,			rows_in.facility_name,			rows_in.or_name,			rows_in.case_seq,			rows_in.desc_,			rows_in.status,			rows_in.transport_from,			rows_in.surgeon_name,			rows_in.proc_name,			rows_in.when_                      FROM unnest(data_in) as rows_in                  returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_form_template_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_form_template_v1 (data_in form_template_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_form_template_v1 (data_in form_template_v1[])', '()', 'types_plus.insert_form_template_v1 data_in form_template_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_form_template_v1''   and pg_get_function_identity_arguments(oid) = ''data_in form_template_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_form_template_v1 (data_in form_template_v1[])', '()', 'types_plus.insert_form_template_v1 data_in form_template_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_form_template_v1''   and pg_get_function_identity_arguments(oid) = ''data_in form_template_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_form_template_v1(data_in form_template_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO form_template (			id,			created_dts,			updated_dts,			marked_for_deletion,			name_,			comments_,			updated_by,			created_by,			form_definition)                  SELECT			rows_in.id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.marked_for_deletion,			rows_in.name_,			rows_in.comments_,			rows_in.updated_by,			rows_in.created_by,			rows_in.form_definition                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			marked_for_deletion = EXCLUDED.marked_for_deletion,			name_ = EXCLUDED.name_,			comments_ = EXCLUDED.comments_,			updated_by = EXCLUDED.updated_by,			created_by = EXCLUDED.created_by,			form_definition = EXCLUDED.form_definition          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_hsys_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_hsys_v1 (data_in hsys_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_hsys_v1 (data_in hsys_v1[])', '()', 'types_plus.insert_hsys_v1 data_in hsys_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_hsys_v1''   and pg_get_function_identity_arguments(oid) = ''data_in hsys_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_hsys_v1 (data_in hsys_v1[])', '()', 'types_plus.insert_hsys_v1 data_in hsys_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_hsys_v1''   and pg_get_function_identity_arguments(oid) = ''data_in hsys_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_hsys_v1(data_in hsys_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO hsys (			id,			marked_for_deletion,			name_)        SELECT			rows_in.id,			rows_in.marked_for_deletion,			rows_in.name_        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			marked_for_deletion = EXCLUDED.marked_for_deletion,			name_ = EXCLUDED.name_        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_hsys_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_hsys_v2 (data_in hsys_v2[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_hsys_v2 (data_in hsys_v2[])', '()', 'types_plus.insert_hsys_v2 data_in hsys_v2[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_hsys_v2''   and pg_get_function_identity_arguments(oid) = ''data_in hsys_v2[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_hsys_v2 (data_in hsys_v2[])', '()', 'types_plus.insert_hsys_v2 data_in hsys_v2[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_hsys_v2''   and pg_get_function_identity_arguments(oid) = ''data_in hsys_v2[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_hsys_v2(data_in hsys_v2[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO hsys (			id,			marked_for_deletion,			name_,			sonar_client_version,			sonar_server_version,			sonar_browser_version)        SELECT			rows_in.id,			rows_in.marked_for_deletion,			rows_in.name_,			rows_in.sonar_client_version,			rows_in.sonar_server_version,			rows_in.sonar_browser_version        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			marked_for_deletion = EXCLUDED.marked_for_deletion,			name_ = EXCLUDED.name_,			sonar_client_version = EXCLUDED.sonar_client_version,			sonar_server_version = EXCLUDED.sonar_server_version,			sonar_browser_version = EXCLUDED.sonar_browser_version        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_inv_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_inv_v2 (data_in inv_v2[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_inv_v2 (data_in inv_v2[])', '()', 'types_plus.insert_inv_v2 data_in inv_v2[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_inv_v2''   and pg_get_function_identity_arguments(oid) = ''data_in inv_v2[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_inv_v2 (data_in inv_v2[])', '()', 'types_plus.insert_inv_v2 data_in inv_v2[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_inv_v2''   and pg_get_function_identity_arguments(oid) = ''data_in inv_v2[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_inv_v2(data_in inv_v2[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO inv (			id,			item_id,			item_arch_id,			facility_location_id,			standard_faclity_id,			store_at_facility_id,			created_dts,			updated_dts,			serial_no_as_of_dts,			qty,			flow,			flow_long,			par,			last_seen_date,			their_next_repair_date,			last_sterilized_date,			repair_last_repair_date,			is_searched_but_not_found,			marked_for_deletion,			is_found,			is_go_live_perm_printed,			is_sleeping,			is_handwritten_label,			is_wrong_loc,			is_facility_loc_inherited,			needs_repair,			is_deactivated,			is_contents_incomplete,			their_location,			category,			their_name,			their_id,			created_by,			updated_by,			their_id_scrubbed,			crossing_status,			inv_no,			their_raw_name,			comments_,			their_bar_code,			loc_rack,			loc_row,			loc_bin,			loc_note,			serial_no,			data_cleanse_classification,			repair_next_due,			repair_last_repaired_by,			msgs)                  SELECT			rows_in.id,			rows_in.item_id,			rows_in.item_arch_id,			rows_in.facility_location_id,			rows_in.standard_faclity_id,			rows_in.store_at_facility_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.serial_no_as_of_dts,			rows_in.qty,			rows_in.flow,			rows_in.flow_long,			rows_in.par,			rows_in.last_seen_date,			rows_in.their_next_repair_date,			rows_in.last_sterilized_date,			rows_in.repair_last_repair_date,			rows_in.is_searched_but_not_found,			rows_in.marked_for_deletion,			rows_in.is_found,			rows_in.is_go_live_perm_printed,			rows_in.is_sleeping,			rows_in.is_handwritten_label,			rows_in.is_wrong_loc,			rows_in.is_facility_loc_inherited,			rows_in.needs_repair,			rows_in.is_deactivated,			rows_in.is_contents_incomplete,			rows_in.their_location,			rows_in.category,			rows_in.their_name,			rows_in.their_id,			rows_in.created_by,			rows_in.updated_by,			rows_in.their_id_scrubbed,			rows_in.crossing_status,			rows_in.inv_no,			rows_in.their_raw_name,			rows_in.comments_,			rows_in.their_bar_code,			rows_in.loc_rack,			rows_in.loc_row,			rows_in.loc_bin,			rows_in.loc_note,			rows_in.serial_no,			rows_in.data_cleanse_classification,			rows_in.repair_next_due,			rows_in.repair_last_repaired_by,			rows_in.msgs                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			item_id = EXCLUDED.item_id,			item_arch_id = EXCLUDED.item_arch_id,			facility_location_id = EXCLUDED.facility_location_id,			standard_faclity_id = EXCLUDED.standard_faclity_id,			store_at_facility_id = EXCLUDED.store_at_facility_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			serial_no_as_of_dts = EXCLUDED.serial_no_as_of_dts,			qty = EXCLUDED.qty,			flow = EXCLUDED.flow,			flow_long = EXCLUDED.flow_long,			par = EXCLUDED.par,			last_seen_date = EXCLUDED.last_seen_date,			their_next_repair_date = EXCLUDED.their_next_repair_date,			last_sterilized_date = EXCLUDED.last_sterilized_date,			repair_last_repair_date = EXCLUDED.repair_last_repair_date,			is_searched_but_not_found = EXCLUDED.is_searched_but_not_found,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_found = EXCLUDED.is_found,			is_go_live_perm_printed = EXCLUDED.is_go_live_perm_printed,			is_sleeping = EXCLUDED.is_sleeping,			is_handwritten_label = EXCLUDED.is_handwritten_label,			is_wrong_loc = EXCLUDED.is_wrong_loc,			is_facility_loc_inherited = EXCLUDED.is_facility_loc_inherited,			needs_repair = EXCLUDED.needs_repair,			is_deactivated = EXCLUDED.is_deactivated,			is_contents_incomplete = EXCLUDED.is_contents_incomplete,			their_location = EXCLUDED.their_location,			category = EXCLUDED.category,			their_name = EXCLUDED.their_name,			their_id = EXCLUDED.their_id,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			their_id_scrubbed = EXCLUDED.their_id_scrubbed,			crossing_status = EXCLUDED.crossing_status,			inv_no = EXCLUDED.inv_no,			their_raw_name = EXCLUDED.their_raw_name,			comments_ = EXCLUDED.comments_,			their_bar_code = EXCLUDED.their_bar_code,			loc_rack = EXCLUDED.loc_rack,			loc_row = EXCLUDED.loc_row,			loc_bin = EXCLUDED.loc_bin,			loc_note = EXCLUDED.loc_note,			serial_no = EXCLUDED.serial_no,			data_cleanse_classification = EXCLUDED.data_cleanse_classification,			repair_next_due = EXCLUDED.repair_next_due,			repair_last_repaired_by = EXCLUDED.repair_last_repaired_by,			msgs = EXCLUDED.msgs          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_item_arch_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_item_arch_v1 (data_in item_arch_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_item_arch_v1 (data_in item_arch_v1[])', '()', 'types_plus.insert_item_arch_v1 data_in item_arch_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_item_arch_v1''   and pg_get_function_identity_arguments(oid) = ''data_in item_arch_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_item_arch_v1 (data_in item_arch_v1[])', '()', 'types_plus.insert_item_arch_v1 data_in item_arch_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_item_arch_v1''   and pg_get_function_identity_arguments(oid) = ''data_in item_arch_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_item_arch_v1(data_in item_arch_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO item_arch (			id,			facility_id,			clinic_id,			created_dts,			updated_dts,			previous_as_of,			marked_for_deletion,			is_current,			name_,			type_,			created_by,			updated_by)                  SELECT			rows_in.id,			rows_in.facility_id,			rows_in.clinic_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.previous_as_of,			rows_in.marked_for_deletion,			rows_in.is_current,			rows_in.name_,			rows_in.type_,			rows_in.created_by,			rows_in.updated_by                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			facility_id = EXCLUDED.facility_id,			clinic_id = EXCLUDED.clinic_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			previous_as_of = EXCLUDED.previous_as_of,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_current = EXCLUDED.is_current,			name_ = EXCLUDED.name_,			type_ = EXCLUDED.type_,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_item_type_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_item_type_v1 (data_in item_type_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_item_type_v1 (data_in item_type_v1[])', '()', 'types_plus.insert_item_type_v1 data_in item_type_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_item_type_v1''   and pg_get_function_identity_arguments(oid) = ''data_in item_type_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_item_type_v1 (data_in item_type_v1[])', '()', 'types_plus.insert_item_type_v1 data_in item_type_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_item_type_v1''   and pg_get_function_identity_arguments(oid) = ''data_in item_type_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_item_type_v1(data_in item_type_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO item_type (			id,			marked_for_deletion,			name_)        SELECT			rows_in.id,			rows_in.marked_for_deletion,			rows_in.name_        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			marked_for_deletion = EXCLUDED.marked_for_deletion,			name_ = EXCLUDED.name_        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_item_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_item_v2 (data_in item_v2[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_item_v2 (data_in item_v2[])', '()', 'types_plus.insert_item_v2 data_in item_v2[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_item_v2''   and pg_get_function_identity_arguments(oid) = ''data_in item_v2[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_item_v2 (data_in item_v2[])', '()', 'types_plus.insert_item_v2 data_in item_v2[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_item_v2''   and pg_get_function_identity_arguments(oid) = ''data_in item_v2[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_item_v2(data_in item_v2[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO item (			id,			item_arch_id,			facility_specialty_id,			item_uu_id_across_item_archs,			inv_responsible_user_id,			facility_department_id,			specialty_id,			sup_id,			dr_people_id,			item_type_id,			item_master_link_id,			facility_location_id,			clinic_id,			hsys_tag_id,			name_copied_from_prod_id,			created_dts,			updated_dts,			named_dts,			needs_sched_sync_as_of_dts,			weight_lb,			qty,			flow,			flow_long,			max_processed_one_day,			par,			assembly_difficulty,			num_inst,			repair_every_x,			their_qty,			replace_every_x_cycles,			hide_specialty_in_name,			marked_for_deletion,			is_assembly_critical,			requires_leak_test,			is_not_tracked_by_inv_no,			is_imlink_locked,			is_robotic,			is_flexible_scope,			is_generic_pack,			dont_print_count_sheet,			is_conflict_check,			is_small_set,			hide_hsys_tag_in_name,			is_name_finalized,			is_in_data_cleanse_scope,			is_label_abbr,			has_implants,			sync_to_other_software_systems,			inv_has_implants,			is_custom_sort,			is_name_copied_from_prod,			is_deactivated,			is_vendor_data,			name_needs_review,			ignore_for_optimization,			inv_status,			their_name,			opt_status,			created_by,			updated_by,			old_names,			their_serial_no,			name_desc,			name_,			their_id,			decon_special_instructions,			named_by,			needs_review_notes,			vendor_tray_type,			sterilization_method,			priority,			category,			packaging_type,			packaging_notes,			their_packaging_type,			assembly_special_instructions,			sterilize_special_instructions,			label_name_abbr,			their_location,			count_sheet_status,			requested_by,			rack_row_bin_note,			standardization_status,			repair_every_x_type,			their_base_barcode,			their_key,			stuff)                  SELECT			rows_in.id,			rows_in.item_arch_id,			rows_in.facility_specialty_id,			rows_in.item_uu_id_across_item_archs,			rows_in.inv_responsible_user_id,			rows_in.facility_department_id,			rows_in.specialty_id,			rows_in.sup_id,			rows_in.dr_people_id,			rows_in.item_type_id,			rows_in.item_master_link_id,			rows_in.facility_location_id,			rows_in.clinic_id,			rows_in.hsys_tag_id,			rows_in.name_copied_from_prod_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.named_dts,			rows_in.needs_sched_sync_as_of_dts,			rows_in.weight_lb,			rows_in.qty,			rows_in.flow,			rows_in.flow_long,			rows_in.max_processed_one_day,			rows_in.par,			rows_in.assembly_difficulty,			rows_in.num_inst,			rows_in.repair_every_x,			rows_in.their_qty,			rows_in.replace_every_x_cycles,			rows_in.hide_specialty_in_name,			rows_in.marked_for_deletion,			rows_in.is_assembly_critical,			rows_in.requires_leak_test,			rows_in.is_not_tracked_by_inv_no,			rows_in.is_imlink_locked,			rows_in.is_robotic,			rows_in.is_flexible_scope,			rows_in.is_generic_pack,			rows_in.dont_print_count_sheet,			rows_in.is_conflict_check,			rows_in.is_small_set,			rows_in.hide_hsys_tag_in_name,			rows_in.is_name_finalized,			rows_in.is_in_data_cleanse_scope,			rows_in.is_label_abbr,			rows_in.has_implants,			rows_in.sync_to_other_software_systems,			rows_in.inv_has_implants,			rows_in.is_custom_sort,			rows_in.is_name_copied_from_prod,			rows_in.is_deactivated,			rows_in.is_vendor_data,			rows_in.name_needs_review,			rows_in.ignore_for_optimization,			rows_in.inv_status,			rows_in.their_name,			rows_in.opt_status,			rows_in.created_by,			rows_in.updated_by,			rows_in.old_names,			rows_in.their_serial_no,			rows_in.name_desc,			rows_in.name_,			rows_in.their_id,			rows_in.decon_special_instructions,			rows_in.named_by,			rows_in.needs_review_notes,			rows_in.vendor_tray_type,			rows_in.sterilization_method,			rows_in.priority,			rows_in.category,			rows_in.packaging_type,			rows_in.packaging_notes,			rows_in.their_packaging_type,			rows_in.assembly_special_instructions,			rows_in.sterilize_special_instructions,			rows_in.label_name_abbr,			rows_in.their_location,			rows_in.count_sheet_status,			rows_in.requested_by,			rows_in.rack_row_bin_note,			rows_in.standardization_status,			rows_in.repair_every_x_type,			rows_in.their_base_barcode,			rows_in.their_key,			rows_in.stuff                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			item_arch_id = EXCLUDED.item_arch_id,			facility_specialty_id = EXCLUDED.facility_specialty_id,			item_uu_id_across_item_archs = EXCLUDED.item_uu_id_across_item_archs,			inv_responsible_user_id = EXCLUDED.inv_responsible_user_id,			facility_department_id = EXCLUDED.facility_department_id,			specialty_id = EXCLUDED.specialty_id,			sup_id = EXCLUDED.sup_id,			dr_people_id = EXCLUDED.dr_people_id,			item_type_id = EXCLUDED.item_type_id,			item_master_link_id = EXCLUDED.item_master_link_id,			facility_location_id = EXCLUDED.facility_location_id,			clinic_id = EXCLUDED.clinic_id,			hsys_tag_id = EXCLUDED.hsys_tag_id,			name_copied_from_prod_id = EXCLUDED.name_copied_from_prod_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			named_dts = EXCLUDED.named_dts,			needs_sched_sync_as_of_dts = EXCLUDED.needs_sched_sync_as_of_dts,			weight_lb = EXCLUDED.weight_lb,			qty = EXCLUDED.qty,			flow = EXCLUDED.flow,			flow_long = EXCLUDED.flow_long,			max_processed_one_day = EXCLUDED.max_processed_one_day,			par = EXCLUDED.par,			assembly_difficulty = EXCLUDED.assembly_difficulty,			num_inst = EXCLUDED.num_inst,			repair_every_x = EXCLUDED.repair_every_x,			their_qty = EXCLUDED.their_qty,			replace_every_x_cycles = EXCLUDED.replace_every_x_cycles,			hide_specialty_in_name = EXCLUDED.hide_specialty_in_name,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_assembly_critical = EXCLUDED.is_assembly_critical,			requires_leak_test = EXCLUDED.requires_leak_test,			is_not_tracked_by_inv_no = EXCLUDED.is_not_tracked_by_inv_no,			is_imlink_locked = EXCLUDED.is_imlink_locked,			is_robotic = EXCLUDED.is_robotic,			is_flexible_scope = EXCLUDED.is_flexible_scope,			is_generic_pack = EXCLUDED.is_generic_pack,			dont_print_count_sheet = EXCLUDED.dont_print_count_sheet,			is_conflict_check = EXCLUDED.is_conflict_check,			is_small_set = EXCLUDED.is_small_set,			hide_hsys_tag_in_name = EXCLUDED.hide_hsys_tag_in_name,			is_name_finalized = EXCLUDED.is_name_finalized,			is_in_data_cleanse_scope = EXCLUDED.is_in_data_cleanse_scope,			is_label_abbr = EXCLUDED.is_label_abbr,			has_implants = EXCLUDED.has_implants,			sync_to_other_software_systems = EXCLUDED.sync_to_other_software_systems,			inv_has_implants = EXCLUDED.inv_has_implants,			is_custom_sort = EXCLUDED.is_custom_sort,			is_name_copied_from_prod = EXCLUDED.is_name_copied_from_prod,			is_deactivated = EXCLUDED.is_deactivated,			is_vendor_data = EXCLUDED.is_vendor_data,			name_needs_review = EXCLUDED.name_needs_review,			ignore_for_optimization = EXCLUDED.ignore_for_optimization,			inv_status = EXCLUDED.inv_status,			their_name = EXCLUDED.their_name,			opt_status = EXCLUDED.opt_status,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			old_names = EXCLUDED.old_names,			their_serial_no = EXCLUDED.their_serial_no,			name_desc = EXCLUDED.name_desc,			name_ = EXCLUDED.name_,			their_id = EXCLUDED.their_id,			decon_special_instructions = EXCLUDED.decon_special_instructions,			named_by = EXCLUDED.named_by,			needs_review_notes = EXCLUDED.needs_review_notes,			vendor_tray_type = EXCLUDED.vendor_tray_type,			sterilization_method = EXCLUDED.sterilization_method,			priority = EXCLUDED.priority,			category = EXCLUDED.category,			packaging_type = EXCLUDED.packaging_type,			packaging_notes = EXCLUDED.packaging_notes,			their_packaging_type = EXCLUDED.their_packaging_type,			assembly_special_instructions = EXCLUDED.assembly_special_instructions,			sterilize_special_instructions = EXCLUDED.sterilize_special_instructions,			label_name_abbr = EXCLUDED.label_name_abbr,			their_location = EXCLUDED.their_location,			count_sheet_status = EXCLUDED.count_sheet_status,			requested_by = EXCLUDED.requested_by,			rack_row_bin_note = EXCLUDED.rack_row_bin_note,			standardization_status = EXCLUDED.standardization_status,			repair_every_x_type = EXCLUDED.repair_every_x_type,			their_base_barcode = EXCLUDED.their_base_barcode,			their_key = EXCLUDED.their_key,			stuff = EXCLUDED.stuff          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_loaner_case_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_loaner_case_v1 (data_in loaner_case_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_loaner_case_v1 (data_in loaner_case_v1[])', '()', 'types_plus.insert_loaner_case_v1 data_in loaner_case_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_loaner_case_v1''   and pg_get_function_identity_arguments(oid) = ''data_in loaner_case_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_loaner_case_v1 (data_in loaner_case_v1[])', '()', 'types_plus.insert_loaner_case_v1 data_in loaner_case_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_loaner_case_v1''   and pg_get_function_identity_arguments(oid) = ''data_in loaner_case_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_loaner_case_v1(data_in loaner_case_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO loaner_case (			id,			loaner_id,			last_updated_by_data_file_id,			updated_dts,			created_dts,			case_dts,			marked_for_deletion,			desc_,			surgeon,			updated_by,			created_by)                  SELECT			rows_in.id,			rows_in.loaner_id,			rows_in.last_updated_by_data_file_id,			rows_in.updated_dts,			rows_in.created_dts,			rows_in.case_dts,			rows_in.marked_for_deletion,			rows_in.desc_,			rows_in.surgeon,			rows_in.updated_by,			rows_in.created_by                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			loaner_id = EXCLUDED.loaner_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			updated_dts = EXCLUDED.updated_dts,			created_dts = EXCLUDED.created_dts,			case_dts = EXCLUDED.case_dts,			marked_for_deletion = EXCLUDED.marked_for_deletion,			desc_ = EXCLUDED.desc_,			surgeon = EXCLUDED.surgeon,			updated_by = EXCLUDED.updated_by,			created_by = EXCLUDED.created_by          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_loaner_item_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_loaner_item_v1 (data_in loaner_item_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_loaner_item_v1 (data_in loaner_item_v1[])', '()', 'types_plus.insert_loaner_item_v1 data_in loaner_item_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_loaner_item_v1''   and pg_get_function_identity_arguments(oid) = ''data_in loaner_item_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_loaner_item_v1 (data_in loaner_item_v1[])', '()', 'types_plus.insert_loaner_item_v1 data_in loaner_item_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_loaner_item_v1''   and pg_get_function_identity_arguments(oid) = ''data_in loaner_item_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_loaner_item_v1(data_in loaner_item_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO loaner_item (			id,			loaner_id,			item_id,			last_updated_by_data_file_id,			updated_dts,			created_dts,			left_behind_qty,			qty,			pickup_qty,			marked_for_deletion,			updated_by,			created_by)                  SELECT			rows_in.id,			rows_in.loaner_id,			rows_in.item_id,			rows_in.last_updated_by_data_file_id,			rows_in.updated_dts,			rows_in.created_dts,			rows_in.left_behind_qty,			rows_in.qty,			rows_in.pickup_qty,			rows_in.marked_for_deletion,			rows_in.updated_by,			rows_in.created_by                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			loaner_id = EXCLUDED.loaner_id,			item_id = EXCLUDED.item_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			updated_dts = EXCLUDED.updated_dts,			created_dts = EXCLUDED.created_dts,			left_behind_qty = EXCLUDED.left_behind_qty,			qty = EXCLUDED.qty,			pickup_qty = EXCLUDED.pickup_qty,			marked_for_deletion = EXCLUDED.marked_for_deletion,			updated_by = EXCLUDED.updated_by,			created_by = EXCLUDED.created_by          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_loaner_iteminv_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_loaner_iteminv_v1 (data_in loaner_iteminv_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_loaner_iteminv_v1 (data_in loaner_iteminv_v1[])', '()', 'types_plus.insert_loaner_iteminv_v1 data_in loaner_iteminv_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_loaner_iteminv_v1''   and pg_get_function_identity_arguments(oid) = ''data_in loaner_iteminv_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_loaner_iteminv_v1 (data_in loaner_iteminv_v1[])', '()', 'types_plus.insert_loaner_iteminv_v1 data_in loaner_iteminv_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_loaner_iteminv_v1''   and pg_get_function_identity_arguments(oid) = ''data_in loaner_iteminv_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_loaner_iteminv_v1(data_in loaner_iteminv_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO loaner_iteminv (			id,			loaner_item_id,			inv_id,			last_updated_by_data_file_id,			created_dts,			updated_dts,			marked_for_deletion,			created_by,			updated_by)                  SELECT			rows_in.id,			rows_in.loaner_item_id,			rows_in.inv_id,			rows_in.last_updated_by_data_file_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.marked_for_deletion,			rows_in.created_by,			rows_in.updated_by                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			loaner_item_id = EXCLUDED.loaner_item_id,			inv_id = EXCLUDED.inv_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			marked_for_deletion = EXCLUDED.marked_for_deletion,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_loaner_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_loaner_v1 (data_in loaner_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_loaner_v1 (data_in loaner_v1[])', '()', 'types_plus.insert_loaner_v1 data_in loaner_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_loaner_v1''   and pg_get_function_identity_arguments(oid) = ''data_in loaner_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_loaner_v1 (data_in loaner_v1[])', '()', 'types_plus.insert_loaner_v1 data_in loaner_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_loaner_v1''   and pg_get_function_identity_arguments(oid) = ''data_in loaner_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_loaner_v1(data_in loaner_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO loaner (			s_case_id,			id,			sup_id,			rep_id,			facility_id,			last_updated_by_data_file_id,			pickup_dts,			created_dts,			updated_dts,			datetime_local,			drop_off_dts,			num_items,			marked_for_deletion,			is_printed,			created_by,			updated_by,			status,			notes)                  SELECT			rows_in.s_case_id,			rows_in.id,			rows_in.sup_id,			rows_in.rep_id,			rows_in.facility_id,			rows_in.last_updated_by_data_file_id,			rows_in.pickup_dts,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.datetime_local,			rows_in.drop_off_dts,			rows_in.num_items,			rows_in.marked_for_deletion,			rows_in.is_printed,			rows_in.created_by,			rows_in.updated_by,			rows_in.status,			rows_in.notes                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			s_case_id = EXCLUDED.s_case_id,			sup_id = EXCLUDED.sup_id,			rep_id = EXCLUDED.rep_id,			facility_id = EXCLUDED.facility_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			pickup_dts = EXCLUDED.pickup_dts,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			datetime_local = EXCLUDED.datetime_local,			drop_off_dts = EXCLUDED.drop_off_dts,			num_items = EXCLUDED.num_items,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_printed = EXCLUDED.is_printed,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			status = EXCLUDED.status,			notes = EXCLUDED.notes          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_need_v5.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_need_v5 (data_in need_v5[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_need_v5 (data_in need_v5[])', '()', 'types_plus.insert_need_v5 data_in need_v5[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_need_v5''   and pg_get_function_identity_arguments(oid) = ''data_in need_v5[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_need_v5 (data_in need_v5[])', '()', 'types_plus.insert_need_v5 data_in need_v5[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_need_v5''   and pg_get_function_identity_arguments(oid) = ''data_in need_v5[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_need_v5(data_in need_v5[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO need (			id,			hsys_id,			facility_id,			item_id,			percent_down,			next_case_dts,			flow,			qty_circulation,			qty_ready_everywhere,			qty_ready_here,			qty_sched_everywhere,			qty_sched_here,			qty_sterile_everywhere,			qty_sterile_here,			qty_suggest_sterilize,			qty_total,			ready_vs_need_defecit,			sched_sort,			sort_rank,			suggest_transport,			next_needed,			or_name,			status,			status_sort,			when_,			qty_here)                  SELECT			rows_in.id,			rows_in.hsys_id,			rows_in.facility_id,			rows_in.item_id,			rows_in.percent_down,			rows_in.next_case_dts,			rows_in.flow,			rows_in.qty_circulation,			rows_in.qty_ready_everywhere,			rows_in.qty_ready_here,			rows_in.qty_sched_everywhere,			rows_in.qty_sched_here,			rows_in.qty_sterile_everywhere,			rows_in.qty_sterile_here,			rows_in.qty_suggest_sterilize,			rows_in.qty_total,			rows_in.ready_vs_need_defecit,			rows_in.sched_sort,			rows_in.sort_rank,			rows_in.suggest_transport,			rows_in.next_needed,			rows_in.or_name,			rows_in.status,			rows_in.status_sort,			rows_in.when_,			rows_in.qty_here                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			hsys_id = EXCLUDED.hsys_id,			facility_id = EXCLUDED.facility_id,			item_id = EXCLUDED.item_id,			percent_down = EXCLUDED.percent_down,			next_case_dts = EXCLUDED.next_case_dts,			flow = EXCLUDED.flow,			qty_circulation = EXCLUDED.qty_circulation,			qty_ready_everywhere = EXCLUDED.qty_ready_everywhere,			qty_ready_here = EXCLUDED.qty_ready_here,			qty_sched_everywhere = EXCLUDED.qty_sched_everywhere,			qty_sched_here = EXCLUDED.qty_sched_here,			qty_sterile_everywhere = EXCLUDED.qty_sterile_everywhere,			qty_sterile_here = EXCLUDED.qty_sterile_here,			qty_suggest_sterilize = EXCLUDED.qty_suggest_sterilize,			qty_total = EXCLUDED.qty_total,			ready_vs_need_defecit = EXCLUDED.ready_vs_need_defecit,			sched_sort = EXCLUDED.sched_sort,			sort_rank = EXCLUDED.sort_rank,			suggest_transport = EXCLUDED.suggest_transport,			next_needed = EXCLUDED.next_needed,			or_name = EXCLUDED.or_name,			status = EXCLUDED.status,			status_sort = EXCLUDED.status_sort,			when_ = EXCLUDED.when_,			qty_here = EXCLUDED.qty_here          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_productivity_detail_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_productivity_detail_v1 (data_in productivity_detail_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_productivity_detail_v1 (data_in productivity_detail_v1[])', '()', 'types_plus.insert_productivity_detail_v1 data_in productivity_detail_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_productivity_detail_v1''   and pg_get_function_identity_arguments(oid) = ''data_in productivity_detail_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_productivity_detail_v1 (data_in productivity_detail_v1[])', '()', 'types_plus.insert_productivity_detail_v1 data_in productivity_detail_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_productivity_detail_v1''   and pg_get_function_identity_arguments(oid) = ''data_in productivity_detail_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_productivity_detail_v1(data_in productivity_detail_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO productivity_detail (			id,			source_record_row_counter,			start_time_dts,			source_table_number,			data_file_id,			user_id,			facility_id,			assembly_inst,			assembly_pack,			assembly_tray,			assembly_points,			assembly_seconds_trays,			assembly_seconds_overall,			pause_seconds,			duration_seconds,			placeholder_row,			description,			year_and_month,			start_date,			time_label,			duration,			pause_time,			activity,			user_label)        SELECT			rows_in.id,			rows_in.source_record_row_counter,			rows_in.start_time_dts,			rows_in.source_table_number,			rows_in.data_file_id,			rows_in.user_id,			rows_in.facility_id,			rows_in.assembly_inst,			rows_in.assembly_pack,			rows_in.assembly_tray,			rows_in.assembly_points,			rows_in.assembly_seconds_trays,			rows_in.assembly_seconds_overall,			rows_in.pause_seconds,			rows_in.duration_seconds,			rows_in.placeholder_row,			rows_in.description,			rows_in.year_and_month,			rows_in.start_date,			rows_in.time_label,			rows_in.duration,			rows_in.pause_time,			rows_in.activity,			rows_in.user_label        FROM unnest(data_in) as rows_in        ON CONFLICT ON CONSTRAINT productivity_detail_id_pkey DO UPDATE SET			source_record_row_counter = EXCLUDED.source_record_row_counter,			start_time_dts = EXCLUDED.start_time_dts,			source_table_number = EXCLUDED.source_table_number,			data_file_id = EXCLUDED.data_file_id,			user_id = EXCLUDED.user_id,			facility_id = EXCLUDED.facility_id,			assembly_inst = EXCLUDED.assembly_inst,			assembly_pack = EXCLUDED.assembly_pack,			assembly_tray = EXCLUDED.assembly_tray,			assembly_points = EXCLUDED.assembly_points,			assembly_seconds_trays = EXCLUDED.assembly_seconds_trays,			assembly_seconds_overall = EXCLUDED.assembly_seconds_overall,			pause_seconds = EXCLUDED.pause_seconds,			duration_seconds = EXCLUDED.duration_seconds,			placeholder_row = EXCLUDED.placeholder_row,			description = EXCLUDED.description,			year_and_month = EXCLUDED.year_and_month,			start_date = EXCLUDED.start_date,			time_label = EXCLUDED.time_label,			duration = EXCLUDED.duration,			pause_time = EXCLUDED.pause_time,			activity = EXCLUDED.activity,			user_label = EXCLUDED.user_label        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_push_audit_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_push_audit_v1 (data_in push_audit_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_push_audit_v1 (data_in push_audit_v1[])', '()', 'types_plus.insert_push_audit_v1 data_in push_audit_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_push_audit_v1''   and pg_get_function_identity_arguments(oid) = ''data_in push_audit_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_push_audit_v1 (data_in push_audit_v1[])', '()', 'types_plus.insert_push_audit_v1 data_in push_audit_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_push_audit_v1''   and pg_get_function_identity_arguments(oid) = ''data_in push_audit_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_push_audit_v1(data_in push_audit_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.WITHinserted_rows AS (        INSERT INTO dba.push_audit (            data_file_id,			duration_seconds,			records_count,			target_id, -- int4 link to dba.push_target, PG-side.			version_number,			start_local_dts,			end_local_dts,			end_utc_dts,			error_occurred,			client_user_name,			push_method_name,			error_text)        SELECT			rows_in.data_file_id,			rows_in.duration_seconds,			rows_in.records_count,			push_target_add_if_missing (			     rows_in.schema_name,			     rows_in.target_name,			     rows_in.unique_path,			     rows_in.target_type),			rows_in.version_number,			rows_in.start_local_dts,			rows_in.end_local_dts,			rows_in.end_utc_dts,			rows_in.error_occurred,			rows_in.client_user_name,			rows_in.push_method_name,			rows_in.error_text        FROM unnest(data_in) as rows_in        RETURNING 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_q_audit_step_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_q_audit_step_v1 (data_in q_audit_step_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_q_audit_step_v1 (data_in q_audit_step_v1[])', '()', 'types_plus.insert_q_audit_step_v1 data_in q_audit_step_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_q_audit_step_v1''   and pg_get_function_identity_arguments(oid) = ''data_in q_audit_step_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_q_audit_step_v1 (data_in q_audit_step_v1[])', '()', 'types_plus.insert_q_audit_step_v1 data_in q_audit_step_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_q_audit_step_v1''   and pg_get_function_identity_arguments(oid) = ''data_in q_audit_step_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_q_audit_step_v1(data_in q_audit_step_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO q_audit_step (			id,			hsys_id,			qsub_type_id_audit,			step,			marked_for_deletion,			last_updated_by_data_file_id,			created_dts,			updated_dts,			created_by,			updated_by,			sort,			qsub_type_id_event)                  SELECT			rows_in.id,			rows_in.hsys_id,			rows_in.qsub_type_id_audit,			rows_in.step,			rows_in.marked_for_deletion,			rows_in.last_updated_by_data_file_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.created_by,			rows_in.updated_by,			rows_in.sort,			rows_in.qsub_type_id_event                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			hsys_id = EXCLUDED.hsys_id,			qsub_type_id_audit = EXCLUDED.qsub_type_id_audit,			step = EXCLUDED.step,			marked_for_deletion = EXCLUDED.marked_for_deletion,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			sort = EXCLUDED.sort,			qsub_type_id_event = EXCLUDED.qsub_type_id_event          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_q_event_audit_step_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_q_event_audit_step_v1 (data_in q_event_audit_step_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_q_event_audit_step_v1 (data_in q_event_audit_step_v1[])', '()', 'types_plus.insert_q_event_audit_step_v1 data_in q_event_audit_step_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_q_event_audit_step_v1''   and pg_get_function_identity_arguments(oid) = ''data_in q_event_audit_step_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_q_event_audit_step_v1 (data_in q_event_audit_step_v1[])', '()', 'types_plus.insert_q_event_audit_step_v1 data_in q_event_audit_step_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_q_event_audit_step_v1''   and pg_get_function_identity_arguments(oid) = ''data_in q_event_audit_step_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_q_event_audit_step_v1(data_in q_event_audit_step_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO q_event_audit_step (			id,			qevent_id,			qaudit_step_id,			last_updated_by_data_file_id,			updated_dts,			created_dts,			sort,			marked_for_deletion,			is_coached,			notes,			created_by,			updated_by,			step,			qsub_type_id_event,			status)                  SELECT			rows_in.id,			rows_in.qevent_id,			rows_in.qaudit_step_id,			rows_in.last_updated_by_data_file_id,			rows_in.updated_dts,			rows_in.created_dts,			rows_in.sort,			rows_in.marked_for_deletion,			rows_in.is_coached,			rows_in.notes,			rows_in.created_by,			rows_in.updated_by,			rows_in.step,			rows_in.qsub_type_id_event,			rows_in.status                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			qevent_id = EXCLUDED.qevent_id,			qaudit_step_id = EXCLUDED.qaudit_step_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			updated_dts = EXCLUDED.updated_dts,			created_dts = EXCLUDED.created_dts,			sort = EXCLUDED.sort,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_coached = EXCLUDED.is_coached,			notes = EXCLUDED.notes,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			step = EXCLUDED.step,			qsub_type_id_event = EXCLUDED.qsub_type_id_event,			status = EXCLUDED.status          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_q_event_person_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_q_event_person_v1 (data_in q_event_person_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_q_event_person_v1 (data_in q_event_person_v1[])', '()', 'types_plus.insert_q_event_person_v1 data_in q_event_person_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_q_event_person_v1''   and pg_get_function_identity_arguments(oid) = ''data_in q_event_person_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_q_event_person_v1 (data_in q_event_person_v1[])', '()', 'types_plus.insert_q_event_person_v1 data_in q_event_person_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_q_event_person_v1''   and pg_get_function_identity_arguments(oid) = ''data_in q_event_person_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_q_event_person_v1(data_in q_event_person_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO q_event_person (			id,			web_user_id,			last_updated_by_data_file_id,			qevent_id,			created_dts,			updated_dts,			marked_for_deletion,			is_accountable,			send_email,			updated_by,			role_,			created_by)                  SELECT			rows_in.id,			rows_in.web_user_id,			rows_in.last_updated_by_data_file_id,			rows_in.qevent_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.marked_for_deletion,			rows_in.is_accountable,			rows_in.send_email,			rows_in.updated_by,			rows_in.role_,			rows_in.created_by                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			web_user_id = EXCLUDED.web_user_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			qevent_id = EXCLUDED.qevent_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_accountable = EXCLUDED.is_accountable,			send_email = EXCLUDED.send_email,			updated_by = EXCLUDED.updated_by,			role_ = EXCLUDED.role_,			created_by = EXCLUDED.created_by          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_q_event_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_q_event_v1 (data_in q_event_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_q_event_v1 (data_in q_event_v1[])', '()', 'types_plus.insert_q_event_v1 data_in q_event_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_q_event_v1''   and pg_get_function_identity_arguments(oid) = ''data_in q_event_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_q_event_v1 (data_in q_event_v1[])', '()', 'types_plus.insert_q_event_v1 data_in q_event_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_q_event_v1''   and pg_get_function_identity_arguments(oid) = ''data_in q_event_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_q_event_v1(data_in q_event_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO q_event (			or_surgeon_people_id,			id,			qtype_id,			qsub_type_id,			inv_id,			scan_id,			assembly_id,			status_when_user_id,			facility_id,			last_updated_by_data_file_id,			status_reported_by_user_id,			status_done_user_id,			status_investigating_user_id,			datetime_local,			status_done_dts,			status_when_dts,			status_investigating_dts,			status_reported_dts,			updated_dts,			created_dts,			or_delay_minutes,			marked_for_deletion,			is_data_problem,			is_process_problem,			assembly_audit_prods,			is_coached,			updated_by,			or_room,			status_done_name,			status,			status_when_name,			desc_,			status_investigating_name,			or_delay_type,			status_reported_by_name,			notes,			created_by)        SELECT			rows_in.or_surgeon_people_id,			rows_in.id,			rows_in.qtype_id,			rows_in.qsub_type_id,			rows_in.inv_id,			rows_in.scan_id,			rows_in.assembly_id,			rows_in.status_when_user_id,			rows_in.facility_id,			rows_in.last_updated_by_data_file_id,			rows_in.status_reported_by_user_id,			rows_in.status_done_user_id,			rows_in.status_investigating_user_id,			rows_in.datetime_local,			rows_in.status_done_dts,			rows_in.status_when_dts,			rows_in.status_investigating_dts,			rows_in.status_reported_dts,			rows_in.updated_dts,			rows_in.created_dts,			rows_in.or_delay_minutes,			rows_in.marked_for_deletion,			rows_in.is_data_problem,			rows_in.is_process_problem,			rows_in.assembly_audit_prods,			rows_in.is_coached,			rows_in.updated_by,			rows_in.or_room,			rows_in.status_done_name,			rows_in.status,			rows_in.status_when_name,			rows_in.desc_,			rows_in.status_investigating_name,			rows_in.or_delay_type,			rows_in.status_reported_by_name,			rows_in.notes,			rows_in.created_by        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			or_surgeon_people_id = EXCLUDED.or_surgeon_people_id,			qtype_id = EXCLUDED.qtype_id,			qsub_type_id = EXCLUDED.qsub_type_id,			inv_id = EXCLUDED.inv_id,			scan_id = EXCLUDED.scan_id,			assembly_id = EXCLUDED.assembly_id,			status_when_user_id = EXCLUDED.status_when_user_id,			facility_id = EXCLUDED.facility_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			status_reported_by_user_id = EXCLUDED.status_reported_by_user_id,			status_done_user_id = EXCLUDED.status_done_user_id,			status_investigating_user_id = EXCLUDED.status_investigating_user_id,			datetime_local = EXCLUDED.datetime_local,			status_done_dts = EXCLUDED.status_done_dts,			status_when_dts = EXCLUDED.status_when_dts,			status_investigating_dts = EXCLUDED.status_investigating_dts,			status_reported_dts = EXCLUDED.status_reported_dts,			updated_dts = EXCLUDED.updated_dts,			created_dts = EXCLUDED.created_dts,			or_delay_minutes = EXCLUDED.or_delay_minutes,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_data_problem = EXCLUDED.is_data_problem,			is_process_problem = EXCLUDED.is_process_problem,			assembly_audit_prods = EXCLUDED.assembly_audit_prods,			is_coached = EXCLUDED.is_coached,			updated_by = EXCLUDED.updated_by,			or_room = EXCLUDED.or_room,			status_done_name = EXCLUDED.status_done_name,			status = EXCLUDED.status,			status_when_name = EXCLUDED.status_when_name,			desc_ = EXCLUDED.desc_,			status_investigating_name = EXCLUDED.status_investigating_name,			or_delay_type = EXCLUDED.or_delay_type,			status_reported_by_name = EXCLUDED.status_reported_by_name,			notes = EXCLUDED.notes,			created_by = EXCLUDED.created_by        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_q_level_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_q_level_v1 (data_in q_level_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_q_level_v1 (data_in q_level_v1[])', '()', 'types_plus.insert_q_level_v1 data_in q_level_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_q_level_v1''   and pg_get_function_identity_arguments(oid) = ''data_in q_level_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_q_level_v1 (data_in q_level_v1[])', '()', 'types_plus.insert_q_level_v1 data_in q_level_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_q_level_v1''   and pg_get_function_identity_arguments(oid) = ''data_in q_level_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_q_level_v1(data_in q_level_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO q_level (			id,			hsys_id,			last_updated_by_data_file_id,			created_dts,			updated_dts,			level_,			marked_for_deletion,			created_by,			updated_by,			name_,			ascendco_name)                  SELECT			rows_in.id,			rows_in.hsys_id,			rows_in.last_updated_by_data_file_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.level_,			rows_in.marked_for_deletion,			rows_in.created_by,			rows_in.updated_by,			rows_in.name_,			rows_in.ascendco_name                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			hsys_id = EXCLUDED.hsys_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			level_ = EXCLUDED.level_,			marked_for_deletion = EXCLUDED.marked_for_deletion,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			name_ = EXCLUDED.name_,			ascendco_name = EXCLUDED.ascendco_name          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_q_subtype_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_q_subtype_v1 (data_in q_subtype_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_q_subtype_v1 (data_in q_subtype_v1[])', '()', 'types_plus.insert_q_subtype_v1 data_in q_subtype_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_q_subtype_v1''   and pg_get_function_identity_arguments(oid) = ''data_in q_subtype_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_q_subtype_v1 (data_in q_subtype_v1[])', '()', 'types_plus.insert_q_subtype_v1 data_in q_subtype_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_q_subtype_v1''   and pg_get_function_identity_arguments(oid) = ''data_in q_subtype_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_q_subtype_v1(data_in q_subtype_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO q_subtype (			id,			qtype_id,			qlevel_id,			facility_group_id,			facility_id,			hsys_id,			last_updated_by_data_file_id,			created_dts,			updated_dts,			is_available_in_assembly,			is_available_in_decon,			marked_for_deletion,			is_for_inv,			is_active,			ascendco_name,			updated_by,			type_,			available_for,			created_by,			name_,			item_type_ids)        SELECT			rows_in.id,			rows_in.qtype_id,			rows_in.qlevel_id,			rows_in.facility_group_id,			rows_in.facility_id,			rows_in.hsys_id,			rows_in.last_updated_by_data_file_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.is_available_in_assembly,			rows_in.is_available_in_decon,			rows_in.marked_for_deletion,			rows_in.is_for_inv,			rows_in.is_active,			rows_in.ascendco_name,			rows_in.updated_by,			rows_in.type_,			rows_in.available_for,			rows_in.created_by,			rows_in.name_,			rows_in.item_type_ids        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			qtype_id = EXCLUDED.qtype_id,			qlevel_id = EXCLUDED.qlevel_id,			facility_group_id = EXCLUDED.facility_group_id,			facility_id = EXCLUDED.facility_id,			hsys_id = EXCLUDED.hsys_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			is_available_in_assembly = EXCLUDED.is_available_in_assembly,			is_available_in_decon = EXCLUDED.is_available_in_decon,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_for_inv = EXCLUDED.is_for_inv,			is_active = EXCLUDED.is_active,			ascendco_name = EXCLUDED.ascendco_name,			updated_by = EXCLUDED.updated_by,			type_ = EXCLUDED.type_,			available_for = EXCLUDED.available_for,			created_by = EXCLUDED.created_by,			name_ = EXCLUDED.name_,			item_type_ids = EXCLUDED.item_type_ids        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_q_type_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_q_type_v1 (data_in q_type_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_q_type_v1 (data_in q_type_v1[])', '()', 'types_plus.insert_q_type_v1 data_in q_type_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_q_type_v1''   and pg_get_function_identity_arguments(oid) = ''data_in q_type_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_q_type_v1 (data_in q_type_v1[])', '()', 'types_plus.insert_q_type_v1 data_in q_type_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_q_type_v1''   and pg_get_function_identity_arguments(oid) = ''data_in q_type_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_q_type_v1(data_in q_type_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO q_type (			id,			hsys_id,			last_updated_by_data_file_id,			created_dts,			updated_dts,			marked_for_deletion,			is_active,			updated_by,			created_by,			ascendco_name,			name_,			type_)                  SELECT			rows_in.id,			rows_in.hsys_id,			rows_in.last_updated_by_data_file_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.marked_for_deletion,			rows_in.is_active,			rows_in.updated_by,			rows_in.created_by,			rows_in.ascendco_name,			rows_in.name_,			rows_in.type_                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			hsys_id = EXCLUDED.hsys_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_active = EXCLUDED.is_active,			updated_by = EXCLUDED.updated_by,			created_by = EXCLUDED.created_by,			ascendco_name = EXCLUDED.ascendco_name,			name_ = EXCLUDED.name_,			type_ = EXCLUDED.type_          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_rep_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_rep_v1 (data_in rep_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_rep_v1 (data_in rep_v1[])', '()', 'types_plus.insert_rep_v1 data_in rep_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_rep_v1''   and pg_get_function_identity_arguments(oid) = ''data_in rep_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_rep_v1 (data_in rep_v1[])', '()', 'types_plus.insert_rep_v1 data_in rep_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_rep_v1''   and pg_get_function_identity_arguments(oid) = ''data_in rep_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_rep_v1(data_in rep_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO rep (			id,			user_id,			hsys_id,			sup_id,			created_dts,			updated_dts,			marked_for_deletion,			name_,			phone,			email,			created_by,			updated_by)                  SELECT			rows_in.id,			rows_in.user_id,			rows_in.hsys_id,			rows_in.sup_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.marked_for_deletion,			rows_in.name_,			rows_in.phone,			rows_in.email,			rows_in.created_by,			rows_in.updated_by                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			user_id = EXCLUDED.user_id,			hsys_id = EXCLUDED.hsys_id,			sup_id = EXCLUDED.sup_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			marked_for_deletion = EXCLUDED.marked_for_deletion,			name_ = EXCLUDED.name_,			phone = EXCLUDED.phone,			email = EXCLUDED.email,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_specialty_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_specialty_v1 (data_in specialty_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_specialty_v1 (data_in specialty_v1[])', '()', 'types_plus.insert_specialty_v1 data_in specialty_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_specialty_v1''   and pg_get_function_identity_arguments(oid) = ''data_in specialty_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_specialty_v1 (data_in specialty_v1[])', '()', 'types_plus.insert_specialty_v1 data_in specialty_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_specialty_v1''   and pg_get_function_identity_arguments(oid) = ''data_in specialty_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_specialty_v1(data_in specialty_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO specialty (			id,			data_file_id,			marked_for_deletion,			name_,			name_short)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.name_,			rows_in.name_short        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			name_ = EXCLUDED.name_,			name_short = EXCLUDED.name_short        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_stat_facility_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_stat_facility_v1 (data_in stat_facility_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_stat_facility_v1 (data_in stat_facility_v1[])', '()', 'types_plus.insert_stat_facility_v1 data_in stat_facility_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_stat_facility_v1''   and pg_get_function_identity_arguments(oid) = ''data_in stat_facility_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_stat_facility_v1 (data_in stat_facility_v1[])', '()', 'types_plus.insert_stat_facility_v1 data_in stat_facility_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_stat_facility_v1''   and pg_get_function_identity_arguments(oid) = ''data_in stat_facility_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_stat_facility_v1(data_in stat_facility_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO stat_facility (			id,			facility_id,			hsys_id,			date_,			category,			item_type,			stat_type,			is_most_recent,			in_data_cleanse_scope,			items_inactive,			items_count,			items_qty,			items_inventoried,			items_to_inventory,			items_named,			items_to_name,			inst_qty,			items_has_loc,			items_missing_locs,			item_prods_count,			item_prods_missing_part_nos_thier,			item_prods_missing_vendors_thier,			item_prods_dr_pref,			item_prods_critical,			item_prods_not_linked,			item_prods_missing_part_nos,			item_prods_missing_vendors,			item_prods_cant_determine,			item_prods_linked,			sup_prods_count,			sups_count,			prods_count,			prods_with_pic,			prods_without_pic,			item_prods_verified,			item_prods_expert_linked,			item_prods_dup_names_their,			item_prods_dup_names,			prods_named,			part_nos_fixed,			invs_inactive,			invs_count,			invs_found,			emr_items_count,			emr_items_linked,			emr_items_matches_their_name,			emr_items_matches_our_name,			emr_items_no_match_their_name,			emr_items_no_match_our_name,			emr_items_dups)        SELECT			rows_in.id,			rows_in.facility_id,			rows_in.hsys_id,			rows_in.date_,			rows_in.category,			rows_in.item_type,			rows_in.stat_type,			rows_in.is_most_recent,			rows_in.in_data_cleanse_scope,			rows_in.items_inactive,			rows_in.items_count,			rows_in.items_qty,			rows_in.items_inventoried,			rows_in.items_to_inventory,			rows_in.items_named,			rows_in.items_to_name,			rows_in.inst_qty,			rows_in.items_has_loc,			rows_in.items_missing_locs,			rows_in.item_prods_count,			rows_in.item_prods_missing_part_nos_thier,			rows_in.item_prods_missing_vendors_thier,			rows_in.item_prods_dr_pref,			rows_in.item_prods_critical,			rows_in.item_prods_not_linked,			rows_in.item_prods_missing_part_nos,			rows_in.item_prods_missing_vendors,			rows_in.item_prods_cant_determine,			rows_in.item_prods_linked,			rows_in.sup_prods_count,			rows_in.sups_count,			rows_in.prods_count,			rows_in.prods_with_pic,			rows_in.prods_without_pic,			rows_in.item_prods_verified,			rows_in.item_prods_expert_linked,			rows_in.item_prods_dup_names_their,			rows_in.item_prods_dup_names,			rows_in.prods_named,			rows_in.part_nos_fixed,			rows_in.invs_inactive,			rows_in.invs_count,			rows_in.invs_found,			rows_in.emr_items_count,			rows_in.emr_items_linked,			rows_in.emr_items_matches_their_name,			rows_in.emr_items_matches_our_name,			rows_in.emr_items_no_match_their_name,			rows_in.emr_items_no_match_our_name,			rows_in.emr_items_dups        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			facility_id = EXCLUDED.facility_id,			hsys_id = EXCLUDED.hsys_id,			date_ = EXCLUDED.date_,			category = EXCLUDED.category,			item_type = EXCLUDED.item_type,			stat_type = EXCLUDED.stat_type,			is_most_recent = EXCLUDED.is_most_recent,			in_data_cleanse_scope = EXCLUDED.in_data_cleanse_scope,			items_inactive = EXCLUDED.items_inactive,			items_count = EXCLUDED.items_count,			items_qty = EXCLUDED.items_qty,			items_inventoried = EXCLUDED.items_inventoried,			items_to_inventory = EXCLUDED.items_to_inventory,			items_named = EXCLUDED.items_named,			items_to_name = EXCLUDED.items_to_name,			inst_qty = EXCLUDED.inst_qty,			items_has_loc = EXCLUDED.items_has_loc,			items_missing_locs = EXCLUDED.items_missing_locs,			item_prods_count = EXCLUDED.item_prods_count,			item_prods_missing_part_nos_thier = EXCLUDED.item_prods_missing_part_nos_thier,			item_prods_missing_vendors_thier = EXCLUDED.item_prods_missing_vendors_thier,			item_prods_dr_pref = EXCLUDED.item_prods_dr_pref,			item_prods_critical = EXCLUDED.item_prods_critical,			item_prods_not_linked = EXCLUDED.item_prods_not_linked,			item_prods_missing_part_nos = EXCLUDED.item_prods_missing_part_nos,			item_prods_missing_vendors = EXCLUDED.item_prods_missing_vendors,			item_prods_cant_determine = EXCLUDED.item_prods_cant_determine,			item_prods_linked = EXCLUDED.item_prods_linked,			sup_prods_count = EXCLUDED.sup_prods_count,			sups_count = EXCLUDED.sups_count,			prods_count = EXCLUDED.prods_count,			prods_with_pic = EXCLUDED.prods_with_pic,			prods_without_pic = EXCLUDED.prods_without_pic,			item_prods_verified = EXCLUDED.item_prods_verified,			item_prods_expert_linked = EXCLUDED.item_prods_expert_linked,			item_prods_dup_names_their = EXCLUDED.item_prods_dup_names_their,			item_prods_dup_names = EXCLUDED.item_prods_dup_names,			prods_named = EXCLUDED.prods_named,			part_nos_fixed = EXCLUDED.part_nos_fixed,			invs_inactive = EXCLUDED.invs_inactive,			invs_count = EXCLUDED.invs_count,			invs_found = EXCLUDED.invs_found,			emr_items_count = EXCLUDED.emr_items_count,			emr_items_linked = EXCLUDED.emr_items_linked,			emr_items_matches_their_name = EXCLUDED.emr_items_matches_their_name,			emr_items_matches_our_name = EXCLUDED.emr_items_matches_our_name,			emr_items_no_match_their_name = EXCLUDED.emr_items_no_match_their_name,			emr_items_no_match_our_name = EXCLUDED.emr_items_no_match_our_name,			emr_items_dups = EXCLUDED.emr_items_dups        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_sterilize_method_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_sterilize_method_v1 (data_in sterilize_method_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_sterilize_method_v1 (data_in sterilize_method_v1[])', '()', 'types_plus.insert_sterilize_method_v1 data_in sterilize_method_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_sterilize_method_v1''   and pg_get_function_identity_arguments(oid) = ''data_in sterilize_method_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_sterilize_method_v1 (data_in sterilize_method_v1[])', '()', 'types_plus.insert_sterilize_method_v1 data_in sterilize_method_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_sterilize_method_v1''   and pg_get_function_identity_arguments(oid) = ''data_in sterilize_method_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_sterilize_method_v1(data_in sterilize_method_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO sterilize_method (			id,			data_file_id,			marked_for_deletion,			name_)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.name_        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			name_ = EXCLUDED.name_        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_sterilize_params_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_sterilize_params_v1 (data_in sterilize_params_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_sterilize_params_v1 (data_in sterilize_params_v1[])', '()', 'types_plus.insert_sterilize_params_v1 data_in sterilize_params_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_sterilize_params_v1''   and pg_get_function_identity_arguments(oid) = ''data_in sterilize_params_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_sterilize_params_v1 (data_in sterilize_params_v1[])', '()', 'types_plus.insert_sterilize_params_v1 data_in sterilize_params_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_sterilize_params_v1''   and pg_get_function_identity_arguments(oid) = ''data_in sterilize_params_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_sterilize_params_v1(data_in sterilize_params_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO sterilize_params (			id,			data_file_id,			marked_for_deletion,			hsys_id,			sterilize_method_id,			name_)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.hsys_id,			rows_in.sterilize_method_id,			rows_in.name_        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			hsys_id = EXCLUDED.hsys_id,			sterilize_method_id = EXCLUDED.sterilize_method_id,			name_ = EXCLUDED.name_        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_sterilizer_load_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_sterilizer_load_v1 (data_in sterilizer_load_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_sterilizer_load_v1 (data_in sterilizer_load_v1[])', '()', 'types_plus.insert_sterilizer_load_v1 data_in sterilizer_load_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_sterilizer_load_v1''   and pg_get_function_identity_arguments(oid) = ''data_in sterilizer_load_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_sterilizer_load_v1 (data_in sterilizer_load_v1[])', '()', 'types_plus.insert_sterilizer_load_v1 data_in sterilizer_load_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_sterilizer_load_v1''   and pg_get_function_identity_arguments(oid) = ''data_in sterilizer_load_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_sterilizer_load_v1(data_in sterilizer_load_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO sterilizer_load (			id,			data_file_id,			marked_for_deletion,			sterilize_method_id,			sterilizer_id,			sterilize_params_id,			created_dts,			load_no,			status_building_dts,			status_sterilizing_dts,			status_cooling_dts,			status_done_dts,			notes,			failed_notes,			utcoffset_seconds)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.sterilize_method_id,			rows_in.sterilizer_id,			rows_in.sterilize_params_id,			rows_in.created_dts,			rows_in.load_no,			rows_in.status_building_dts,			rows_in.status_sterilizing_dts,			rows_in.status_cooling_dts,			rows_in.status_done_dts,			rows_in.notes,			rows_in.failed_notes,			rows_in.utcoffset_seconds        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			sterilize_method_id = EXCLUDED.sterilize_method_id,			sterilizer_id = EXCLUDED.sterilizer_id,			sterilize_params_id = EXCLUDED.sterilize_params_id,			created_dts = EXCLUDED.created_dts,			load_no = EXCLUDED.load_no,			status_building_dts = EXCLUDED.status_building_dts,			status_sterilizing_dts = EXCLUDED.status_sterilizing_dts,			status_cooling_dts = EXCLUDED.status_cooling_dts,			status_done_dts = EXCLUDED.status_done_dts,			notes = EXCLUDED.notes,			failed_notes = EXCLUDED.failed_notes,			utcoffset_seconds = EXCLUDED.utcoffset_seconds        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_sterilizer_load_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_sterilizer_load_v2 (data_in sterilizer_load_v2[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_sterilizer_load_v2 (data_in sterilizer_load_v2[])', '()', 'types_plus.insert_sterilizer_load_v2 data_in sterilizer_load_v2[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_sterilizer_load_v2''   and pg_get_function_identity_arguments(oid) = ''data_in sterilizer_load_v2[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_sterilizer_load_v2 (data_in sterilizer_load_v2[])', '()', 'types_plus.insert_sterilizer_load_v2 data_in sterilizer_load_v2[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_sterilizer_load_v2''   and pg_get_function_identity_arguments(oid) = ''data_in sterilizer_load_v2[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_sterilizer_load_v2(data_in sterilizer_load_v2[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO sterilizer_load (			id,			data_file_id,			marked_for_deletion,			sterilize_method_id,			sterilizer_id,			sterilize_params_id,			created_dts,			load_no,			status_building_dts,			status_sterilizing_dts,			status_cooling_dts,			status_done_dts,			notes,			failed_notes,			utcoffset_seconds)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.sterilize_method_id,			rows_in.sterilizer_id,			rows_in.sterilize_params_id,			rows_in.created_dts,			rows_in.load_no,			rows_in.status_building_dts,			rows_in.status_sterilizing_dts,			rows_in.status_cooling_dts,			rows_in.status_done_dts,			rows_in.notes,			rows_in.failed_notes,			rows_in.utcoffset_seconds        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			sterilize_method_id = EXCLUDED.sterilize_method_id,			sterilizer_id = EXCLUDED.sterilizer_id,			sterilize_params_id = EXCLUDED.sterilize_params_id,			created_dts = EXCLUDED.created_dts,			load_no = EXCLUDED.load_no,			status_building_dts = EXCLUDED.status_building_dts,			status_sterilizing_dts = EXCLUDED.status_sterilizing_dts,			status_cooling_dts = EXCLUDED.status_cooling_dts,			status_done_dts = EXCLUDED.status_done_dts,			notes = EXCLUDED.notes,			failed_notes = EXCLUDED.failed_notes,			utcoffset_seconds = EXCLUDED.utcoffset_seconds        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_sterilizer_log_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_sterilizer_log_v1 (data_in sterilizer_log_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_sterilizer_log_v1 (data_in sterilizer_log_v1[])', '()', 'types_plus.insert_sterilizer_log_v1 data_in sterilizer_log_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_sterilizer_log_v1''   and pg_get_function_identity_arguments(oid) = ''data_in sterilizer_log_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_sterilizer_log_v1 (data_in sterilizer_log_v1[])', '()', 'types_plus.insert_sterilizer_log_v1 data_in sterilizer_log_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_sterilizer_log_v1''   and pg_get_function_identity_arguments(oid) = ''data_in sterilizer_log_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_sterilizer_log_v1(data_in sterilizer_log_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO sterilizer_log (			id,			data_file_id,			log_type,			summary_json,			log_xml)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.log_type,			rows_in.summary_json,			rows_in.log_xml        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			log_type = EXCLUDED.log_type,			summary_json = EXCLUDED.summary_json,			log_xml = EXCLUDED.log_xml        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_sterilizer_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_sterilizer_v1 (data_in sterilizer_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_sterilizer_v1 (data_in sterilizer_v1[])', '()', 'types_plus.insert_sterilizer_v1 data_in sterilizer_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_sterilizer_v1''   and pg_get_function_identity_arguments(oid) = ''data_in sterilizer_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_sterilizer_v1 (data_in sterilizer_v1[])', '()', 'types_plus.insert_sterilizer_v1 data_in sterilizer_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_sterilizer_v1''   and pg_get_function_identity_arguments(oid) = ''data_in sterilizer_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_sterilizer_v1(data_in sterilizer_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO sterilizer (			id,			data_file_id,			marked_for_deletion,			facility_id,			sterilize_method_id,			name_)                  SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.facility_id,			rows_in.sterilize_method_id,			rows_in.name_                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			facility_id = EXCLUDED.facility_id,			sterilize_method_id = EXCLUDED.sterilize_method_id,			name_ = EXCLUDED.name_          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_sup_parent_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_sup_parent_v1 (data_in sup_parent_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_sup_parent_v1 (data_in sup_parent_v1[])', '()', 'types_plus.insert_sup_parent_v1 data_in sup_parent_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_sup_parent_v1''   and pg_get_function_identity_arguments(oid) = ''data_in sup_parent_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_sup_parent_v1 (data_in sup_parent_v1[])', '()', 'types_plus.insert_sup_parent_v1 data_in sup_parent_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_sup_parent_v1''   and pg_get_function_identity_arguments(oid) = ''data_in sup_parent_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_sup_parent_v1(data_in sup_parent_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO sup_parent (			id,			created_dts,			updated_dts,			marked_for_deletion,			name_,			created_by,			updated_by)                  SELECT			rows_in.id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.marked_for_deletion,			rows_in.name_,			rows_in.created_by,			rows_in.updated_by                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			marked_for_deletion = EXCLUDED.marked_for_deletion,			name_ = EXCLUDED.name_,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_sup_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_sup_v2 (data_in sup_v2[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_sup_v2 (data_in sup_v2[])', '()', 'types_plus.insert_sup_v2 data_in sup_v2[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_sup_v2''   and pg_get_function_identity_arguments(oid) = ''data_in sup_v2[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_sup_v2 (data_in sup_v2[])', '()', 'types_plus.insert_sup_v2 data_in sup_v2[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_sup_v2''   and pg_get_function_identity_arguments(oid) = ''data_in sup_v2[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_sup_v2(data_in sup_v2[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO sup (			id,			custom_facility_id,			sup_parent_id,			created_dts,			updated_dts,			is_custom_by_facility,			marked_for_deletion,			is_available_for_loaners,			name_,			created_by,			updated_by,			short_name)                  SELECT			rows_in.id,			rows_in.custom_facility_id,			rows_in.sup_parent_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.is_custom_by_facility,			rows_in.marked_for_deletion,			rows_in.is_available_for_loaners,			rows_in.name_,			rows_in.created_by,			rows_in.updated_by,			rows_in.short_name                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			custom_facility_id = EXCLUDED.custom_facility_id,			sup_parent_id = EXCLUDED.sup_parent_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			is_custom_by_facility = EXCLUDED.is_custom_by_facility,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_available_for_loaners = EXCLUDED.is_available_for_loaners,			name_ = EXCLUDED.name_,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			short_name = EXCLUDED.short_name          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_text_collection_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_text_collection_v1 (data_in text_text[], mark_for_retention_in boolean, facility_id_in uuid, collection_name_in citext) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_text_collection_v1 (data_in text_text[], mark_for_retention_in boolean, facility_id_in uuid, collection_name_in citext)', '()', 'types_plus.insert_text_collection_v1 data_in text_text[], mark_for_retention_in boolean, facility_id_in uuid, collection_name_in citext existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_text_collection_v1''   and pg_get_function_identity_arguments(oid) = ''data_in text_text[], mark_for_retention_in boolean, facility_id_in uuid, collection_name_in citext'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_text_collection_v1 (data_in text_text[], mark_for_retention_in boolean, facility_id_in uuid, collection_name_in citext)', '()', 'types_plus.insert_text_collection_v1 data_in text_text[], mark_for_retention_in boolean, facility_id_in uuid, collection_name_in citext definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_text_collection_v1''   and pg_get_function_identity_arguments(oid) = ''data_in text_text[], mark_for_retention_in boolean, facility_id_in uuid, collection_name_in citext'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_text_collection_v1(data_in text_text[], mark_for_retention_in boolean DEFAULT false, facility_id_in uuid DEFAULT ''00000000-0000-0000-0000-000000000000''::uuid, collection_name_in citext DEFAULT ''''::citext) RETURNS uuid LANGUAGE sqlAS $function$-- First, add the new collection and get back its ID for use in the rest of the script.WITH new_collection AS (  INSERT INTO text_collection (              retain,              facility_id,              collection_name)    VALUES (mark_for_retention_in,            facility_id_in,            collection_name_in)-- Note: ON CONFLICT on a partial index requires the WHERE clause to be repeated here in ON CONFLICT.ON CONFLICT (collection_name) WHERE collection_name <> '''' DO UPDATE SET            retain      = EXCLUDED.retain,            facility_id = EXCLUDED.facility_idRETURNING id)-- Now, unpack the incoming array of strings, and insert each one into-- text_collectoin_item, along with the ID of the text_collection just created.INSERT INTO text_collection_item (   	   collection_id,       text,       source_id)SELECT DISTINCT ON (rows_in.text)      new_collection.id,      rows_in.text,      rows_in.id FROM new_collection,      unnest(data_in) as rows_in -- Silently remove duplicate strings from the list. ON CONFLICT (collection_id, text) DO UPDATE SET      source_id = EXCLUDED.source_id-- Everything is done, return the new collection''s ID to the client. -- RETURNING is a *very* cool Postgres extension to standard SQL. -- Earlier, we used it to get the new ID out of the CTE for reuse -- by the main query. Now, we''re returning that ID to the client -- for whatever purpose they have.RETURNING collection_id;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_web_user_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_web_user_v1 (data_in web_user_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_web_user_v1 (data_in web_user_v1[])', '()', 'types_plus.insert_web_user_v1 data_in web_user_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_web_user_v1''   and pg_get_function_identity_arguments(oid) = ''data_in web_user_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_web_user_v1 (data_in web_user_v1[])', '()', 'types_plus.insert_web_user_v1 data_in web_user_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_web_user_v1''   and pg_get_function_identity_arguments(oid) = ''data_in web_user_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_web_user_v1(data_in web_user_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO web_user (			id,			data_file_id,			marked_for_deletion,			hsys_id,			username,			role_,			name_first,			name_last,			name_full)                  SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.hsys_id,			rows_in.username,			rows_in.role_,			rows_in.name_first,			rows_in.name_last,			rows_in.name_full                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			hsys_id = EXCLUDED.hsys_id,			username = EXCLUDED.username,			role_ = EXCLUDED.role_,			name_first = EXCLUDED.name_first,			name_last = EXCLUDED.name_last,			name_full = EXCLUDED.name_full          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:insert_web_user_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.insert_web_user_v2 (data_in web_user_v2[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_web_user_v2 (data_in web_user_v2[])', '()', 'types_plus.insert_web_user_v2 data_in web_user_v2[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_web_user_v2''   and pg_get_function_identity_arguments(oid) = ''data_in web_user_v2[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_web_user_v2 (data_in web_user_v2[])', '()', 'types_plus.insert_web_user_v2 data_in web_user_v2[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_web_user_v2''   and pg_get_function_identity_arguments(oid) = ''data_in web_user_v2[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_web_user_v2(data_in web_user_v2[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO web_user (			id,			data_file_id,			hsys_id,			is_sonar_ascendco_support,			marked_for_deletion,			name_first,			role_,			username,			name_full,			name_last)                  SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.hsys_id,			rows_in.is_sonar_ascendco_support,			rows_in.marked_for_deletion,			rows_in.name_first,			rows_in.role_,			rows_in.username,			rows_in.name_full,			rows_in.name_last                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			hsys_id = EXCLUDED.hsys_id,			is_sonar_ascendco_support = EXCLUDED.is_sonar_ascendco_support,			marked_for_deletion = EXCLUDED.marked_for_deletion,			name_first = EXCLUDED.name_first,			role_ = EXCLUDED.role_,			username = EXCLUDED.username,			name_full = EXCLUDED.name_full,			name_last = EXCLUDED.name_last          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:interval_generator.tests.sql------------------------------------------------------------------------------------- Checks for tools.interval_generator (start_ts timestamp with time zone, end_ts timestamp with time zone, round_interval interval) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'interval_generator (start_ts timestamp with time zone, end_ts timestamp with time zone, round_interval interval)', '()', 'tools.interval_generator start_ts timestamp with time zone, end_ts timestamp with time zone, round_interval interval existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''interval_generator''   and pg_get_function_identity_arguments(oid) = ''start_ts timestamp with time zone, end_ts timestamp with time zone, round_interval interval'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'interval_generator (start_ts timestamp with time zone, end_ts timestamp with time zone, round_interval interval)', '()', 'tools.interval_generator start_ts timestamp with time zone, end_ts timestamp with time zone, round_interval interval definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''interval_generator''   and pg_get_function_identity_arguments(oid) = ''start_ts timestamp with time zone, end_ts timestamp with time zone, round_interval interval'';', 'CREATE OR REPLACE FUNCTION tools.interval_generator(start_ts timestamp with time zone, end_ts timestamp with time zone, round_interval interval) RETURNS TABLE(start_time timestamp with time zone, end_time timestamp with time zone) LANGUAGE plpgsqlAS $function$BEGINRETURN QUERY        select            (n)       start_time,            (n + round_interval) end_time        from generate_series(date_trunc(''minute'', start_ts), end_ts, round_interval) n;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:inv_getdesc.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.inv_getdesc (inv_id_in uuid, item_name_in citext) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'inv_getdesc (inv_id_in uuid, item_name_in citext)', '()', 'ascendco.inv_getdesc inv_id_in uuid, item_name_in citext existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''inv_getdesc''   and pg_get_function_identity_arguments(oid) = ''inv_id_in uuid, item_name_in citext'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'inv_getdesc (inv_id_in uuid, item_name_in citext)', '()', 'ascendco.inv_getdesc inv_id_in uuid, item_name_in citext definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''inv_getdesc''   and pg_get_function_identity_arguments(oid) = ''inv_id_in uuid, item_name_in citext'';', 'CREATE OR REPLACE FUNCTION ascendco.inv_getdesc(inv_id_in uuid, item_name_in citext DEFAULT NULL::citext) RETURNS citext LANGUAGE plpgsql STABLEAS $function$---------------------------------------------------------------------------- Set up the variables---------------------------------------------------------------------------DECLARE    final_out citext := '''';    v_inv_id        uuid   := ''00000000-0000-0000-0000-000000000000'';    v_inv_no        citext := '''';    v_item_id       uuid   := ''00000000-0000-0000-0000-000000000000'';    v_their_name    citext := '''';    v_serial_no     citext := '''';    v_item_name     citext := '''';  -- Gets either $2 or lookup value.    v_description   citext := '''';BEGIN    final_out := '''';---------------------------------------------------------------------------- Load the necessary inv and item data, either from params or search----------------------------------------------------------------------------- No matter what, we need some details out of inv. Use COALESCE to avoid NULL checks later in the routine.    SELECT COALESCE (         id, ''00000000-0000-0000-0000-000000000000''),           COALESCE (     inv_no,  ''''),           COALESCE (    item_id, ''00000000-0000-0000-0000-000000000000''),           COALESCE ( their_name, ''''),           COALESCE (  serial_no, '''')      INTO v_inv_id,           v_inv_no,           v_item_id,           v_their_name,           v_serial_no      FROM ascendco.inv      WHERE id = inv_id_in; -- Reminder: It''s impossible to run this routine without a valid-looking UUID in $1. PG won''t even try.-- Three term COALESCE ($2, subquery, '''') to get either a name from $2, a lookup value, or an empty string, if all else fails.-- This may be subtly different from the 4D original, which doesn''t appear to look up on an empty input.v_item_name = COALESCE                (item_name_in,                (SELECT name_ FROM ascendco.item WHERE item.id = v_item_id),                '''');IF (v_item_name = '''') THEN    v_item_name := ''NotLinked '' || v_their_name;END IF;IF (v_inv_no <> '''') THEN    v_description := v_item_name || '' - '' || v_inv_no;ELSE    v_description := v_item_name;END IF;IF (v_serial_no <> '''') THEN    v_description := v_description || '' ('' || v_serial_no || '')'';END IF;-- Eh? For some reason, I could *not* get serial number to concatenate into final_out directly...had to go with intermediate variable.  ¬Ø\_(„ÉÑ)_/¬Øfinal_out := v_description;-- Bit of console-like reporting for debugging./*RAISE NOTICE ''value of inv_id_in :       %'', inv_id_in;RAISE NOTICE ''value item_name_in :       %'', item_name_in;RAISE NOTICE ''value of v_inv_id :        %'', v_inv_id;RAISE NOTICE ''value of v_inv_no :        %'', v_inv_no;RAISE NOTICE ''value of v_item_id :       %'', v_item_id;RAISE NOTICE ''value of v_their_name :    %'', v_their_name;RAISE NOTICE ''value of v_item_name :     %'', v_item_name;RAISE NOTICE ''value of v_serial_no :     %'', v_serial_no;RAISE NOTICE ''value of v_description :   %'', v_description;RAISE NOTICE ''value of final_out :       %'', final_out;*/RETURN final_out;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:inv_to_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.inv_to_v2 (inv_in inv) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'inv_to_v2 (inv_in inv)', '()', 'types_plus.inv_to_v2 inv_in inv existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''inv_to_v2''   and pg_get_function_identity_arguments(oid) = ''inv_in inv'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'inv_to_v2 (inv_in inv)', '()', 'types_plus.inv_to_v2 inv_in inv definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''inv_to_v2''   and pg_get_function_identity_arguments(oid) = ''inv_in inv'';', 'CREATE OR REPLACE FUNCTION types_plus.inv_to_v2(inv_in inv) RETURNS inv_v2 LANGUAGE sqlAS $function$                   SELECT			inv_in.id,			inv_in.item_id,			inv_in.item_arch_id,			inv_in.facility_location_id,			inv_in.standard_faclity_id,			inv_in.store_at_facility_id,			inv_in.created_dts,			inv_in.updated_dts,			inv_in.serial_no_as_of_dts,			inv_in.qty,			inv_in.flow,			inv_in.flow_long,			inv_in.par,			inv_in.last_seen_date,			inv_in.their_next_repair_date,			inv_in.last_sterilized_date,			inv_in.repair_last_repair_date,			inv_in.is_searched_but_not_found,			inv_in.marked_for_deletion,			inv_in.is_found,			inv_in.is_go_live_perm_printed,			inv_in.is_sleeping,			inv_in.is_handwritten_label,			inv_in.is_wrong_loc,			inv_in.is_facility_loc_inherited,			inv_in.needs_repair,			inv_in.is_deactivated,			inv_in.is_contents_incomplete,			inv_in.their_location,			inv_in.category,			inv_in.their_name,			inv_in.their_id,			inv_in.created_by,			inv_in.updated_by,			inv_in.their_id_scrubbed,			inv_in.crossing_status,			inv_in.inv_no,			inv_in.their_raw_name,			inv_in.comments_,			inv_in.their_bar_code,			inv_in.loc_rack,			inv_in.loc_row,			inv_in.loc_bin,			inv_in.loc_note,			inv_in.serial_no,			inv_in.data_cleanse_classification,			inv_in.repair_next_due,			inv_in.repair_last_repaired_by,			inv_in.msgs               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:item_arch_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.item_arch_to_v1 (item_arch_in item_arch) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'item_arch_to_v1 (item_arch_in item_arch)', '()', 'types_plus.item_arch_to_v1 item_arch_in item_arch existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''item_arch_to_v1''   and pg_get_function_identity_arguments(oid) = ''item_arch_in item_arch'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'item_arch_to_v1 (item_arch_in item_arch)', '()', 'types_plus.item_arch_to_v1 item_arch_in item_arch definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''item_arch_to_v1''   and pg_get_function_identity_arguments(oid) = ''item_arch_in item_arch'';', 'CREATE OR REPLACE FUNCTION types_plus.item_arch_to_v1(item_arch_in item_arch) RETURNS item_arch_v1 LANGUAGE sqlAS $function$                   SELECT			item_arch_in.id,			item_arch_in.facility_id,			item_arch_in.clinic_id,			item_arch_in.created_dts,			item_arch_in.updated_dts,			item_arch_in.previous_as_of,			item_arch_in.marked_for_deletion,			item_arch_in.is_current,			item_arch_in.name_,			item_arch_in.type_,			item_arch_in.created_by,			item_arch_in.updated_by               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:item_to_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.item_to_v2 (item_in item) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'item_to_v2 (item_in item)', '()', 'types_plus.item_to_v2 item_in item existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''item_to_v2''   and pg_get_function_identity_arguments(oid) = ''item_in item'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'item_to_v2 (item_in item)', '()', 'types_plus.item_to_v2 item_in item definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''item_to_v2''   and pg_get_function_identity_arguments(oid) = ''item_in item'';', 'CREATE OR REPLACE FUNCTION types_plus.item_to_v2(item_in item) RETURNS item_v2 LANGUAGE sqlAS $function$                   SELECT			item_in.id,			item_in.item_arch_id,			item_in.facility_specialty_id,			item_in.item_uu_id_across_item_archs,			item_in.inv_responsible_user_id,			item_in.facility_department_id,			item_in.specialty_id,			item_in.sup_id,			item_in.dr_people_id,			item_in.item_type_id,			item_in.item_master_link_id,			item_in.facility_location_id,			item_in.clinic_id,			item_in.hsys_tag_id,			item_in.name_copied_from_prod_id,			item_in.created_dts,			item_in.updated_dts,			item_in.named_dts,			item_in.needs_sched_sync_as_of_dts,			item_in.weight_lb,			item_in.qty,			item_in.flow,			item_in.flow_long,			item_in.max_processed_one_day,			item_in.par,			item_in.assembly_difficulty,			item_in.num_inst,			item_in.repair_every_x,			item_in.their_qty,			item_in.replace_every_x_cycles,			item_in.hide_specialty_in_name,			item_in.marked_for_deletion,			item_in.is_assembly_critical,			item_in.requires_leak_test,			item_in.is_not_tracked_by_inv_no,			item_in.is_imlink_locked,			item_in.is_robotic,			item_in.is_flexible_scope,			item_in.is_generic_pack,			item_in.dont_print_count_sheet,			item_in.is_conflict_check,			item_in.is_small_set,			item_in.hide_hsys_tag_in_name,			item_in.is_name_finalized,			item_in.is_in_data_cleanse_scope,			item_in.is_label_abbr,			item_in.has_implants,			item_in.sync_to_other_software_systems,			item_in.inv_has_implants,			item_in.is_custom_sort,			item_in.is_name_copied_from_prod,			item_in.is_deactivated,			item_in.is_vendor_data,			item_in.name_needs_review,			item_in.ignore_for_optimization,			item_in.inv_status,			item_in.their_name,			item_in.opt_status,			item_in.created_by,			item_in.updated_by,			item_in.old_names,			item_in.their_serial_no,			item_in.name_desc,			item_in.name_,			item_in.their_id,			item_in.decon_special_instructions,			item_in.named_by,			item_in.needs_review_notes,			item_in.vendor_tray_type,			item_in.sterilization_method,			item_in.priority,			item_in.category,			item_in.packaging_type,			item_in.packaging_notes,			item_in.their_packaging_type,			item_in.assembly_special_instructions,			item_in.sterilize_special_instructions,			item_in.label_name_abbr,			item_in.their_location,			item_in.count_sheet_status,			item_in.requested_by,			item_in.rack_row_bin_note,			item_in.standardization_status,			item_in.repair_every_x_type,			item_in.their_base_barcode,			item_in.their_key,			item_in.stuff               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:item_type_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.item_type_to_v1 (item_type_in item_type) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'item_type_to_v1 (item_type_in item_type)', '()', 'types_plus.item_type_to_v1 item_type_in item_type existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''item_type_to_v1''   and pg_get_function_identity_arguments(oid) = ''item_type_in item_type'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'item_type_to_v1 (item_type_in item_type)', '()', 'types_plus.item_type_to_v1 item_type_in item_type definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''item_type_to_v1''   and pg_get_function_identity_arguments(oid) = ''item_type_in item_type'';', 'CREATE OR REPLACE FUNCTION types_plus.item_type_to_v1(item_type_in item_type) RETURNS item_type_v1 LANGUAGE sqlAS $function$        SELECT			item_type_in.id,			item_type_in.marked_for_deletion,			item_type_in.name_$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:loaner_case_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.loaner_case_to_v1 (loaner_case_in loaner_case) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'loaner_case_to_v1 (loaner_case_in loaner_case)', '()', 'types_plus.loaner_case_to_v1 loaner_case_in loaner_case existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''loaner_case_to_v1''   and pg_get_function_identity_arguments(oid) = ''loaner_case_in loaner_case'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'loaner_case_to_v1 (loaner_case_in loaner_case)', '()', 'types_plus.loaner_case_to_v1 loaner_case_in loaner_case definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''loaner_case_to_v1''   and pg_get_function_identity_arguments(oid) = ''loaner_case_in loaner_case'';', 'CREATE OR REPLACE FUNCTION types_plus.loaner_case_to_v1(loaner_case_in loaner_case) RETURNS loaner_case_v1 LANGUAGE sqlAS $function$                   SELECT			loaner_case_in.id,			loaner_case_in.loaner_id,			loaner_case_in.last_updated_by_data_file_id,			loaner_case_in.updated_dts,			loaner_case_in.created_dts,			loaner_case_in.case_dts,			loaner_case_in.marked_for_deletion,			loaner_case_in.desc_,			loaner_case_in.surgeon,			loaner_case_in.updated_by,			loaner_case_in.created_by               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:loaner_item_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.loaner_item_to_v1 (loaner_item_in loaner_item) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'loaner_item_to_v1 (loaner_item_in loaner_item)', '()', 'types_plus.loaner_item_to_v1 loaner_item_in loaner_item existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''loaner_item_to_v1''   and pg_get_function_identity_arguments(oid) = ''loaner_item_in loaner_item'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'loaner_item_to_v1 (loaner_item_in loaner_item)', '()', 'types_plus.loaner_item_to_v1 loaner_item_in loaner_item definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''loaner_item_to_v1''   and pg_get_function_identity_arguments(oid) = ''loaner_item_in loaner_item'';', 'CREATE OR REPLACE FUNCTION types_plus.loaner_item_to_v1(loaner_item_in loaner_item) RETURNS loaner_item_v1 LANGUAGE sqlAS $function$                   SELECT			loaner_item_in.id,			loaner_item_in.loaner_id,			loaner_item_in.item_id,			loaner_item_in.last_updated_by_data_file_id,			loaner_item_in.updated_dts,			loaner_item_in.created_dts,			loaner_item_in.left_behind_qty,			loaner_item_in.qty,			loaner_item_in.pickup_qty,			loaner_item_in.marked_for_deletion,			loaner_item_in.updated_by,			loaner_item_in.created_by               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:loaner_iteminv_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.loaner_iteminv_to_v1 (loaner_iteminv_in loaner_iteminv) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'loaner_iteminv_to_v1 (loaner_iteminv_in loaner_iteminv)', '()', 'types_plus.loaner_iteminv_to_v1 loaner_iteminv_in loaner_iteminv existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''loaner_iteminv_to_v1''   and pg_get_function_identity_arguments(oid) = ''loaner_iteminv_in loaner_iteminv'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'loaner_iteminv_to_v1 (loaner_iteminv_in loaner_iteminv)', '()', 'types_plus.loaner_iteminv_to_v1 loaner_iteminv_in loaner_iteminv definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''loaner_iteminv_to_v1''   and pg_get_function_identity_arguments(oid) = ''loaner_iteminv_in loaner_iteminv'';', 'CREATE OR REPLACE FUNCTION types_plus.loaner_iteminv_to_v1(loaner_iteminv_in loaner_iteminv) RETURNS loaner_iteminv_v1 LANGUAGE sqlAS $function$                   SELECT			loaner_iteminv_in.id,			loaner_iteminv_in.loaner_item_id,			loaner_iteminv_in.inv_id,			loaner_iteminv_in.last_updated_by_data_file_id,			loaner_iteminv_in.created_dts,			loaner_iteminv_in.updated_dts,			loaner_iteminv_in.marked_for_deletion,			loaner_iteminv_in.created_by,			loaner_iteminv_in.updated_by               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:loaner_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.loaner_to_v1 (loaner_in loaner) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'loaner_to_v1 (loaner_in loaner)', '()', 'types_plus.loaner_to_v1 loaner_in loaner existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''loaner_to_v1''   and pg_get_function_identity_arguments(oid) = ''loaner_in loaner'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'loaner_to_v1 (loaner_in loaner)', '()', 'types_plus.loaner_to_v1 loaner_in loaner definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''loaner_to_v1''   and pg_get_function_identity_arguments(oid) = ''loaner_in loaner'';', 'CREATE OR REPLACE FUNCTION types_plus.loaner_to_v1(loaner_in loaner) RETURNS loaner_v1 LANGUAGE sqlAS $function$                   SELECT			loaner_in.s_case_id,			loaner_in.id,			loaner_in.sup_id,			loaner_in.rep_id,			loaner_in.facility_id,			loaner_in.last_updated_by_data_file_id,			loaner_in.pickup_dts,			loaner_in.created_dts,			loaner_in.updated_dts,			loaner_in.datetime_local,			loaner_in.drop_off_dts,			loaner_in.num_items,			loaner_in.marked_for_deletion,			loaner_in.is_printed,			loaner_in.created_by,			loaner_in.updated_by,			loaner_in.status,			loaner_in.notes               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:minutes_old.tests.sql------------------------------------------------------------------------------------- Checks for api.minutes_old (dts timestamp with time zone) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'api', 'minutes_old (dts timestamp with time zone)', '()', 'api.minutes_old dts timestamp with time zone existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''minutes_old''   and pg_get_function_identity_arguments(oid) = ''dts timestamp with time zone'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'api', 'minutes_old (dts timestamp with time zone)', '()', 'api.minutes_old dts timestamp with time zone definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''minutes_old''   and pg_get_function_identity_arguments(oid) = ''dts timestamp with time zone'';', 'CREATE OR REPLACE FUNCTION api.minutes_old(dts timestamp with time zone) RETURNS integer LANGUAGE sql STABLEAS $function$SELECT ((date_part(''epoch''::text, (now() - dts)))::integer / 60)$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:monge_elkan.tests.sql------------------------------------------------------------------------------------- Checks for tools.monge_elkan (base_text text, comparison_text text, distance_measure_name text, handicap boolean, lexize_strings boolean) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'monge_elkan (base_text text, comparison_text text, distance_measure_name text, handicap boolean, lexize_strings boolean)', '()', 'tools.monge_elkan base_text text, comparison_text text, distance_measure_name text, handicap boolean, lexize_strings boolean existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''monge_elkan''   and pg_get_function_identity_arguments(oid) = ''base_text text, comparison_text text, distance_measure_name text, handicap boolean, lexize_strings boolean'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'monge_elkan (base_text text, comparison_text text, distance_measure_name text, handicap boolean, lexize_strings boolean)', '()', 'tools.monge_elkan base_text text, comparison_text text, distance_measure_name text, handicap boolean, lexize_strings boolean definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''monge_elkan''   and pg_get_function_identity_arguments(oid) = ''base_text text, comparison_text text, distance_measure_name text, handicap boolean, lexize_strings boolean'';', 'CREATE OR REPLACE FUNCTION tools.monge_elkan(base_text text, comparison_text text, distance_measure_name text DEFAULT ''jarowinkler''::text, handicap boolean DEFAULT true, lexize_strings boolean DEFAULT false) RETURNS real LANGUAGE plpgsql STABLEAS $function$DECLARE  base_word                 text;  comparison_word           text;  score                     float8;  best_score                float8;  best_scores_sum           float8;  monge_elkan_score         real;  base_words_count          int4;  comparison_words_count    float8;  word_count_ratio          float8;  base_words_array          text[];  comparison_words_array    text[];BEGIN    distance_measure_name  := lower(distance_measure_name);	IF distance_measure_name NOT IN (''qgram'',''jaro'',''jarowinkler'') THEN		RAISE EXCEPTION USING			message = ''Invalid distance measure name '''''' || distance_measure_name || '''''''',			hint = ''Valid methods are jaro, jarowinkler, and qgram'',			errcode = ''KC100''; -- Custom code for ''Bad string selector parameter value''.		RETURN -1;	END IF;    base_text       := lower(base_text);    comparison_text := lower(comparison_text);    IF lexize_strings = true THEN		select into base_words_array		            array_agg(word)			   from ts_stat(''SELECT to_tsvector(''''english'''',quote_literal(base_text))'');			select into comparison_words_array		            array_agg(word)			   from ts_stat(''SELECT to_tsvector(''''english'''',quote_literal(comparison_text))'');    ELSE		select into base_words_array			string_to_array(base_text, '' '');		select into comparison_words_array			string_to_array (comparison_text, '' '');	END IF;	base_words_count  := 0;	best_scores_sum   := 0;    monge_elkan_score := 0;	FOREACH base_word IN array base_words_array LOOP		base_words_count := base_words_count + 1; -- PL/PgSQL doesn''t have ++. Who does that? ;-)		best_score:=0;   -- Eh? Why repeat the loop. Micro-optimization, or better.	 -- This way, the which-method-to-use test runs once, not once per loop.		IF distance_measure_name = ''jaro'' THEN				FOREACH comparison_word IN array comparison_words_array LOOP							 score      := jaro (base_word, comparison_word);							 best_score := greatest(score, best_score);				END LOOP;	    ELSEIF distance_measure_name = ''jarowinkler'' THEN				FOREACH comparison_word IN array comparison_words_array LOOP							 score      := jarowinkler (base_word, comparison_word);							 best_score := greatest(score, best_score);				END LOOP;		  ELSEIF distance_measure_name = ''qgram'' THEN				FOREACH comparison_word IN array comparison_words_array LOOP							 score      := qgram (base_word, comparison_word);							 best_score := greatest(score, best_score);				END LOOP;			ELSE				RAISE EXCEPTION USING					message = ''Invalid distance measure name '''''' || distance_measure_name || '''''''',					hint = ''Valid methods are jaro, jarowinkler, and qgram. Problem should have been caught earlier.'',					errcode = ''KC100''; -- Custom code for ''Bad string selector parameter value''.		END IF;		best_scores_sum := 	best_scores_sum + best_score;	END LOOP;   comparison_words_count := array_length(comparison_words_array, 1);       -- Being very explicit here about avoiding zero division.   	IF base_words_count = 0 THEN		word_count_ratio := 0;	ELSEIF comparison_words_count = 0 THEN		word_count_ratio := 0;    ELSE        word_count_ratio := (base_words_count / comparison_words_count)::real;   END IF;    -- Being very explicit here about avoiding zero division.	IF best_scores_sum = 0 THEN		monge_elkan_score := 0;	ELSEIF base_words_count = 0 THEN		monge_elkan_score := 0;	ELSEIF comparison_words_count = 0 THEN		monge_elkan_score := 0;    ELSE		monge_elkan_score:= (best_scores_sum / base_words_count)::real;		IF handicap = true AND word_count_ratio <= .67 THEN		     monge_elkan_score := monge_elkan_score - 0.1;		END IF;    END IF;	RETURN monge_elkan_score;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:need_to_v5.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.need_to_v5 (need_in need) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'need_to_v5 (need_in need)', '()', 'types_plus.need_to_v5 need_in need existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''need_to_v5''   and pg_get_function_identity_arguments(oid) = ''need_in need'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'need_to_v5 (need_in need)', '()', 'types_plus.need_to_v5 need_in need definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''need_to_v5''   and pg_get_function_identity_arguments(oid) = ''need_in need'';', 'CREATE OR REPLACE FUNCTION types_plus.need_to_v5(need_in need) RETURNS need_v5 LANGUAGE sqlAS $function$                   SELECT			need_in.id,			need_in.hsys_id,			need_in.facility_id,			need_in.item_id,			need_in.percent_down,			need_in.next_case_dts,			need_in.flow,			need_in.qty_circulation,			need_in.qty_ready_everywhere,			need_in.qty_ready_here,			need_in.qty_sched_everywhere,			need_in.qty_sched_here,			need_in.qty_sterile_everywhere,			need_in.qty_sterile_here,			need_in.qty_suggest_sterilize,			need_in.qty_total,			need_in.ready_vs_need_defecit,			need_in.sched_sort,			need_in.sort_rank,			need_in.suggest_transport,			need_in.next_needed,			need_in.or_name,			need_in.status,			need_in.status_sort,			need_in.when_,			need_in.qty_here               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:num2words.tests.sql------------------------------------------------------------------------------------- Checks for tools.num2words (number_as_text_in text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'num2words (number_as_text_in text)', '()', 'tools.num2words number_as_text_in text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''num2words''   and pg_get_function_identity_arguments(oid) = ''number_as_text_in text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'num2words (number_as_text_in text)', '()', 'tools.num2words number_as_text_in text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''num2words''   and pg_get_function_identity_arguments(oid) = ''number_as_text_in text'';', 'CREATE OR REPLACE FUNCTION tools.num2words(number_as_text_in text) RETURNS text LANGUAGE plpgsqlAS $function$DECLARE  words_out text;  number_as_money money; -- cash_words(money)...the deprecated type.BEGIN   number_as_money = number_as_text_in::money;   words_out = cash_words(number_as_money); -- cash_words(money), not cash_words(some kind of numeric or text)-- select cash_words(''24,120.10''); -- Twenty four thousand one hundred twenty dollars and ten cents   words_out = replace(words_out, '' dollars'','''');   words_out = replace(words_out, '' dollar'','''');   words_out = replace(words_out, '' cents'','''');   words_out = replace(words_out, '' cent'','''');   words_out = replace(words_out, '' and '','' point '');   RETURN words_out;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:numeric_field_analysis.tests.sql------------------------------------------------------------------------------------- Checks for dba.numeric_field_analysis (table_name_in text, field_name text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'numeric_field_analysis (table_name_in text, field_name text)', '()', 'dba.numeric_field_analysis table_name_in text, field_name text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''numeric_field_analysis''   and pg_get_function_identity_arguments(oid) = ''table_name_in text, field_name text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'numeric_field_analysis (table_name_in text, field_name text)', '()', 'dba.numeric_field_analysis table_name_in text, field_name text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''numeric_field_analysis''   and pg_get_function_identity_arguments(oid) = ''table_name_in text, field_name text'';', 'CREATE OR REPLACE FUNCTION dba.numeric_field_analysis(table_name_in text, field_name text) RETURNS TABLE(table_name text, column_name text, min integer, max integer, avg real, variance real, stddev real, stddev_1_above real, stddev_1_below real, stddev_2_above real, stddev_2_below real, stddev_3_above real, stddev_3_below real, stddev_4_above real, stddev_4_below real, stddev_5_above real, stddev_5_below real, q1 real, q2 real, q3 real, p95 real, iqr real, stddev_1_above_count integer, stddev_1_above_min real, stddev_1_above_max real, stddev_1_below_count integer, stddev_1_below_min real, stddev_1_below_max real, stddev_2_above_count integer, stddev_2_above_min real, stddev_2_above_max real, stddev_2_below_count integer, stddev_2_below_min real, stddev_2_below_max real, stddev_3_above_count integer, stddev_3_above_min real, stddev_3_above_max real, stddev_3_below_count integer, stddev_3_below_min real, stddev_3_below_max real, stddev_4_above_count integer, stddev_4_above_min real, stddev_4_above_max real, stddev_4_below_count integer, stddev_4_below_min real, stddev_4_below_max real, stddev_5_above_count integer, stddev_5_above_min real, stddev_5_above_max real, stddev_5_below_count integer, stddev_5_below_min real, stddev_5_below_max real, q3_count integer, q3_min real, q3_max real, p95_count integer, p95_min real, p95_max real, p99_count integer, p99_min real, p99_max real) LANGUAGE plpgsqlAS $function$  BEGIN    RETURN QUERY EXECUTE        ''with 	overall_stats as 	(select *	   from numeric_field_stats('' || quote_literal(table_name_in) || '','' || quote_literal(field_name) || '')	 ), 	q3_stats as 	(select count(*)::int4 as q3_count,             coalesce(min('' || quote_ident(field_name) || ''),0)::float4 as q3_min,             coalesce(max('' || quote_ident(field_name) || ''),0)::float4 as q3_max		  	   from ''|| quote_ident(table_name_in) || ''	  where '' || quote_ident(field_name) || '' >= (select q3 from overall_stats)),  	stddev_stats as 	(select count(*)::int4 as stddev_count,             coalesce(min('' || quote_ident(field_name) || ''),0)::float4 as stddev_min,             coalesce(max('' || quote_ident(field_name) || ''),0)::float4 as stddev_max		  	   from ''|| quote_ident(table_name_in) || ''	  where '' || quote_ident(field_name) || '' >= (select stddev from overall_stats)),  	stddev_1_above_stats as 	(select count(*)::int4 as stddev_1_above_count,             coalesce(min('' || quote_ident(field_name) || ''),0)::float4 as stddev_1_above_min,             coalesce(max('' || quote_ident(field_name) || ''),0)::float4 as stddev_1_above_max		  	   from ''|| quote_ident(table_name_in) || ''	  where '' || quote_ident(field_name) || '' >= (select stddev_1_above from overall_stats)), 	stddev_1_below_stats as 	(select count(*)::int4 as stddev_1_below_count,             coalesce(min('' || quote_ident(field_name) || ''),0)::float4 as stddev_1_below_min,             coalesce(max('' || quote_ident(field_name) || ''),0)::float4 as stddev_1_below_max		  	   from ''|| quote_ident(table_name_in) || ''	  where '' || quote_ident(field_name) || '' <= (select stddev_1_below from overall_stats)), 	stddev_2_above_stats as 	(select count(*)::int4 as stddev_2_above_count,             coalesce(min('' || quote_ident(field_name) || ''),0)::float4 as stddev_2_above_min,             coalesce(max('' || quote_ident(field_name) || ''),0)::float4 as stddev_2_above_max		  	   from ''|| quote_ident(table_name_in) || ''	  where '' || quote_ident(field_name) || '' >= (select stddev_2_above from overall_stats)), 	stddev_2_below_stats as 	(select count(*)::int4 as stddev_2_below_count,             coalesce(min('' || quote_ident(field_name) || ''),0)::float4 as stddev_2_below_min,             coalesce(max('' || quote_ident(field_name) || ''),0)::float4 as stddev_2_below_max		  	   from ''|| quote_ident(table_name_in) || ''	  where '' || quote_ident(field_name) || ''<= (select stddev_2_below from overall_stats)), 	stddev_3_above_stats as 	(select count(*)::int4 as stddev_3_above_count,             coalesce(min('' || quote_ident(field_name) || ''),0)::float4 as stddev_3_above_min,             coalesce(max('' || quote_ident(field_name) || ''),0)::float4 as stddev_3_above_max		  	   from ''|| quote_ident(table_name_in) || ''	  where '' || quote_ident(field_name) || '' >= (select stddev_3_above from overall_stats)), 	stddev_3_below_stats as 	(select count(*)::int4 as stddev_3_below_count,             coalesce(min('' || quote_ident(field_name) || ''),0)::float4 as stddev_3_below_min,             coalesce(max('' || quote_ident(field_name) || ''),0)::float4 as stddev_3_below_max		  	   from ''|| quote_ident(table_name_in) || ''	  where '' || quote_ident(field_name) || '' <= (select stddev_3_below from overall_stats)), 	stddev_4_above_stats as 	(select count(*)::int4 as stddev_4_above_count,             coalesce(min('' || quote_ident(field_name) || ''),0)::float4 as stddev_4_above_min,             coalesce(max('' || quote_ident(field_name) || ''),0)::float4 as stddev_4_above_max		  	   from ''|| quote_ident(table_name_in) || ''	  where '' || quote_ident(field_name) || '' >= (select stddev_4_above from overall_stats)), 	stddev_4_below_stats as 	(select count(*)::int4 as stddev_4_below_count,             coalesce(min('' || quote_ident(field_name) || ''),0)::float4 as stddev_4_below_min,             coalesce(max('' || quote_ident(field_name) || ''),0)::float4 as stddev_4_below_max		  	   from ''|| quote_ident(table_name_in) || ''	  where '' || quote_ident(field_name) || '' <= (select stddev_4_below from overall_stats)), 	stddev_5_above_stats as 	(select count(*)::int4 as stddev_5_above_count,             coalesce(min('' || quote_ident(field_name) || ''),0)::float4 as stddev_5_above_min,             coalesce(max('' || quote_ident(field_name) || ''),0)::float4 as stddev_5_above_max		  	   from ''|| quote_ident(table_name_in) || ''	  where '' || quote_ident(field_name) || '' >= (select stddev_5_above from overall_stats)), 	stddev_5_below_stats as 	(select count(*)::int4 as stddev_5_below_count,             coalesce(min('' || quote_ident(field_name) || ''),0)::float4 as stddev_5_below_min,             coalesce(max('' || quote_ident(field_name) || ''),0)::float4 as stddev_5_below_max		  	   from ''|| quote_ident(table_name_in) || ''	  where '' || quote_ident(field_name) || '' <= (select stddev_5_below from overall_stats)),	  	p95_stats as 	(select count(*)::int4 as p95_count,             coalesce(min('' || quote_ident(field_name) || ''),0)::float4 as p95_min,             coalesce(max('' || quote_ident(field_name) || ''),0)::float4 as p95_max		  	   from ''|| quote_ident(table_name_in) || ''	  where '' || quote_ident(field_name) || '' >= (select p95 from overall_stats)),	p99_stats as 	(select count(*)::int4 as p99_count,             coalesce(min('' || quote_ident(field_name) || ''),0)::float4 as p99_min,             coalesce(max('' || quote_ident(field_name) || ''),0)::float4 as p99_max		  	   from ''|| quote_ident(table_name_in) || ''	  where '' || quote_ident(field_name) || '' >= (select p99 from overall_stats))   	select overall_stats.table_name,           overall_stats.column_name,           overall_stats.min,           overall_stats.max,           overall_stats.avg,           overall_stats.variance,           overall_stats.stddev,           stddev_1_above,           stddev_1_below,           stddev_2_above,           stddev_2_below,           stddev_3_above,           stddev_3_below,           stddev_4_above,           stddev_4_below,           stddev_4_above,           stddev_5_below,                      overall_stats.q1,           overall_stats.q2,           overall_stats.q3,           overall_stats.p95,           overall_stats.iqr,           stddev_1_above_stats.stddev_1_above_count,           stddev_1_above_stats.stddev_1_above_min,           stddev_1_above_stats.stddev_1_above_max,           stddev_1_below_stats.stddev_1_below_count,           stddev_1_below_stats.stddev_1_below_min,           stddev_1_below_stats.stddev_1_below_max,           stddev_2_above_stats.stddev_2_above_count,           stddev_2_above_stats.stddev_2_above_min,           stddev_2_above_stats.stddev_2_above_max,           stddev_2_below_stats.stddev_2_below_count,           stddev_2_below_stats.stddev_2_below_min,           stddev_2_below_stats.stddev_2_below_max,           stddev_3_above_stats.stddev_3_above_count,           stddev_3_above_stats.stddev_3_above_min,           stddev_3_above_stats.stddev_3_above_max,           stddev_3_below_stats.stddev_3_below_count,           stddev_3_below_stats.stddev_3_below_min,           stddev_3_below_stats.stddev_3_below_max,           stddev_4_above_stats.stddev_4_above_count,           stddev_4_above_stats.stddev_4_above_min,           stddev_4_above_stats.stddev_4_above_max,           stddev_4_below_stats.stddev_4_below_count,           stddev_4_below_stats.stddev_4_below_min,           stddev_4_below_stats.stddev_4_below_max,           stddev_5_above_stats.stddev_5_above_count,           stddev_5_above_stats.stddev_5_above_min,           stddev_5_above_stats.stddev_5_above_max,           stddev_5_below_stats.stddev_5_below_count,           stddev_5_below_stats.stddev_5_below_min,           stddev_5_below_stats.stddev_5_below_max,                      q3_stats.q3_count,           q3_stats.q3_min,           q3_stats.q3_max,                      p95_stats.p95_count,           p95_stats.p95_min,           p95_stats.p95_max,                      p99_stats.p99_count,           p99_stats.p99_min,           p99_stats.p99_max      from overall_stats,           stddev_1_above_stats,           stddev_1_below_stats,           stddev_2_above_stats,           stddev_2_below_stats,           stddev_3_above_stats,           stddev_3_below_stats,           stddev_4_above_stats,           stddev_4_below_stats,           stddev_5_above_stats,           stddev_5_below_stats,           q3_stats,           p95_stats,           p99_stats''                                           USING table_name_in, field_name;	END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:numeric_field_buckets.tests.sql------------------------------------------------------------------------------------- Checks for dba.numeric_field_buckets (table_name_in text, field_name text, bucket_count integer) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'numeric_field_buckets (table_name_in text, field_name text, bucket_count integer)', '()', 'dba.numeric_field_buckets table_name_in text, field_name text, bucket_count integer existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''numeric_field_buckets''   and pg_get_function_identity_arguments(oid) = ''table_name_in text, field_name text, bucket_count integer'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'numeric_field_buckets (table_name_in text, field_name text, bucket_count integer)', '()', 'dba.numeric_field_buckets table_name_in text, field_name text, bucket_count integer definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''numeric_field_buckets''   and pg_get_function_identity_arguments(oid) = ''table_name_in text, field_name text, bucket_count integer'';', 'CREATE OR REPLACE FUNCTION dba.numeric_field_buckets(table_name_in text, field_name text, bucket_count integer) RETURNS TABLE(table_name text, column_name text, bucket integer, min integer, max integer, count bigint, bar text) LANGUAGE plpgsqlAS $function$  BEGIN    RETURN QUERY EXECUTE    ''with 	range_stats as	(select min('' || quote_ident(field_name) || ''),			max('' || quote_ident(field_name) || '')			 		   from '' || quote_ident(table_name_in) || ''),			histogram as	(select  ''|| quote_literal(table_name_in) || '' as table_name,         	 ''|| quote_literal(field_name)    || '' as column_name,			  width_bucket(num_inst, range_stats.min, range_stats.max, $3 - 1) as bucket,         	  min('' || quote_ident(field_name) || ''),         	  max('' || quote_ident(field_name) || ''),			  count(*) as frequency		    from '' || quote_ident(table_name_in) || '',			 range_stats	group by bucket    	order by bucket)		 select table_name,			column_name,			bucket,			min,			max,			frequency,			repeat (''|| quote_literal(''‚ñá'') || '',				   (frequency::float					 / max(frequency) over() * ($3 - 1) * 2)::int			) as bar	   from histogram''	    USING table_name, field_name, bucket_count;	END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:numeric_field_stats.tests.sql------------------------------------------------------------------------------------- Checks for dba.numeric_field_stats (table_name_in text, field_name text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'numeric_field_stats (table_name_in text, field_name text)', '()', 'dba.numeric_field_stats table_name_in text, field_name text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''numeric_field_stats''   and pg_get_function_identity_arguments(oid) = ''table_name_in text, field_name text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'numeric_field_stats (table_name_in text, field_name text)', '()', 'dba.numeric_field_stats table_name_in text, field_name text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''numeric_field_stats''   and pg_get_function_identity_arguments(oid) = ''table_name_in text, field_name text'';', 'CREATE OR REPLACE FUNCTION dba.numeric_field_stats(table_name_in text, field_name text) RETURNS TABLE(table_name text, column_name text, min integer, max integer, avg real, variance real, stddev real, stddev_1_above real, stddev_1_below real, stddev_2_above real, stddev_2_below real, stddev_3_above real, stddev_3_below real, stddev_4_above real, stddev_4_below real, stddev_5_above real, stddev_5_below real, q1 real, q2 real, q3 real, p95 real, p99 real, iqr real) LANGUAGE plpgsqlAS $function$  BEGIN    RETURN QUERY EXECUTE         ''with 	 stats as	 (select  coalesce(min( '' || quote_ident(field_name) || ''),0)::int4 as min,			  coalesce(max( '' || quote_ident(field_name) || ''),0)::int4 as max,			  coalesce(avg( '' || quote_ident(field_name) || ''),0)::float4 as avg,			  			  coalesce(variance('' || quote_ident(field_name) || ''),0)::float4 as variance,			  coalesce(stddev('' || quote_ident(field_name) || ''),0)::float4 as stddev,			  			  coalesce(percentile_cont(0.25) within group (order by '' || quote_ident(field_name) || '' asc),0)::float4 as q1,			  coalesce(percentile_cont(0.50) within group (order by '' || quote_ident(field_name) || '' asc),0)::float4 as q2,			  coalesce(percentile_cont(0.75) within group (order by '' || quote_ident(field_name) || '' asc),0)::float4 as q3,			  coalesce(percentile_cont(0.95) within group (order by '' || quote_ident(field_name) || '' asc),0)::float4 as p95,			  coalesce(percentile_cont(0.99) within group (order by '' || quote_ident(field_name) || '' asc),0)::float4 as p99	   from '' || quote_ident(table_name_in) || '')   	 select '' || quote_literal(table_name_in) || '' as table_name,         	'' || quote_literal(field_name) || '' as column_name,             min,             max,             avg,             variance,             stddev,             avg + (stddev * 1)::float4 as stddev_1_above,             avg - (stddev * 1)::float4 as stddev_1_below,             avg + (stddev * 2)::float4 as stddev_2_above,             avg - (stddev * 2)::float4 as stddev_2_below,             avg + (stddev * 3)::float4 as stddev_3_above,             avg - (stddev * 3)::float4 as stddev_3_below,             avg + (stddev * 4)::float4 as stddev_4_above,             avg - (stddev * 4)::float4 as stddev_4_below,             avg + (stddev * 5)::float4 as stddev_5_above,             avg - (stddev * 5)::float4 as stddev_5_below,                          q1,             q2,             q3,             p95,             p99, 			(q3 - q1)::float4 as iqr				from stats''	    USING table_name, field_name;	END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:on_ddl_create_or_alter.tests.sql------------------------------------------------------------------------------------- Checks for event_triggers.on_ddl_create_or_alter () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'event_triggers', 'on_ddl_create_or_alter ()', '()', 'event_triggers.on_ddl_create_or_alter  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''event_triggers''   and proname = ''on_ddl_create_or_alter''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'event_triggers', 'on_ddl_create_or_alter ()', '()', 'event_triggers.on_ddl_create_or_alter  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''event_triggers''   and proname = ''on_ddl_create_or_alter''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION event_triggers.on_ddl_create_or_alter() RETURNS event_trigger LANGUAGE plpgsqlAS $function$BEGININSERT INTO dba.ddl_event_log (			classid,			objid,			objsubid,			command_tag,			in_extension,			object_identity,			object_type,			schema_name,			trigger_event) --,			-- object_source)	SELECT	ec.classid,			ec.objid,			ec.objsubid,			ec.command_tag,			ec.in_extension,			ec.object_identity,			ec.object_type,			ec.schema_name,			TG_EVENT			-- ddl_get_object_source(ec.object_type,ec.objid)       FROM pg_event_trigger_ddl_commands() AS ec  LEFT JOIN pg_proc on pg_proc.oid = ec.objid      WHERE TG_TAG IS NOT NULL AND            command_tag NOT IN (''GRANT'',''REVOKE'',''ALTER DEFAULT PRIVILEGES'');      -- Unclear why some are null, seems to be on low-level rewrites?  ¬Ø\_(„ÉÑ)_/¬ØEND$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:on_ddl_drop.tests.sql------------------------------------------------------------------------------------- Checks for event_triggers.on_ddl_drop () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'event_triggers', 'on_ddl_drop ()', '()', 'event_triggers.on_ddl_drop  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''event_triggers''   and proname = ''on_ddl_drop''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'event_triggers', 'on_ddl_drop ()', '()', 'event_triggers.on_ddl_drop  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''event_triggers''   and proname = ''on_ddl_drop''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION event_triggers.on_ddl_drop() RETURNS event_trigger LANGUAGE plpgsqlAS $function$BEGININSERT INTO dba.ddl_event_log (			  classid,			  objid,			  objsubid,			  is_temporary,			  normal,			  original,			  object_identity,			  object_name,			  object_type,			  schema_name,			  address_args,			  address_names,			  trigger_event)	  SELECT ec.classid,			  ec.objid,			  ec.objsubid,			  ec.is_temporary,			  ec.normal,			  ec.original,			  ec.object_identity,			  ec.object_name,			  ec.object_type,			  ec.schema_name,			  ec.address_args,			  ec.address_names,			  TG_EVENT       FROM pg_event_trigger_dropped_objects() AS ec  LEFT JOIN pg_proc on pg_proc.oid = ec.objid;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:outlier_fix.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.outlier_fix () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'outlier_fix ()', '()', 'ascendco.outlier_fix  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''outlier_fix''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'outlier_fix ()', '()', 'ascendco.outlier_fix  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''outlier_fix''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION ascendco.outlier_fix() RETURNS TABLE(schema_name text, table_name text, column_name text, id uuid, value_was bigint, set_to bigint, change_count bigint) LANGUAGE plpgsqlAS $function$DECLARE    rule record;    now_ timestamptz = NOW();BEGIN	FOR rule IN SELECT * FROM ascendco.outlier_rule LOOP		EXECUTE FORMAT (       ''INSERT INTO outlier_change (						outlier_rule_id,						set_to,						id,						value_was)			   SELECT %6$L,						%5$s,						%2$I.id,						%2$I.%3$I			     FROM %1$I.%2$I			    WHERE %3$I > %4$s				   ON CONFLICT(id,outlier_rule_id) DO UPDATE SET					   value_was = EXCLUDED.value_was,					   set_to    = EXCLUDED.set_to          RETURNING outlier_rule_id,			          id,			          value_was,			          set_to			          change_count;			 UPDATE %1$I.%2$I			    SET %3$I = %5$s			  WHERE %3$I > %4$s;'',				rule.schema_name,				rule.table_name,				rule.column_name,				rule.threshold,				rule.set_to,				rule.id);  END LOOP;  RETURN QUERY EXECUTE (''		SELECT outlier_rule.schema_name,              outlier_rule.table_name,              outlier_rule.column_name,              outlier_change.id,              outlier_change.value_was,              outlier_change.set_to,              outlier_change.change_count		  FROM outlier_change		  JOIN outlier_rule ON (outlier_rule.id = outlier_change.outlier_rule_id)		 WHERE last_changed_dts = $1'')	USING now_;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:patch_log_insert.tests.sql------------------------------------------------------------------------------------- Checks for dba.patch_log_insert (patch_name_in citext, description_in citext, patch_hash_in text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'patch_log_insert (patch_name_in citext, description_in citext, patch_hash_in text)', '()', 'dba.patch_log_insert patch_name_in citext, description_in citext, patch_hash_in text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''patch_log_insert''   and pg_get_function_identity_arguments(oid) = ''patch_name_in citext, description_in citext, patch_hash_in text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'patch_log_insert (patch_name_in citext, description_in citext, patch_hash_in text)', '()', 'dba.patch_log_insert patch_name_in citext, description_in citext, patch_hash_in text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''patch_log_insert''   and pg_get_function_identity_arguments(oid) = ''patch_name_in citext, description_in citext, patch_hash_in text'';', 'CREATE OR REPLACE FUNCTION dba.patch_log_insert(patch_name_in citext, description_in citext, patch_hash_in text) RETURNS patch_log LANGUAGE sqlAS $function$INSERT INTO patch_log (	           patch_name,	           description,	           patch_hash)       VALUES (patch_name_in,	           description_in,	           patch_hash_in)       RETURNING *$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:pg_stat_statements.tests.sql------------------------------------------------------------------------------------- Checks for api.pg_stat_statements () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'api', 'pg_stat_statements ()', '()', 'api.pg_stat_statements  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''pg_stat_statements''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'api', 'pg_stat_statements ()', '()', 'api.pg_stat_statements  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''pg_stat_statements''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION api.pg_stat_statements() RETURNS SETOF pg_stat_statements LANGUAGE sql SECURITY DEFINERAS $function$SELECT * FROM pg_stat_statements;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:productivity_detail_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.productivity_detail_to_v1 (productivity_detail_in productivity_detail) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'productivity_detail_to_v1 (productivity_detail_in productivity_detail)', '()', 'types_plus.productivity_detail_to_v1 productivity_detail_in productivity_detail existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''productivity_detail_to_v1''   and pg_get_function_identity_arguments(oid) = ''productivity_detail_in productivity_detail'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'productivity_detail_to_v1 (productivity_detail_in productivity_detail)', '()', 'types_plus.productivity_detail_to_v1 productivity_detail_in productivity_detail definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''productivity_detail_to_v1''   and pg_get_function_identity_arguments(oid) = ''productivity_detail_in productivity_detail'';', 'CREATE OR REPLACE FUNCTION types_plus.productivity_detail_to_v1(productivity_detail_in productivity_detail) RETURNS productivity_detail_v1 LANGUAGE sqlAS $function$        SELECT			productivity_detail_in.id,			productivity_detail_in.source_record_row_counter,			productivity_detail_in.start_time_dts,			productivity_detail_in.source_table_number,			productivity_detail_in.data_file_id,			productivity_detail_in.user_id,			productivity_detail_in.facility_id,			productivity_detail_in.assembly_inst,			productivity_detail_in.assembly_pack,			productivity_detail_in.assembly_tray,			productivity_detail_in.assembly_points,			productivity_detail_in.assembly_seconds_trays,			productivity_detail_in.assembly_seconds_overall,			productivity_detail_in.pause_seconds,			productivity_detail_in.duration_seconds,			productivity_detail_in.placeholder_row,			productivity_detail_in.description,			productivity_detail_in.year_and_month,			productivity_detail_in.start_date,			productivity_detail_in.time_label,			productivity_detail_in.duration,			productivity_detail_in.pause_time,			productivity_detail_in.activity,			productivity_detail_in.user_label$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:productivity_user.tests.sql------------------------------------------------------------------------------------- Checks for api.productivity_user (facility_id uuid, from_date date, to_date date, user_id uuid) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'api', 'productivity_user (facility_id uuid, from_date date, to_date date, user_id uuid)', '()', 'api.productivity_user facility_id uuid, from_date date, to_date date, user_id uuid existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''productivity_user''   and pg_get_function_identity_arguments(oid) = ''facility_id uuid, from_date date, to_date date, user_id uuid'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'api', 'productivity_user (facility_id uuid, from_date date, to_date date, user_id uuid)', '()', 'api.productivity_user facility_id uuid, from_date date, to_date date, user_id uuid definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''productivity_user''   and pg_get_function_identity_arguments(oid) = ''facility_id uuid, from_date date, to_date date, user_id uuid'';', 'CREATE OR REPLACE FUNCTION api.productivity_user(facility_id uuid, from_date date, to_date date, user_id uuid) RETURNS TABLE(schema_name citext, view_name citext) LANGUAGE plpgsql STABLEAS $function$-- DECLAREBEGIN-- The parameter types screen out most bad inputs, but it''s still possible to screw up the start-end range. A few quick checks.IF from_date > to_date THEN  RAISE EXCEPTION USING     message = ''Invalid date range: '' || from_date::text || '' to '' || to_date::text,     hint = ''The from date is later than the to date.'',     errcode = ''KC400''; -- Custom code, see the error_code table.END IF;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:push_log_count_since.tests.sql------------------------------------------------------------------------------------- Checks for api.push_log_count_since (since_dts timestamp with time zone) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'api', 'push_log_count_since (since_dts timestamp with time zone)', '()', 'api.push_log_count_since since_dts timestamp with time zone existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''push_log_count_since''   and pg_get_function_identity_arguments(oid) = ''since_dts timestamp with time zone'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'api', 'push_log_count_since (since_dts timestamp with time zone)', '()', 'api.push_log_count_since since_dts timestamp with time zone definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''push_log_count_since''   and pg_get_function_identity_arguments(oid) = ''since_dts timestamp with time zone'';', 'CREATE OR REPLACE FUNCTION api.push_log_count_since(since_dts timestamp with time zone) RETURNS TABLE(days_ago bigint, table_name citext, server_name citext, push_count bigint) LANGUAGE plpgsql STABLE SECURITY DEFINERAS $function$DECLARE-- Subtract two timestamptz values, get an interval, pull out just the days.   days_ago bigint := date_part(''day'', now()::timestamptz - since_dts)::bigint;BEGINRETURN QUERY    SELECT days_ago,           ib_table_name as table_name,           data_file_info.server_name_ as server_name,           count(*) as push_count      FROM ascendco.push_log      JOIN ascendco.data_file_info on (data_file_info.id = push_log.data_file_id)     WHERE push_log.push_dts >= since_dts  GROUP BY ib_table_name,           data_file_info.server_name_  ORDER BY ib_table_name,           data_file_info.server_name_           ;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:push_log_recent.tests.sql------------------------------------------------------------------------------------- Checks for dba.push_log_recent (table_name_in citext, limit_in integer) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'push_log_recent (table_name_in citext, limit_in integer)', '()', 'dba.push_log_recent table_name_in citext, limit_in integer existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''push_log_recent''   and pg_get_function_identity_arguments(oid) = ''table_name_in citext, limit_in integer'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'push_log_recent (table_name_in citext, limit_in integer)', '()', 'dba.push_log_recent table_name_in citext, limit_in integer definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''push_log_recent''   and pg_get_function_identity_arguments(oid) = ''table_name_in citext, limit_in integer'';', 'CREATE OR REPLACE FUNCTION dba.push_log_recent(table_name_in citext, limit_in integer DEFAULT 20) RETURNS TABLE(table_name citext, minutes_old integer, records_count integer, server_name citext, push_log_id citext) LANGUAGE plpgsql STABLEAS $function$BEGINRETURN QUERY   select push_log.ib_table_name,          minutes_old (push_log.push_dts) as minutes_old,          push_log.records_count,          coalesce(data_file_info.server_name_, ''Unknown server with ID '' || format_uuid(push_log.data_file_id))::citext AS server_name,          format_uuid (push_log.id)::citext AS push_log_id     from push_logleft join data_file_info on data_file_info.id = push_log.data_file_id    where ib_table_name = table_name_in  order by push_dts desc   limit limit_in;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:push_log_sum_since.tests.sql------------------------------------------------------------------------------------- Checks for api.push_log_sum_since (since_dts timestamp with time zone) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'api', 'push_log_sum_since (since_dts timestamp with time zone)', '()', 'api.push_log_sum_since since_dts timestamp with time zone existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''push_log_sum_since''   and pg_get_function_identity_arguments(oid) = ''since_dts timestamp with time zone'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'api', 'push_log_sum_since (since_dts timestamp with time zone)', '()', 'api.push_log_sum_since since_dts timestamp with time zone definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''push_log_sum_since''   and pg_get_function_identity_arguments(oid) = ''since_dts timestamp with time zone'';', 'CREATE OR REPLACE FUNCTION api.push_log_sum_since(since_dts timestamp with time zone) RETURNS TABLE(days_ago bigint, table_name citext, server_name citext, push_sum bigint) LANGUAGE plpgsql STABLE SECURITY DEFINERAS $function$DECLARE-- Subtract two timestamptz values, get an interval, pull out just the days.   days_ago bigint := date_part(''day'', now()::timestamptz - since_dts)::bigint;BEGINRETURN QUERY    SELECT days_ago,           ib_table_name as table_name,           data_file_info.server_name_ as server_name,           sum(push_log.records_count) as push_sum      FROM ascendco.push_log      JOIN ascendco.data_file_info on (data_file_info.id = push_log.data_file_id)     WHERE push_log.push_dts >= since_dts  GROUP BY ib_table_name,           data_file_info.server_name_  ORDER BY ib_table_name,           data_file_info.server_name_           ;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:push_target_add_if_missing.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.push_target_add_if_missing (schema_name_in citext, target_name_in citext, unique_path_in citext, target_type_in citext) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'push_target_add_if_missing (schema_name_in citext, target_name_in citext, unique_path_in citext, target_type_in citext)', '()', 'ascendco.push_target_add_if_missing schema_name_in citext, target_name_in citext, unique_path_in citext, target_type_in citext existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''push_target_add_if_missing''   and pg_get_function_identity_arguments(oid) = ''schema_name_in citext, target_name_in citext, unique_path_in citext, target_type_in citext'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'push_target_add_if_missing (schema_name_in citext, target_name_in citext, unique_path_in citext, target_type_in citext)', '()', 'ascendco.push_target_add_if_missing schema_name_in citext, target_name_in citext, unique_path_in citext, target_type_in citext definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''push_target_add_if_missing''   and pg_get_function_identity_arguments(oid) = ''schema_name_in citext, target_name_in citext, unique_path_in citext, target_type_in citext'';', 'CREATE OR REPLACE FUNCTION ascendco.push_target_add_if_missing(schema_name_in citext, target_name_in citext, unique_path_in citext, target_type_in citext) RETURNS integer LANGUAGE plpgsqlAS $function$DECLARE   id_out integer = 0;BEGIN-- Insert the value, if it''s missing.INSERT INTO dba.push_target  (schema_name,    target_name,     unique_path,    target_type)                      VALUES (schema_name_in, target_name_in,  unique_path_in, target_type_in)                 ON CONFLICT DO NOTHING;-- The ID should be there, either historically or becase it was just added.     SELECT id       FROM dba.push_target      WHERE schema_name = schema_name_in        AND target_name = target_name_in        AND unique_path = unique_path_in        AND target_type = target_type_in       INTO id_out; return id_out as id;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:q_audit_step_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.q_audit_step_to_v1 (q_audit_step_in q_audit_step) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'q_audit_step_to_v1 (q_audit_step_in q_audit_step)', '()', 'types_plus.q_audit_step_to_v1 q_audit_step_in q_audit_step existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''q_audit_step_to_v1''   and pg_get_function_identity_arguments(oid) = ''q_audit_step_in q_audit_step'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'q_audit_step_to_v1 (q_audit_step_in q_audit_step)', '()', 'types_plus.q_audit_step_to_v1 q_audit_step_in q_audit_step definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''q_audit_step_to_v1''   and pg_get_function_identity_arguments(oid) = ''q_audit_step_in q_audit_step'';', 'CREATE OR REPLACE FUNCTION types_plus.q_audit_step_to_v1(q_audit_step_in q_audit_step) RETURNS q_audit_step_v1 LANGUAGE sqlAS $function$                   SELECT			q_audit_step_in.id,			q_audit_step_in.hsys_id,			q_audit_step_in.qsub_type_id_audit,			q_audit_step_in.step,			q_audit_step_in.marked_for_deletion,			q_audit_step_in.last_updated_by_data_file_id,			q_audit_step_in.created_dts,			q_audit_step_in.updated_dts,			q_audit_step_in.created_by,			q_audit_step_in.updated_by,			q_audit_step_in.sort,			q_audit_step_in.qsub_type_id_event               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:q_event_audit_step_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.q_event_audit_step_to_v1 (q_event_audit_step_in q_event_audit_step) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'q_event_audit_step_to_v1 (q_event_audit_step_in q_event_audit_step)', '()', 'types_plus.q_event_audit_step_to_v1 q_event_audit_step_in q_event_audit_step existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''q_event_audit_step_to_v1''   and pg_get_function_identity_arguments(oid) = ''q_event_audit_step_in q_event_audit_step'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'q_event_audit_step_to_v1 (q_event_audit_step_in q_event_audit_step)', '()', 'types_plus.q_event_audit_step_to_v1 q_event_audit_step_in q_event_audit_step definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''q_event_audit_step_to_v1''   and pg_get_function_identity_arguments(oid) = ''q_event_audit_step_in q_event_audit_step'';', 'CREATE OR REPLACE FUNCTION types_plus.q_event_audit_step_to_v1(q_event_audit_step_in q_event_audit_step) RETURNS q_event_audit_step_v1 LANGUAGE sqlAS $function$                   SELECT			q_event_audit_step_in.id,			q_event_audit_step_in.qevent_id,			q_event_audit_step_in.qaudit_step_id,			q_event_audit_step_in.last_updated_by_data_file_id,			q_event_audit_step_in.updated_dts,			q_event_audit_step_in.created_dts,			q_event_audit_step_in.sort,			q_event_audit_step_in.marked_for_deletion,			q_event_audit_step_in.is_coached,			q_event_audit_step_in.notes,			q_event_audit_step_in.created_by,			q_event_audit_step_in.updated_by,			q_event_audit_step_in.step,			q_event_audit_step_in.qsub_type_id_event,			q_event_audit_step_in.status               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:q_event_person_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.q_event_person_to_v1 (q_event_person_in q_event_person) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'q_event_person_to_v1 (q_event_person_in q_event_person)', '()', 'types_plus.q_event_person_to_v1 q_event_person_in q_event_person existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''q_event_person_to_v1''   and pg_get_function_identity_arguments(oid) = ''q_event_person_in q_event_person'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'q_event_person_to_v1 (q_event_person_in q_event_person)', '()', 'types_plus.q_event_person_to_v1 q_event_person_in q_event_person definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''q_event_person_to_v1''   and pg_get_function_identity_arguments(oid) = ''q_event_person_in q_event_person'';', 'CREATE OR REPLACE FUNCTION types_plus.q_event_person_to_v1(q_event_person_in q_event_person) RETURNS q_event_person_v1 LANGUAGE sqlAS $function$                   SELECT			q_event_person_in.id,			q_event_person_in.web_user_id,			q_event_person_in.last_updated_by_data_file_id,			q_event_person_in.qevent_id,			q_event_person_in.created_dts,			q_event_person_in.updated_dts,			q_event_person_in.marked_for_deletion,			q_event_person_in.is_accountable,			q_event_person_in.send_email,			q_event_person_in.updated_by,			q_event_person_in.role_,			q_event_person_in.created_by               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:q_event_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.q_event_to_v1 (q_event_in q_event) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'q_event_to_v1 (q_event_in q_event)', '()', 'types_plus.q_event_to_v1 q_event_in q_event existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''q_event_to_v1''   and pg_get_function_identity_arguments(oid) = ''q_event_in q_event'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'q_event_to_v1 (q_event_in q_event)', '()', 'types_plus.q_event_to_v1 q_event_in q_event definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''q_event_to_v1''   and pg_get_function_identity_arguments(oid) = ''q_event_in q_event'';', 'CREATE OR REPLACE FUNCTION types_plus.q_event_to_v1(q_event_in q_event) RETURNS q_event_v1 LANGUAGE sqlAS $function$        SELECT			q_event_in.or_surgeon_people_id,			q_event_in.id,			q_event_in.qtype_id,			q_event_in.qsub_type_id,			q_event_in.inv_id,			q_event_in.scan_id,			q_event_in.assembly_id,			q_event_in.status_when_user_id,			q_event_in.facility_id,			q_event_in.last_updated_by_data_file_id,			q_event_in.status_reported_by_user_id,			q_event_in.status_done_user_id,			q_event_in.status_investigating_user_id,			q_event_in.datetime_local,			q_event_in.status_done_dts,			q_event_in.status_when_dts,			q_event_in.status_investigating_dts,			q_event_in.status_reported_dts,			q_event_in.updated_dts,			q_event_in.created_dts,			q_event_in.or_delay_minutes,			q_event_in.marked_for_deletion,			q_event_in.is_data_problem,			q_event_in.is_process_problem,			q_event_in.assembly_audit_prods,			q_event_in.is_coached,			q_event_in.updated_by,			q_event_in.or_room,			q_event_in.status_done_name,			q_event_in.status,			q_event_in.status_when_name,			q_event_in.desc_,			q_event_in.status_investigating_name,			q_event_in.or_delay_type,			q_event_in.status_reported_by_name,			q_event_in.notes,			q_event_in.created_by$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:q_level_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.q_level_to_v1 (q_level_in q_level) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'q_level_to_v1 (q_level_in q_level)', '()', 'types_plus.q_level_to_v1 q_level_in q_level existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''q_level_to_v1''   and pg_get_function_identity_arguments(oid) = ''q_level_in q_level'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'q_level_to_v1 (q_level_in q_level)', '()', 'types_plus.q_level_to_v1 q_level_in q_level definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''q_level_to_v1''   and pg_get_function_identity_arguments(oid) = ''q_level_in q_level'';', 'CREATE OR REPLACE FUNCTION types_plus.q_level_to_v1(q_level_in q_level) RETURNS q_level_v1 LANGUAGE sqlAS $function$                   SELECT			q_level_in.id,			q_level_in.hsys_id,			q_level_in.last_updated_by_data_file_id,			q_level_in.created_dts,			q_level_in.updated_dts,			q_level_in.level_,			q_level_in.marked_for_deletion,			q_level_in.created_by,			q_level_in.updated_by,			q_level_in.name_,			q_level_in.ascendco_name               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:q_subtype_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.q_subtype_to_v1 (q_subtype_in q_subtype) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'q_subtype_to_v1 (q_subtype_in q_subtype)', '()', 'types_plus.q_subtype_to_v1 q_subtype_in q_subtype existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''q_subtype_to_v1''   and pg_get_function_identity_arguments(oid) = ''q_subtype_in q_subtype'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'q_subtype_to_v1 (q_subtype_in q_subtype)', '()', 'types_plus.q_subtype_to_v1 q_subtype_in q_subtype definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''q_subtype_to_v1''   and pg_get_function_identity_arguments(oid) = ''q_subtype_in q_subtype'';', 'CREATE OR REPLACE FUNCTION types_plus.q_subtype_to_v1(q_subtype_in q_subtype) RETURNS q_subtype_v1 LANGUAGE sqlAS $function$        SELECT			q_subtype_in.id,			q_subtype_in.qtype_id,			q_subtype_in.qlevel_id,			q_subtype_in.facility_group_id,			q_subtype_in.facility_id,			q_subtype_in.hsys_id,			q_subtype_in.last_updated_by_data_file_id,			q_subtype_in.created_dts,			q_subtype_in.updated_dts,			q_subtype_in.is_available_in_assembly,			q_subtype_in.is_available_in_decon,			q_subtype_in.marked_for_deletion,			q_subtype_in.is_for_inv,			q_subtype_in.is_active,			q_subtype_in.ascendco_name,			q_subtype_in.updated_by,			q_subtype_in.type_,			q_subtype_in.available_for,			q_subtype_in.created_by,			q_subtype_in.name_,			q_subtype_in.item_type_ids$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:q_type_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.q_type_to_v1 (q_type_in q_type) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'q_type_to_v1 (q_type_in q_type)', '()', 'types_plus.q_type_to_v1 q_type_in q_type existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''q_type_to_v1''   and pg_get_function_identity_arguments(oid) = ''q_type_in q_type'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'q_type_to_v1 (q_type_in q_type)', '()', 'types_plus.q_type_to_v1 q_type_in q_type definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''q_type_to_v1''   and pg_get_function_identity_arguments(oid) = ''q_type_in q_type'';', 'CREATE OR REPLACE FUNCTION types_plus.q_type_to_v1(q_type_in q_type) RETURNS q_type_v1 LANGUAGE sqlAS $function$                   SELECT			q_type_in.id,			q_type_in.hsys_id,			q_type_in.last_updated_by_data_file_id,			q_type_in.created_dts,			q_type_in.updated_dts,			q_type_in.marked_for_deletion,			q_type_in.is_active,			q_type_in.updated_by,			q_type_in.created_by,			q_type_in.ascendco_name,			q_type_in.name_,			q_type_in.type_               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:rcl_get_record_id.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.rcl_get_record_id (rcl_id uuid) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'rcl_get_record_id (rcl_id uuid)', '()', 'ascendco.rcl_get_record_id rcl_id uuid existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''rcl_get_record_id''   and pg_get_function_identity_arguments(oid) = ''rcl_id uuid'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'rcl_get_record_id (rcl_id uuid)', '()', 'ascendco.rcl_get_record_id rcl_id uuid definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''rcl_get_record_id''   and pg_get_function_identity_arguments(oid) = ''rcl_id uuid'';', 'CREATE OR REPLACE FUNCTION ascendco.rcl_get_record_id(rcl_id uuid) RETURNS uuid LANGUAGE sqlAS $function$SELECT record_id  FROM record_changes_log WHERE id = $1;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:relkind_name.tests.sql------------------------------------------------------------------------------------- Checks for tools.relkind_name (relkind text, OUT relkind_name text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'relkind_name (relkind text, OUT relkind_name text)', '()', 'tools.relkind_name relkind text, OUT relkind_name text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''relkind_name''   and pg_get_function_identity_arguments(oid) = ''relkind text, OUT relkind_name text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'relkind_name (relkind text, OUT relkind_name text)', '()', 'tools.relkind_name relkind text, OUT relkind_name text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''relkind_name''   and pg_get_function_identity_arguments(oid) = ''relkind text, OUT relkind_name text'';', 'CREATE OR REPLACE FUNCTION tools.relkind_name(relkind text, OUT relkind_name text) RETURNS text LANGUAGE sqlAS $function$SELECT CASE  WHEN relkind = ''r'' THEN ''table''  WHEN relkind = ''i'' THEN ''index''  WHEN relkind = ''S'' THEN ''sequence''  WHEN relkind = ''t'' THEN ''TOAST table''  WHEN relkind = ''v'' THEN ''view''  WHEN relkind = ''m'' THEN ''materialized view''  WHEN relkind = ''c'' THEN ''composite type''  WHEN relkind = ''f'' THEN ''foreign table''  WHEN relkind = ''p'' THEN ''partitioned table''  WHEN relkind = ''I'' THEN ''partitioned index''  ELSE ''Unexpected relkind '' || relkindEND;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:rep_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.rep_to_v1 (rep_in rep) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'rep_to_v1 (rep_in rep)', '()', 'types_plus.rep_to_v1 rep_in rep existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''rep_to_v1''   and pg_get_function_identity_arguments(oid) = ''rep_in rep'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'rep_to_v1 (rep_in rep)', '()', 'types_plus.rep_to_v1 rep_in rep definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''rep_to_v1''   and pg_get_function_identity_arguments(oid) = ''rep_in rep'';', 'CREATE OR REPLACE FUNCTION types_plus.rep_to_v1(rep_in rep) RETURNS rep_v1 LANGUAGE sqlAS $function$                   SELECT			rep_in.id,			rep_in.user_id,			rep_in.hsys_id,			rep_in.sup_id,			rep_in.created_dts,			rep_in.updated_dts,			rep_in.marked_for_deletion,			rep_in.name_,			rep_in.phone,			rep_in.email,			rep_in.created_by,			rep_in.updated_by               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:row_count_estimate.tests.sql------------------------------------------------------------------------------------- Checks for tools.row_count_estimate (query text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'row_count_estimate (query text)', '()', 'tools.row_count_estimate query text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''row_count_estimate''   and pg_get_function_identity_arguments(oid) = ''query text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'row_count_estimate (query text)', '()', 'tools.row_count_estimate query text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''row_count_estimate''   and pg_get_function_identity_arguments(oid) = ''query text'';', 'CREATE OR REPLACE FUNCTION tools.row_count_estimate(query text) RETURNS bigint LANGUAGE plpgsqlAS $function$DECLARE   plan jsonb;BEGIN   EXECUTE ''EXPLAIN (FORMAT JSON) '' || query INTO plan;   RETURN (plan->0->''Plan''->>''Plan Rows'')::bigint;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:show_database_rights.tests.sql------------------------------------------------------------------------------------- Checks for dba.show_database_rights (d_name text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'show_database_rights (d_name text)', '()', 'dba.show_database_rights d_name text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''show_database_rights''   and pg_get_function_identity_arguments(oid) = ''d_name text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'show_database_rights (d_name text)', '()', 'dba.show_database_rights d_name text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''show_database_rights''   and pg_get_function_identity_arguments(oid) = ''d_name text'';', 'CREATE OR REPLACE FUNCTION dba.show_database_rights(d_name text) RETURNS TABLE(database_name text, user_name name, connect text, "create" text, temporary text) LANGUAGE sql STABLEAS $function$  	select d_name,				 u.usename,         CASE WHEN has_database_privilege(u.usename, ''nautilus'', ''connect'') = TRUE then ''X'' ELSE '' '' END AS connect,         CASE WHEN has_database_privilege(u.usename, ''nautilus'', ''create'') = TRUE then ''X'' ELSE '' '' END AS create,         CASE WHEN has_database_privilege(u.usename, ''nautilus'', ''temporary'') = TRUE then ''X'' ELSE '' '' END AS temporary				  	from  pg_user u	order by u.usename;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:show_functions.tests.sql------------------------------------------------------------------------------------- Checks for dba.show_functions () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'show_functions ()', '()', 'dba.show_functions  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''show_functions''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'show_functions ()', '()', 'dba.show_functions  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''show_functions''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION dba.show_functions() RETURNS TABLE(schema_name name, function_name name, function_type name, function_owner name, run_as text, language name, return_type name, strict text, returns_set text, comment text) LANGUAGE sql STABLEAS $function$ 	SELECT	n.nspname AS schema_name,	P.proname AS function_name,	typ.typname AS function_type,	pg_get_userbyid ( P.proowner ) AS function_owner,	CASE	WHEN P.prosecdef = TRUE THEN ''owner'' ELSE ''invoker'' END AS run_as,		l.lanname AS language,	typ.typname AS return_type,	CASE WHEN P.proisstrict = TRUE THEN ''True'' ELSE ''False'' END AS strict,	CASE WHEN P.proretset =   TRUE THEN ''True'' ELSE ''False'' END AS returns_set,	obj_description ( P.oid ) AS COMMENT FROM	pg_proc	P LEFT JOIN pg_type typ ON typ.oid = P.prorettype	LEFT JOIN pg_namespace typns ON typns.oid = typ.typnamespace	LEFT JOIN pg_namespace n ON n.oid = P.pronamespace	LEFT JOIN pg_language l ON l.oid = P.prolang	LEFT JOIN pg_user u ON P.proowner = u.usesysid	LEFT JOIN pg_database d ON d.datname = current_database () WHERE	P.prokind IN (''f'',''p'') -- Function or Procedure	AND n.nspname <> ''information_schema'' 	AND n.nspname <> ''pg_catalog'' ORDER BY	n.nspname,	P.proname ASC 	$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:show_owners.tests.sql------------------------------------------------------------------------------------- Checks for dba.show_owners () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'show_owners ()', '()', 'dba.show_owners  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''show_owners''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'show_owners ()', '()', 'dba.show_owners  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''show_owners''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION dba.show_owners() RETURNS TABLE(schema_name name, object_name name, owner_name name, object_type text) LANGUAGE sql STABLEAS $function$SELECT 	   nsp.nspname AS object_schema,       cls.relname AS object_name,        rol.rolname AS owner_name,        case cls.relkind         WHEN ''r'' THEN ''TABLE''         WHEN ''v'' THEN ''VIEW''         WHEN ''m'' THEN ''MATERIALIZED_VIEW''         WHEN ''i'' THEN ''INDEX''         WHEN ''S'' THEN ''SEQUENCE''         WHEN ''c'' THEN ''TYPE''         ELSE cls.relkind::text       END AS object_typeFROM pg_class cls  JOIN pg_roles rol ON rol.oid = cls.relowner  JOIN pg_namespace nsp ON nsp.oid = cls.relnamespaceWHERE nsp.nspname NOT IN (''information_schema'', ''pg_catalog'') AND			nsp.nspname NOT LIKE ''pg_toast%''ORDER BY  nsp.nspname, cls.relname;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:show_schema_rights.tests.sql------------------------------------------------------------------------------------- Checks for dba.show_schema_rights (s_name text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'show_schema_rights (s_name text)', '()', 'dba.show_schema_rights s_name text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''show_schema_rights''   and pg_get_function_identity_arguments(oid) = ''s_name text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'show_schema_rights (s_name text)', '()', 'dba.show_schema_rights s_name text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''show_schema_rights''   and pg_get_function_identity_arguments(oid) = ''s_name text'';', 'CREATE OR REPLACE FUNCTION dba.show_schema_rights(s_name text) RETURNS TABLE(schema_name text, user_name name, usage text, "create" text) LANGUAGE sql STABLEAS $function$  	select s_name,				 u.usename,	         CASE WHEN has_schema_privilege(u.usename, s_name, ''usage'') = TRUE then ''X'' ELSE '' '' END AS usage,         CASE WHEN has_schema_privilege(u.usename, s_name, ''create'') = TRUE then ''X'' ELSE '' '' END AS create				  	from  pg_user u	order by u.usename;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:show_table_rights.tests.sql------------------------------------------------------------------------------------- Checks for dba.show_table_rights (t_name text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'show_table_rights (t_name text)', '()', 'dba.show_table_rights t_name text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''show_table_rights''   and pg_get_function_identity_arguments(oid) = ''t_name text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'show_table_rights (t_name text)', '()', 'dba.show_table_rights t_name text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''show_table_rights''   and pg_get_function_identity_arguments(oid) = ''t_name text'';', 'CREATE OR REPLACE FUNCTION dba.show_table_rights(t_name text) RETURNS TABLE("Table_Name" name, "User_Name" name, "SELECT" text, "INSERT" text, "UPDATE" text, "DELETE" text, "TRUNCATE" text, "REFERENCES" text, "TRIGGER" text) LANGUAGE sql STABLEAS $function$	SELECT 				t.tablename,        u.usename,        CASE WHEN has_table_privilege(u.usename, concat(schemaname, ''.'', t.tablename), ''select'') = TRUE then ''X'' ELSE '' '' END AS select,        CASE WHEN has_table_privilege(u.usename, concat(schemaname, ''.'', t.tablename), ''insert'')= TRUE then ''X'' ELSE '' '' END AS insert,        CASE WHEN has_table_privilege(u.usename, concat(schemaname, ''.'', t.tablename), ''update'') = TRUE then ''X'' ELSE '' '' END AS update,        CASE WHEN has_table_privilege(u.usename, concat(schemaname, ''.'', t.tablename), ''delete'') = TRUE then ''X'' ELSE '' '' END AS delete,        CASE WHEN has_table_privilege(u.usename, concat(schemaname, ''.'', t.tablename), ''truncate'') = TRUE then ''X'' ELSE '' '' END AS truncate,        CASE WHEN has_table_privilege(u.usename, concat(schemaname, ''.'', t.tablename), ''references'') = TRUE then ''X'' ELSE '' '' END AS references,        CASE WHEN has_table_privilege(u.usename, concat(schemaname, ''.'', t.tablename), ''trigger'') = TRUE then ''X'' ELSE '' '' END AS trigger					FROM    pg_tables t,         					pg_user u                 	WHERE	  t.tablename = t_name		ORDER BY u.usename;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:show_view_rights.tests.sql------------------------------------------------------------------------------------- Checks for dba.show_view_rights (v_name text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'show_view_rights (v_name text)', '()', 'dba.show_view_rights v_name text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''show_view_rights''   and pg_get_function_identity_arguments(oid) = ''v_name text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'show_view_rights (v_name text)', '()', 'dba.show_view_rights v_name text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''show_view_rights''   and pg_get_function_identity_arguments(oid) = ''v_name text'';', 'CREATE OR REPLACE FUNCTION dba.show_view_rights(v_name text) RETURNS TABLE("View_Name" name, "User_Name" name, "SELECT" text, "INSERT" text, "UPDATE" text, "DELETE" text, "TRUNCATE" text, "REFERENCES" text, "TRIGGER" text) LANGUAGE sql STABLEAS $function$	SELECT		v.viewname,        u.usename,        CASE WHEN has_table_privilege(u.usename, concat(schemaname, ''.'', v.viewname), ''select'') = TRUE then ''X'' ELSE '' '' END AS select,        CASE WHEN has_table_privilege(u.usename, concat(schemaname, ''.'', v.viewname), ''insert'')= TRUE then ''X'' ELSE '' '' END AS insert,        CASE WHEN has_table_privilege(u.usename, concat(schemaname, ''.'', v.viewname), ''update'') = TRUE then ''X'' ELSE '' '' END AS update,        CASE WHEN has_table_privilege(u.usename, concat(schemaname, ''.'', v.viewname), ''delete'') = TRUE then ''X'' ELSE '' '' END AS delete,        CASE WHEN has_table_privilege(u.usename, concat(schemaname, ''.'', v.viewname), ''truncate'') = TRUE then ''X'' ELSE '' '' END AS truncate,        CASE WHEN has_table_privilege(u.usename, concat(schemaname, ''.'', v.viewname), ''references'') = TRUE then ''X'' ELSE '' '' END AS references,        CASE WHEN has_table_privilege(u.usename, concat(schemaname, ''.'', v.viewname), ''trigger'') = TRUE then ''X'' ELSE '' '' END AS trigger	FROM    pg_views v,			pg_user u	WHERE	  v.viewname = v_name	ORDER BY u.usename;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:specialty_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.specialty_to_v1 (specialty_in specialty) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'specialty_to_v1 (specialty_in specialty)', '()', 'types_plus.specialty_to_v1 specialty_in specialty existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''specialty_to_v1''   and pg_get_function_identity_arguments(oid) = ''specialty_in specialty'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'specialty_to_v1 (specialty_in specialty)', '()', 'types_plus.specialty_to_v1 specialty_in specialty definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''specialty_to_v1''   and pg_get_function_identity_arguments(oid) = ''specialty_in specialty'';', 'CREATE OR REPLACE FUNCTION types_plus.specialty_to_v1(specialty_in specialty) RETURNS specialty_v1 LANGUAGE sqlAS $function$        SELECT			specialty_in.id,			specialty_in.data_file_id,			specialty_in.marked_for_deletion,			specialty_in.name_,			specialty_in.name_short$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:stat_facility_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.stat_facility_to_v1 (stat_facility_in stat_facility) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'stat_facility_to_v1 (stat_facility_in stat_facility)', '()', 'types_plus.stat_facility_to_v1 stat_facility_in stat_facility existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''stat_facility_to_v1''   and pg_get_function_identity_arguments(oid) = ''stat_facility_in stat_facility'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'stat_facility_to_v1 (stat_facility_in stat_facility)', '()', 'types_plus.stat_facility_to_v1 stat_facility_in stat_facility definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''stat_facility_to_v1''   and pg_get_function_identity_arguments(oid) = ''stat_facility_in stat_facility'';', 'CREATE OR REPLACE FUNCTION types_plus.stat_facility_to_v1(stat_facility_in stat_facility) RETURNS stat_facility_v1 LANGUAGE sqlAS $function$        SELECT			stat_facility_in.id,			stat_facility_in.facility_id,			stat_facility_in.hsys_id,			stat_facility_in.date_,			stat_facility_in.category,			stat_facility_in.item_type,			stat_facility_in.stat_type,			stat_facility_in.is_most_recent,			stat_facility_in.in_data_cleanse_scope,			stat_facility_in.items_inactive,			stat_facility_in.items_count,			stat_facility_in.items_qty,			stat_facility_in.items_inventoried,			stat_facility_in.items_to_inventory,			stat_facility_in.items_named,			stat_facility_in.items_to_name,			stat_facility_in.inst_qty,			stat_facility_in.items_has_loc,			stat_facility_in.items_missing_locs,			stat_facility_in.item_prods_count,			stat_facility_in.item_prods_missing_part_nos_thier,			stat_facility_in.item_prods_missing_vendors_thier,			stat_facility_in.item_prods_dr_pref,			stat_facility_in.item_prods_critical,			stat_facility_in.item_prods_not_linked,			stat_facility_in.item_prods_missing_part_nos,			stat_facility_in.item_prods_missing_vendors,			stat_facility_in.item_prods_cant_determine,			stat_facility_in.item_prods_linked,			stat_facility_in.sup_prods_count,			stat_facility_in.sups_count,			stat_facility_in.prods_count,			stat_facility_in.prods_with_pic,			stat_facility_in.prods_without_pic,			stat_facility_in.item_prods_verified,			stat_facility_in.item_prods_expert_linked,			stat_facility_in.item_prods_dup_names_their,			stat_facility_in.item_prods_dup_names,			stat_facility_in.prods_named,			stat_facility_in.part_nos_fixed,			stat_facility_in.invs_inactive,			stat_facility_in.invs_count,			stat_facility_in.invs_found,			stat_facility_in.emr_items_count,			stat_facility_in.emr_items_linked,			stat_facility_in.emr_items_matches_their_name,			stat_facility_in.emr_items_matches_our_name,			stat_facility_in.emr_items_no_match_their_name,			stat_facility_in.emr_items_no_match_our_name,			stat_facility_in.emr_items_dups$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:sterilize_method_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.sterilize_method_to_v1 (sterilize_method_in sterilize_method) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'sterilize_method_to_v1 (sterilize_method_in sterilize_method)', '()', 'types_plus.sterilize_method_to_v1 sterilize_method_in sterilize_method existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''sterilize_method_to_v1''   and pg_get_function_identity_arguments(oid) = ''sterilize_method_in sterilize_method'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'sterilize_method_to_v1 (sterilize_method_in sterilize_method)', '()', 'types_plus.sterilize_method_to_v1 sterilize_method_in sterilize_method definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''sterilize_method_to_v1''   and pg_get_function_identity_arguments(oid) = ''sterilize_method_in sterilize_method'';', 'CREATE OR REPLACE FUNCTION types_plus.sterilize_method_to_v1(sterilize_method_in sterilize_method) RETURNS sterilize_method_v1 LANGUAGE sqlAS $function$        SELECT			sterilize_method_in.id,			sterilize_method_in.data_file_id,			sterilize_method_in.marked_for_deletion,			sterilize_method_in.name_$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:sterilize_params_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.sterilize_params_to_v1 (sterilize_params_in sterilize_params) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'sterilize_params_to_v1 (sterilize_params_in sterilize_params)', '()', 'types_plus.sterilize_params_to_v1 sterilize_params_in sterilize_params existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''sterilize_params_to_v1''   and pg_get_function_identity_arguments(oid) = ''sterilize_params_in sterilize_params'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'sterilize_params_to_v1 (sterilize_params_in sterilize_params)', '()', 'types_plus.sterilize_params_to_v1 sterilize_params_in sterilize_params definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''sterilize_params_to_v1''   and pg_get_function_identity_arguments(oid) = ''sterilize_params_in sterilize_params'';', 'CREATE OR REPLACE FUNCTION types_plus.sterilize_params_to_v1(sterilize_params_in sterilize_params) RETURNS sterilize_params_v1 LANGUAGE sqlAS $function$        SELECT			sterilize_params_in.id,			sterilize_params_in.data_file_id,			sterilize_params_in.marked_for_deletion,			sterilize_params_in.hsys_id,			sterilize_params_in.sterilize_method_id,			sterilize_params_in.name_$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:sterilizer_load_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.sterilizer_load_to_v1 (sterilizer_load_in sterilizer_load) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'sterilizer_load_to_v1 (sterilizer_load_in sterilizer_load)', '()', 'types_plus.sterilizer_load_to_v1 sterilizer_load_in sterilizer_load existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''sterilizer_load_to_v1''   and pg_get_function_identity_arguments(oid) = ''sterilizer_load_in sterilizer_load'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'sterilizer_load_to_v1 (sterilizer_load_in sterilizer_load)', '()', 'types_plus.sterilizer_load_to_v1 sterilizer_load_in sterilizer_load definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''sterilizer_load_to_v1''   and pg_get_function_identity_arguments(oid) = ''sterilizer_load_in sterilizer_load'';', 'CREATE OR REPLACE FUNCTION types_plus.sterilizer_load_to_v1(sterilizer_load_in sterilizer_load) RETURNS sterilizer_load_v1 LANGUAGE sqlAS $function$        SELECT			sterilizer_load_in.id,			sterilizer_load_in.data_file_id,			sterilizer_load_in.marked_for_deletion,			sterilizer_load_in.sterilize_method_id,			sterilizer_load_in.sterilizer_id,			sterilizer_load_in.sterilize_params_id,			sterilizer_load_in.created_dts,			sterilizer_load_in.load_no,			sterilizer_load_in.status_building_dts,			sterilizer_load_in.status_sterilizing_dts,			sterilizer_load_in.status_cooling_dts,			sterilizer_load_in.status_done_dts,			sterilizer_load_in.notes,			sterilizer_load_in.failed_notes,			sterilizer_load_in.utcoffset_seconds$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:sterilizer_load_to_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.sterilizer_load_to_v2 (sterilizer_load_in sterilizer_load) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'sterilizer_load_to_v2 (sterilizer_load_in sterilizer_load)', '()', 'types_plus.sterilizer_load_to_v2 sterilizer_load_in sterilizer_load existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''sterilizer_load_to_v2''   and pg_get_function_identity_arguments(oid) = ''sterilizer_load_in sterilizer_load'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'sterilizer_load_to_v2 (sterilizer_load_in sterilizer_load)', '()', 'types_plus.sterilizer_load_to_v2 sterilizer_load_in sterilizer_load definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''sterilizer_load_to_v2''   and pg_get_function_identity_arguments(oid) = ''sterilizer_load_in sterilizer_load'';', 'CREATE OR REPLACE FUNCTION types_plus.sterilizer_load_to_v2(sterilizer_load_in sterilizer_load) RETURNS sterilizer_load_v2 LANGUAGE sqlAS $function$        SELECT			sterilizer_load_in.id,			sterilizer_load_in.data_file_id,			sterilizer_load_in.marked_for_deletion,			sterilizer_load_in.sterilize_method_id,			sterilizer_load_in.sterilizer_id,			sterilizer_load_in.sterilize_params_id,			sterilizer_load_in.created_dts,			sterilizer_load_in.load_no,			sterilizer_load_in.status_building_dts,			sterilizer_load_in.status_sterilizing_dts,			sterilizer_load_in.status_cooling_dts,			sterilizer_load_in.status_done_dts,			sterilizer_load_in.notes,			sterilizer_load_in.failed_notes,			sterilizer_load_in.utcoffset_seconds$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:sterilizer_log_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.sterilizer_log_to_v1 (sterilizer_log_in sterilizer_log) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'sterilizer_log_to_v1 (sterilizer_log_in sterilizer_log)', '()', 'types_plus.sterilizer_log_to_v1 sterilizer_log_in sterilizer_log existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''sterilizer_log_to_v1''   and pg_get_function_identity_arguments(oid) = ''sterilizer_log_in sterilizer_log'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'sterilizer_log_to_v1 (sterilizer_log_in sterilizer_log)', '()', 'types_plus.sterilizer_log_to_v1 sterilizer_log_in sterilizer_log definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''sterilizer_log_to_v1''   and pg_get_function_identity_arguments(oid) = ''sterilizer_log_in sterilizer_log'';', 'CREATE OR REPLACE FUNCTION types_plus.sterilizer_log_to_v1(sterilizer_log_in sterilizer_log) RETURNS sterilizer_log_v1 LANGUAGE sqlAS $function$        SELECT			sterilizer_log_in.id,			sterilizer_log_in.data_file_id,			sterilizer_log_in.log_type,			sterilizer_log_in.summary_json,			sterilizer_log_in.log_xml$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:sterilizer_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.sterilizer_to_v1 (sterilizer_in sterilizer) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'sterilizer_to_v1 (sterilizer_in sterilizer)', '()', 'types_plus.sterilizer_to_v1 sterilizer_in sterilizer existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''sterilizer_to_v1''   and pg_get_function_identity_arguments(oid) = ''sterilizer_in sterilizer'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'sterilizer_to_v1 (sterilizer_in sterilizer)', '()', 'types_plus.sterilizer_to_v1 sterilizer_in sterilizer definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''sterilizer_to_v1''   and pg_get_function_identity_arguments(oid) = ''sterilizer_in sterilizer'';', 'CREATE OR REPLACE FUNCTION types_plus.sterilizer_to_v1(sterilizer_in sterilizer) RETURNS sterilizer_v1 LANGUAGE sqlAS $function$                   SELECT			sterilizer_in.id,			sterilizer_in.data_file_id,			sterilizer_in.marked_for_deletion,			sterilizer_in.facility_id,			sterilizer_in.sterilize_method_id,			sterilizer_in.name_               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:sup_parent_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.sup_parent_to_v1 (sup_parent_in sup_parent) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'sup_parent_to_v1 (sup_parent_in sup_parent)', '()', 'types_plus.sup_parent_to_v1 sup_parent_in sup_parent existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''sup_parent_to_v1''   and pg_get_function_identity_arguments(oid) = ''sup_parent_in sup_parent'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'sup_parent_to_v1 (sup_parent_in sup_parent)', '()', 'types_plus.sup_parent_to_v1 sup_parent_in sup_parent definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''sup_parent_to_v1''   and pg_get_function_identity_arguments(oid) = ''sup_parent_in sup_parent'';', 'CREATE OR REPLACE FUNCTION types_plus.sup_parent_to_v1(sup_parent_in sup_parent) RETURNS sup_parent_v1 LANGUAGE sqlAS $function$                   SELECT			sup_parent_in.id,			sup_parent_in.created_dts,			sup_parent_in.updated_dts,			sup_parent_in.marked_for_deletion,			sup_parent_in.name_,			sup_parent_in.created_by,			sup_parent_in.updated_by               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:sup_to_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.sup_to_v2 (sup_in sup) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'sup_to_v2 (sup_in sup)', '()', 'types_plus.sup_to_v2 sup_in sup existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''sup_to_v2''   and pg_get_function_identity_arguments(oid) = ''sup_in sup'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'sup_to_v2 (sup_in sup)', '()', 'types_plus.sup_to_v2 sup_in sup definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''sup_to_v2''   and pg_get_function_identity_arguments(oid) = ''sup_in sup'';', 'CREATE OR REPLACE FUNCTION types_plus.sup_to_v2(sup_in sup) RETURNS sup_v2 LANGUAGE sqlAS $function$                   SELECT			sup_in.id,			sup_in.custom_facility_id,			sup_in.sup_parent_id,			sup_in.created_dts,			sup_in.updated_dts,			sup_in.is_custom_by_facility,			sup_in.marked_for_deletion,			sup_in.is_available_for_loaners,			sup_in.name_,			sup_in.created_by,			sup_in.updated_by,			sup_in.short_name               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:system_analyze_after_deletions.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.system_analyze_after_deletions () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'system_analyze_after_deletions ()', '()', 'ascendco.system_analyze_after_deletions  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''system_analyze_after_deletions''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'system_analyze_after_deletions ()', '()', 'ascendco.system_analyze_after_deletions  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''system_analyze_after_deletions''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION ascendco.system_analyze_after_deletions() RETURNS void LANGUAGE plpgsqlAS $function$BEGIN	analyze ascendco.analytic_productivity;	analyze ascendco.analytic_sterilizer_load;	analyze ascendco.analytic_sterilizer_loadinv;	analyze ascendco.item_type;	analyze ascendco.specialty;	analyze ascendco.sterilize_method;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:system_delete_marked.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.system_delete_marked () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'system_delete_marked ()', '()', 'ascendco.system_delete_marked  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''system_delete_marked''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'system_delete_marked ()', '()', 'ascendco.system_delete_marked  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''system_delete_marked''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION ascendco.system_delete_marked() RETURNS TABLE(schema text, table_name text, count integer) LANGUAGE plpgsqlAS $function$BEGINRETURN QUERY   select ''ascendco'',''analytic_productivity'', deleted_count from table_delete_marked(''ascendco.analytic_productivity'') union all   select ''ascendco'',''analytic_sterilizer_load'', deleted_count from table_delete_marked(''ascendco.analytic_sterilizer_load'') union all   select ''ascendco'',''analytic_sterilizer_loadinv'', deleted_count from table_delete_marked(''ascendco.analytic_sterilizer_loadinv'') union all   select ''ascendco'',''item_type'', deleted_count from table_delete_marked(''ascendco.item_type'') union all   select ''ascendco'',''specialty'', deleted_count from table_delete_marked(''ascendco.specialty'') union all   select ''ascendco'',''sterilize_method'', deleted_count from table_delete_marked(''ascendco.sterilize_method'');END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:table_delete_marked.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.table_delete_marked (table_name regclass, OUT deleted_count integer) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'table_delete_marked (table_name regclass, OUT deleted_count integer)', '()', 'ascendco.table_delete_marked table_name regclass, OUT deleted_count integer existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''table_delete_marked''   and pg_get_function_identity_arguments(oid) = ''table_name regclass, OUT deleted_count integer'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'table_delete_marked (table_name regclass, OUT deleted_count integer)', '()', 'ascendco.table_delete_marked table_name regclass, OUT deleted_count integer definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''table_delete_marked''   and pg_get_function_identity_arguments(oid) = ''table_name regclass, OUT deleted_count integer'';', 'CREATE OR REPLACE FUNCTION ascendco.table_delete_marked(table_name regclass, OUT deleted_count integer) RETURNS integer LANGUAGE plpgsqlAS $function$DECLARE	schema_name_text text := (select relnamespace::regnamespace::text							from pg_catalog.pg_class						   where oid = table_name);   table_name_text  text := table_name::text;BEGIN/* Woah! What''s happening? EXECUTE? Yes, concatenation is safe here because table_nameis ::regclass, not text. The regclass magic type is designed to be injection proof.For more involved work, see format(), quote_ident(), and commentary/docs on dynamic SQLgenerally. It''s all be thought through well. Also seehttps://ascendco.atlassian.net/wiki/spaces/SON/pages/767459342/Deleting+Records+on+Postgres*/	EXECUTE ''delete from '' || schema_name_text || ''.'' || table_name_text || '' where marked_for_deletion = true;'';	GET DIAGNOSTICS deleted_count = ROW_COUNT;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:test_case_setup.tests.sql------------------------------------------------------------------------------------- Checks for dba.test_case_setup (object_class_in citext, object_schema_in citext, object_name_in citext, function_signature_in citext, test_name_in citext, test_code_in text, expected_response_in citext, expected_error_in citext, response_type_in citext, comparison_options_in jsonb, expected_outcome_in test_outcome, run_as_in user_name[], modifies_data_in boolean, rds_only_in boolean, setup_code_in citext, teardown_code_in citext) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'test_case_setup (object_class_in citext, object_schema_in citext, object_name_in citext, function_signature_in citext, test_name_in citext, test_code_in text, expected_response_in citext, expected_error_in citext, response_type_in citext, comparison_options_in jsonb, expected_outcome_in test_outcome, run_as_in user_name[], modifies_data_in boolean, rds_only_in boolean, setup_code_in citext, teardown_code_in citext)', '()', 'dba.test_case_setup object_class_in citext, object_schema_in citext, object_name_in citext, function_signature_in citext, test_name_in citext, test_code_in text, expected_response_in citext, expected_error_in citext, response_type_in citext, comparison_options_in jsonb, expected_outcome_in test_outcome, run_as_in user_name[], modifies_data_in boolean, rds_only_in boolean, setup_code_in citext, teardown_code_in citext existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''test_case_setup''   and pg_get_function_identity_arguments(oid) = ''object_class_in citext, object_schema_in citext, object_name_in citext, function_signature_in citext, test_name_in citext, test_code_in text, expected_response_in citext, expected_error_in citext, response_type_in citext, comparison_options_in jsonb, expected_outcome_in test_outcome, run_as_in user_name[], modifies_data_in boolean, rds_only_in boolean, setup_code_in citext, teardown_code_in citext'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'test_case_setup (object_class_in citext, object_schema_in citext, object_name_in citext, function_signature_in citext, test_name_in citext, test_code_in text, expected_response_in citext, expected_error_in citext, response_type_in citext, comparison_options_in jsonb, expected_outcome_in test_outcome, run_as_in user_name[], modifies_data_in boolean, rds_only_in boolean, setup_code_in citext, teardown_code_in citext)', '()', 'dba.test_case_setup object_class_in citext, object_schema_in citext, object_name_in citext, function_signature_in citext, test_name_in citext, test_code_in text, expected_response_in citext, expected_error_in citext, response_type_in citext, comparison_options_in jsonb, expected_outcome_in test_outcome, run_as_in user_name[], modifies_data_in boolean, rds_only_in boolean, setup_code_in citext, teardown_code_in citext definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''test_case_setup''   and pg_get_function_identity_arguments(oid) = ''object_class_in citext, object_schema_in citext, object_name_in citext, function_signature_in citext, test_name_in citext, test_code_in text, expected_response_in citext, expected_error_in citext, response_type_in citext, comparison_options_in jsonb, expected_outcome_in test_outcome, run_as_in user_name[], modifies_data_in boolean, rds_only_in boolean, setup_code_in citext, teardown_code_in citext'';', 'CREATE OR REPLACE FUNCTION dba.test_case_setup(object_class_in citext, object_schema_in citext, object_name_in citext, function_signature_in citext, test_name_in citext, test_code_in text, expected_response_in citext, expected_error_in citext, response_type_in citext, comparison_options_in jsonb, expected_outcome_in test_outcome, run_as_in user_name[], modifies_data_in boolean DEFAULT true, rds_only_in boolean DEFAULT false, setup_code_in citext DEFAULT ''''::citext, teardown_code_in citext DEFAULT ''''::citext) RETURNS test_case LANGUAGE sqlAS $function$INSERT INTO test_case (               object_class,               object_schema,               object_name,               function_signature,               test_name,               test_code,               expected_response,               expected_error,               response_type,               comparison_options,               expected_outcome,               run_as,               modifies_data,               rds_only,               setup_code,               teardown_code)       VALUES (               object_class_in,               object_schema_in,               object_name_in,               function_signature_in,               test_name_in,               test_code_in,               expected_response_in,               expected_error_in,               response_type_in,               comparison_options_in,               expected_outcome_in,               run_as_in,               modifies_data_in,               rds_only_in,               setup_code_in,               teardown_code_in)-- Using a synthetic uuid id field, but there''s also a uniqueness check on-- object_class,object_schema,object_name,function_signature,test_name		ON CONFLICT ON CONSTRAINT test_case_unique_signature			DO UPDATE SET			   test_code               = test_code_in,			   expected_response       = expected_response_in,			   expected_error          = expected_error_in,			   response_type           = response_type_in,			   comparison_options      = comparison_options_in,			   expected_outcome        = expected_outcome_in,			   run_as                  = run_as_in,			   modifies_data           = modifies_data_in,			   rds_only                = rds_only_in,			   setup_code              = setup_code_in,			   teardown_code           = teardown_code_in       RETURNING *;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:test_result_insert.tests.sql------------------------------------------------------------------------------------- Checks for dba.test_result_insert (test_case_id_in uuid, test_passed_in boolean, actual_outcome_in test_outcome, user_name_in user_name, patch_log_id_in uuid, actual_response_in citext, actual_error_in citext, diagnostics_in citext, summary_in citext, results_json_in jsonb) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'test_result_insert (test_case_id_in uuid, test_passed_in boolean, actual_outcome_in test_outcome, user_name_in user_name, patch_log_id_in uuid, actual_response_in citext, actual_error_in citext, diagnostics_in citext, summary_in citext, results_json_in jsonb)', '()', 'dba.test_result_insert test_case_id_in uuid, test_passed_in boolean, actual_outcome_in test_outcome, user_name_in user_name, patch_log_id_in uuid, actual_response_in citext, actual_error_in citext, diagnostics_in citext, summary_in citext, results_json_in jsonb existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''test_result_insert''   and pg_get_function_identity_arguments(oid) = ''test_case_id_in uuid, test_passed_in boolean, actual_outcome_in test_outcome, user_name_in user_name, patch_log_id_in uuid, actual_response_in citext, actual_error_in citext, diagnostics_in citext, summary_in citext, results_json_in jsonb'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'test_result_insert (test_case_id_in uuid, test_passed_in boolean, actual_outcome_in test_outcome, user_name_in user_name, patch_log_id_in uuid, actual_response_in citext, actual_error_in citext, diagnostics_in citext, summary_in citext, results_json_in jsonb)', '()', 'dba.test_result_insert test_case_id_in uuid, test_passed_in boolean, actual_outcome_in test_outcome, user_name_in user_name, patch_log_id_in uuid, actual_response_in citext, actual_error_in citext, diagnostics_in citext, summary_in citext, results_json_in jsonb definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''test_result_insert''   and pg_get_function_identity_arguments(oid) = ''test_case_id_in uuid, test_passed_in boolean, actual_outcome_in test_outcome, user_name_in user_name, patch_log_id_in uuid, actual_response_in citext, actual_error_in citext, diagnostics_in citext, summary_in citext, results_json_in jsonb'';', 'CREATE OR REPLACE FUNCTION dba.test_result_insert(test_case_id_in uuid, test_passed_in boolean, actual_outcome_in test_outcome, user_name_in user_name, patch_log_id_in uuid DEFAULT NULL::uuid, actual_response_in citext DEFAULT ''''::citext, actual_error_in citext DEFAULT ''''::citext, diagnostics_in citext DEFAULT ''''::citext, summary_in citext DEFAULT ''''::citext, results_json_in jsonb DEFAULT ''{}''::jsonb) RETURNS test_result LANGUAGE sqlAS $function$INSERT INTO test_result (	           test_case_id,	           actual_outcome,	           test_passed,	           patch_log_id,	           actual_response,	           actual_error,	           summary,	           diagnostics,	           results_json,	           user_name)       VALUES (test_case_id_in,	           actual_outcome_in,	           test_passed_in,	           patch_log_id_in,	           actual_response_in,	           actual_error_in,	           summary_in,	           diagnostics_in,	           results_json_in,	           user_name_in::user_name) -- user_name is a custom domain.		ON CONFLICT ON CONSTRAINT test_result_case_and_user_unique			DO UPDATE SET			   actual_outcome  = actual_outcome_in,               test_passed     = test_passed_in,               patch_log_id    = patch_log_id_in,               actual_response = actual_response_in,               actual_error    = actual_error_in,               summary         = summary_in,               diagnostics     = diagnostics_in,               results_json    = results_json_in,               user_name       = user_name_in::user_name -- user_name is a custom domain       RETURNING *$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:text_collection_get_id.tests.sql------------------------------------------------------------------------------------- Checks for tools.text_collection_get_id (name_in citext) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'text_collection_get_id (name_in citext)', '()', 'tools.text_collection_get_id name_in citext existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''text_collection_get_id''   and pg_get_function_identity_arguments(oid) = ''name_in citext'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'text_collection_get_id (name_in citext)', '()', 'tools.text_collection_get_id name_in citext definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''text_collection_get_id''   and pg_get_function_identity_arguments(oid) = ''name_in citext'';', 'CREATE OR REPLACE FUNCTION tools.text_collection_get_id(name_in citext) RETURNS uuid LANGUAGE sqlAS $function$SELECT coalesce(id, ''00000000-0000-0000-0000-000000000000'') AS id  FROM text_collection WHERE collection_name = name_in;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:trigger_function_calendar_day_before_insert.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.trigger_function_calendar_day_before_insert () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_calendar_day_before_insert ()', '()', 'ascendco.trigger_function_calendar_day_before_insert  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_calendar_day_before_insert''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_calendar_day_before_insert ()', '()', 'ascendco.trigger_function_calendar_day_before_insert  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_calendar_day_before_insert''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION ascendco.trigger_function_calendar_day_before_insert() RETURNS trigger LANGUAGE plpgsqlAS $function$BEGIN	NEW.id := NEW.calendar_id || ''.'' || TO_CHAR(NEW.date_actual, ''YYYY-MM-DD''); RETURN NEW;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:trigger_function_calendar_year_before_upsert.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.trigger_function_calendar_year_before_upsert () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_calendar_year_before_upsert ()', '()', 'ascendco.trigger_function_calendar_year_before_upsert  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_calendar_year_before_upsert''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_calendar_year_before_upsert ()', '()', 'ascendco.trigger_function_calendar_year_before_upsert  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_calendar_year_before_upsert''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION ascendco.trigger_function_calendar_year_before_upsert() RETURNS trigger LANGUAGE plpgsqlAS $function$BEGIN	NEW.first_day_of_week_usa := extract (dow from NEW.first_date_in_year) +1; -- 1-7, Sunday-Saturday, USA style.	NEW.first_day_of_week_iso := extract (isodow from NEW.first_date_in_year); -- 1-7, Monday-Sunday, ISO style. RETURN NEW;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:trigger_function_log_deletion_count.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.trigger_function_log_deletion_count () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_log_deletion_count ()', '()', 'ascendco.trigger_function_log_deletion_count  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_log_deletion_count''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_log_deletion_count ()', '()', 'ascendco.trigger_function_log_deletion_count  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_log_deletion_count''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION ascendco.trigger_function_log_deletion_count() RETURNS trigger LANGUAGE plpgsqlAS $function$DECLAREdeleted_count int := (select count(*) from deleted_rows);BEGINIF deleted_count > 0 THEN	   insert into ascendco.deletion_log				   (operation_name,				   schema_name,				   table_name,				   deleted_count)			 select TG_OP,					TG_TABLE_SCHEMA,					TG_TABLE_NAME,					deleted_count;END IF;	RETURN NULL;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:trigger_function_log_truncation_count.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.trigger_function_log_truncation_count () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_log_truncation_count ()', '()', 'ascendco.trigger_function_log_truncation_count  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_log_truncation_count''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_log_truncation_count ()', '()', 'ascendco.trigger_function_log_truncation_count  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_log_truncation_count''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION ascendco.trigger_function_log_truncation_count() RETURNS trigger LANGUAGE plpgsqlAS $function$DECLARE  deleted_count int := 0;BEGIN/*I had:EXECUTE ''select count(1) from '' || TG_TABLE_NAME into deleted_count;If there are identical table names in different schemas could go wonky:https://stackoverflow.com/questions/57193314/what-is-the-easiest-way-to-get-the-number-of-rows-affected-in-an-after-truncate/The solution offered in that thread doesn''t quite work, but EXECUTE FORMAT (query) INTO does work, as listed below.*/EXECUTE FORMAT(''SELECT count(1) FROM %s'', TG_RELID::regclass)   INTO deleted_count;   IF deleted_count > 0 THEN	   insert into deletion_log				  (operation_name,				   schema_name,				   table_name,				   deleted_count)			select TG_OP,				   TG_TABLE_SCHEMA,				   TG_TABLE_NAME,				   deleted_count;    END IF;    RETURN NULL;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:trigger_function_outlier_upsert.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.trigger_function_outlier_upsert () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_outlier_upsert ()', '()', 'ascendco.trigger_function_outlier_upsert  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_outlier_upsert''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_outlier_upsert ()', '()', 'ascendco.trigger_function_outlier_upsert  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_outlier_upsert''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION ascendco.trigger_function_outlier_upsert() RETURNS trigger LANGUAGE plpgsqlAS $function$BEGIN    NEW.last_changed_dts := NOW();	NEW.change_count     := COALESCE(OLD.change_count,0) + 1;    RETURN NEW;    		 -- important!END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:trigger_function_record_changes_log_detail_after_insert.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.trigger_function_record_changes_log_detail_after_insert () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_record_changes_log_detail_after_insert ()', '()', 'ascendco.trigger_function_record_changes_log_detail_after_insert  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_record_changes_log_detail_after_insert''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_record_changes_log_detail_after_insert ()', '()', 'ascendco.trigger_function_record_changes_log_detail_after_insert  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_record_changes_log_detail_after_insert''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION ascendco.trigger_function_record_changes_log_detail_after_insert() RETURNS trigger LANGUAGE plpgsqlAS $function$BEGIN   IF NEW.record_id IS NULL THEN			RAISE EXCEPTION ''ERROR:  null value in column record_id violates not-null constraint'';   END IF;	 RETURN NEW;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:trigger_function_record_changes_log_detail_before_insert.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.trigger_function_record_changes_log_detail_before_insert () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_record_changes_log_detail_before_insert ()', '()', 'ascendco.trigger_function_record_changes_log_detail_before_insert  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_record_changes_log_detail_before_insert''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_record_changes_log_detail_before_insert ()', '()', 'ascendco.trigger_function_record_changes_log_detail_before_insert  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_record_changes_log_detail_before_insert''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION ascendco.trigger_function_record_changes_log_detail_before_insert() RETURNS trigger LANGUAGE plpgsqlAS $function$BEGIN	NEW.record_id := rcl_get_record_id (NEW.record_changes_log_id); RETURN NEW;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:trigger_function_record_changes_log_detail_stop_duplicates.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.trigger_function_record_changes_log_detail_stop_duplicates () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_record_changes_log_detail_stop_duplicates ()', '()', 'ascendco.trigger_function_record_changes_log_detail_stop_duplicates  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_record_changes_log_detail_stop_duplicates''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_record_changes_log_detail_stop_duplicates ()', '()', 'ascendco.trigger_function_record_changes_log_detail_stop_duplicates  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_record_changes_log_detail_stop_duplicates''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION ascendco.trigger_function_record_changes_log_detail_stop_duplicates() RETURNS trigger LANGUAGE plpgsqlAS $function$BEGINIF EXISTS (SELECT 1 FROM record_changes_log_detail           WHERE (           	record_changes_log_id,           	hashtext(field_name || old_value || new_value))             =             (NEW.record_changes_log_id,           	hashtext(NEW.field_name || NEW.old_value || NEW.new_value))) THEN   RETURN NULL;END IF;RETURN NEW;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:trigger_function_row_compare_upsert.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.trigger_function_row_compare_upsert () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_row_compare_upsert ()', '()', 'ascendco.trigger_function_row_compare_upsert  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_row_compare_upsert''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_row_compare_upsert ()', '()', 'ascendco.trigger_function_row_compare_upsert  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_row_compare_upsert''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION ascendco.trigger_function_row_compare_upsert() RETURNS trigger LANGUAGE plpgsqlAS $function$BEGIN	IF  NEW.hash_1 = NULL OR	    NEW.hash_2 = NULL THEN	    RETURN NEW; -- Don''t do the comparison, hash_1 hasn''t been populated yet.	ELSE-- Do the comparison. The point of this is to avoid constantly thrashing the expression index.	   NEW.hashes_match := NEW.hash_1 = NEW.hash_2;      RETURN NEW;     -- important!   END IF;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:trigger_function_update_last_updated_dts.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.trigger_function_update_last_updated_dts () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_update_last_updated_dts ()', '()', 'ascendco.trigger_function_update_last_updated_dts  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_update_last_updated_dts''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_update_last_updated_dts ()', '()', 'ascendco.trigger_function_update_last_updated_dts  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_update_last_updated_dts''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION ascendco.trigger_function_update_last_updated_dts() RETURNS trigger LANGUAGE plpgsql STABLEAS $function$BEGIN  NEW.last_updated_dts = NOW(); -- Now *IS* a STABLE function, it''s safe to use in a STABLE UDF.  RETURN NEW;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:typcategory_name.tests.sql------------------------------------------------------------------------------------- Checks for tools.typcategory_name (typcategory text, OUT typcategory_name text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'typcategory_name (typcategory text, OUT typcategory_name text)', '()', 'tools.typcategory_name typcategory text, OUT typcategory_name text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''typcategory_name''   and pg_get_function_identity_arguments(oid) = ''typcategory text, OUT typcategory_name text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'typcategory_name (typcategory text, OUT typcategory_name text)', '()', 'tools.typcategory_name typcategory text, OUT typcategory_name text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''typcategory_name''   and pg_get_function_identity_arguments(oid) = ''typcategory text, OUT typcategory_name text'';', 'CREATE OR REPLACE FUNCTION tools.typcategory_name(typcategory text, OUT typcategory_name text) RETURNS text LANGUAGE sqlAS $function$SELECT CASE  WHEN typcategory =''A'' THEN ''Array''  WHEN typcategory =''B'' THEN ''Boolean''  WHEN typcategory =''C'' THEN ''Composite''  WHEN typcategory =''D'' THEN ''Date/time''  WHEN typcategory =''E'' THEN ''Enum''  WHEN typcategory =''G'' THEN ''Geometric''  WHEN typcategory =''I'' THEN ''Network address''  WHEN typcategory =''N'' THEN ''Numeric''  WHEN typcategory =''P'' THEN ''Pseudo-''  WHEN typcategory =''R'' THEN ''Range''  WHEN typcategory =''S'' THEN ''String''  WHEN typcategory =''T'' THEN ''Timespan''  WHEN typcategory =''U'' THEN ''User-defined''  WHEN typcategory =''V'' THEN ''Bit-string''  WHEN typcategory =''X'' THEN ''Unknown type''  ELSE ''Unexpected typcategory '' || typcategoryEND;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:typtype_name.tests.sql------------------------------------------------------------------------------------- Checks for tools.typtype_name (typtype text, OUT typtype_name text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'typtype_name (typtype text, OUT typtype_name text)', '()', 'tools.typtype_name typtype text, OUT typtype_name text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''typtype_name''   and pg_get_function_identity_arguments(oid) = ''typtype text, OUT typtype_name text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'typtype_name (typtype text, OUT typtype_name text)', '()', 'tools.typtype_name typtype text, OUT typtype_name text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''typtype_name''   and pg_get_function_identity_arguments(oid) = ''typtype text, OUT typtype_name text'';', 'CREATE OR REPLACE FUNCTION tools.typtype_name(typtype text, OUT typtype_name text) RETURNS text LANGUAGE sqlAS $function$SELECT CASE  WHEN typtype = ''b'' THEN ''base''  WHEN typtype = ''c'' THEN ''composite type''  WHEN typtype = ''d'' THEN ''domain''  WHEN typtype = ''e'' THEN ''enum''  WHEN typtype = ''p'' THEN ''pseudo-type''  WHEN typtype = ''r'' THEN ''range''  ELSE ''Unexpected typtype '' || typtypeEND;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:view_count_estimate.tests.sql------------------------------------------------------------------------------------- Checks for tools.view_count_estimate (view_id regclass) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'view_count_estimate (view_id regclass)', '()', 'tools.view_count_estimate view_id regclass existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''view_count_estimate''   and pg_get_function_identity_arguments(oid) = ''view_id regclass'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'view_count_estimate (view_id regclass)', '()', 'tools.view_count_estimate view_id regclass definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''view_count_estimate''   and pg_get_function_identity_arguments(oid) = ''view_id regclass'';', 'CREATE OR REPLACE FUNCTION tools.view_count_estimate(view_id regclass) RETURNS bigint LANGUAGE plpgsqlAS $function$DECLARE   plan jsonb;BEGIN   EXECUTE ''EXPLAIN (FORMAT JSON) '' || pg_get_viewdef(view_id) INTO plan;   RETURN (plan->0->''Plan''->>''Plan Rows'')::bigint;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:view_get_column_descriptions.tests.sql------------------------------------------------------------------------------------- Checks for dba.view_get_column_descriptions (view_name_in text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'view_get_column_descriptions (view_name_in text)', '()', 'dba.view_get_column_descriptions view_name_in text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''view_get_column_descriptions''   and pg_get_function_identity_arguments(oid) = ''view_name_in text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'view_get_column_descriptions (view_name_in text)', '()', 'dba.view_get_column_descriptions view_name_in text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''view_get_column_descriptions''   and pg_get_function_identity_arguments(oid) = ''view_name_in text'';', 'CREATE OR REPLACE FUNCTION dba.view_get_column_descriptions(view_name_in text) RETURNS TABLE("Position" smallint, "Name" text, "Type" text) LANGUAGE sql STABLEAS $function$SELECT attnum                  AS "Position",       attname::text           AS "Name",       atttypid::regtype::text AS "Type"FROM   pg_attributeWHERE  attrelid = view_name_in::regclass AND    -- ::regclass is a magic casting and a Very Good Thing. You can       attnum > 0 AND       NOT attisdroppedORDER  BY attnum$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:view_get_referenced_tables.tests.sql------------------------------------------------------------------------------------- Checks for dba.view_get_referenced_tables (view_name_in text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'view_get_referenced_tables (view_name_in text)', '()', 'dba.view_get_referenced_tables view_name_in text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''view_get_referenced_tables''   and pg_get_function_identity_arguments(oid) = ''view_name_in text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'view_get_referenced_tables (view_name_in text)', '()', 'dba.view_get_referenced_tables view_name_in text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''view_get_referenced_tables''   and pg_get_function_identity_arguments(oid) = ''view_name_in text'';', 'CREATE OR REPLACE FUNCTION dba.view_get_referenced_tables(view_name_in text) RETURNS TABLE(referenced_table text) LANGUAGE sql STABLEAS $function$  SELECT u.table_schema || ''.'' || u.table_name as referenced_table    FROM information_schema.view_table_usage u    JOIN information_schema.views v         ON  u.view_schema = v.table_schema         AND u.view_name = v.table_name   WHERE u.view_name = view_name_in::regclass::nameORDER BY u.view_schema,         u.view_name;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:views_using_field.tests.sql------------------------------------------------------------------------------------- Checks for dba.views_using_field (table_name text, column_name text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'views_using_field (table_name text, column_name text)', '()', 'dba.views_using_field table_name text, column_name text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''views_using_field''   and pg_get_function_identity_arguments(oid) = ''table_name text, column_name text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'views_using_field (table_name text, column_name text)', '()', 'dba.views_using_field table_name text, column_name text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''views_using_field''   and pg_get_function_identity_arguments(oid) = ''table_name text, column_name text'';', 'CREATE OR REPLACE FUNCTION dba.views_using_field(table_name text, column_name text) RETURNS TABLE(schema_name citext, view_name citext) LANGUAGE sqlAS $function$SELECT pg_namespace.nspname::citext   AS schema_name,       pg_class.oid::regclass::citext AS view_name FROM pg_attribute   -- columns for the table JOIN pg_depend   -- objects that depend on the column   ON pg_depend.refobjsubid = pg_attribute.attnum  AND pg_depend.refobjid = pg_attribute.attrelid JOIN pg_rewrite  -- rules depending on the column   ON pg_rewrite.oid = pg_depend.objid JOIN pg_class    -- views for the rules   ON pg_class.oid = pg_rewrite.ev_class JOIN pg_namespace -- I added this is to include the schema_name in the output. -- DPA   ON pg_class.relnamespace  = pg_namespace.oidWHERE pg_class.relkind = ''v''    -- only interested in views  -- dependency must be a rule depending on a relation  AND pg_depend.classid     = ''pg_rewrite''::regclass  AND pg_depend.refclassid  = ''pg_class''::regclass  AND pg_depend.deptype     = ''n''    -- normal dependency  AND pg_attribute.attrelid = table_name::regclass  AND pg_attribute.attname  = column_name;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:web_user_to_v1.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.web_user_to_v1 (web_user_in web_user) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'web_user_to_v1 (web_user_in web_user)', '()', 'types_plus.web_user_to_v1 web_user_in web_user existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''web_user_to_v1''   and pg_get_function_identity_arguments(oid) = ''web_user_in web_user'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'web_user_to_v1 (web_user_in web_user)', '()', 'types_plus.web_user_to_v1 web_user_in web_user definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''web_user_to_v1''   and pg_get_function_identity_arguments(oid) = ''web_user_in web_user'';', 'CREATE OR REPLACE FUNCTION types_plus.web_user_to_v1(web_user_in web_user) RETURNS web_user_v1 LANGUAGE sqlAS $function$                   SELECT			web_user_in.id,			web_user_in.data_file_id,			web_user_in.marked_for_deletion,			web_user_in.hsys_id,			web_user_in.username,			web_user_in.role_,			web_user_in.name_first,			web_user_in.name_last,			web_user_in.name_full               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:web_user_to_v2.tests.sql------------------------------------------------------------------------------------- Checks for types_plus.web_user_to_v2 (web_user_in web_user) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'web_user_to_v2 (web_user_in web_user)', '()', 'types_plus.web_user_to_v2 web_user_in web_user existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''web_user_to_v2''   and pg_get_function_identity_arguments(oid) = ''web_user_in web_user'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'web_user_to_v2 (web_user_in web_user)', '()', 'types_plus.web_user_to_v2 web_user_in web_user definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''web_user_to_v2''   and pg_get_function_identity_arguments(oid) = ''web_user_in web_user'';', 'CREATE OR REPLACE FUNCTION types_plus.web_user_to_v2(web_user_in web_user) RETURNS web_user_v2 LANGUAGE sqlAS $function$                   SELECT			web_user_in.id,			web_user_in.data_file_id,			web_user_in.hsys_id,			web_user_in.is_sonar_ascendco_support,			web_user_in.marked_for_deletion,			web_user_in.name_first,			web_user_in.role_,			web_user_in.username,			web_user_in.name_full,			web_user_in.name_last               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:word_count.tests.sql------------------------------------------------------------------------------------- Checks for tools.word_count (text_in citext) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'word_count (text_in citext)', '()', 'tools.word_count text_in citext existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''word_count''   and pg_get_function_identity_arguments(oid) = ''text_in citext'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'word_count (text_in citext)', '()', 'tools.word_count text_in citext definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''word_count''   and pg_get_function_identity_arguments(oid) = ''text_in citext'';', 'CREATE OR REPLACE FUNCTION tools.word_count(text_in citext) RETURNS integer LANGUAGE plpgsqlAS $function$DECLARE  text_in_words_array   text[];  word_count            int4;BEGINselect into text_in_words_array	string_to_array(text_in, '' '');word_count := array_length(text_in_words_array, 1);RETURN word_count;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:word_type.tests.sql------------------------------------------------------------------------------------- Checks for tools.word_type (word_in citext) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'word_type (word_in citext)', '()', 'tools.word_type word_in citext existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''word_type''   and pg_get_function_identity_arguments(oid) = ''word_in citext'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'word_type (word_in citext)', '()', 'tools.word_type word_in citext definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''word_type''   and pg_get_function_identity_arguments(oid) = ''word_in citext'';', 'CREATE OR REPLACE FUNCTION tools.word_type(word_in citext) RETURNS citext LANGUAGE sqlAS $function$select description::citext  from ts_debug(''simple'', word_in)  limit 1 -- only the first word$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:functions:work_get_source_name.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.work_get_source_name (activity_in citext) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'work_get_source_name (activity_in citext)', '()', 'ascendco.work_get_source_name activity_in citext existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''work_get_source_name''   and pg_get_function_identity_arguments(oid) = ''activity_in citext'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'work_get_source_name (activity_in citext)', '()', 'ascendco.work_get_source_name activity_in citext definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''work_get_source_name''   and pg_get_function_identity_arguments(oid) = ''activity_in citext'';', 'CREATE OR REPLACE FUNCTION ascendco.work_get_source_name(activity_in citext) RETURNS citext LANGUAGE sql IMMUTABLEAS $function$SELECTCASE WHEN activity_in =          ''Activity''         THEN  ''Activity''::citext	 WHEN activity_in =          ''Assembly''         THEN  ''Assembly''::citext	 WHEN activity_in =          ''Collection Inv''   THEN  ''CollectionInv''::citext	 WHEN activity_in =          ''Sterilize Inv''    THEN  ''SterilizerLoad_Inv''::citext -- Catch this first, pattern below would catch it .	 WHEN left(activity_in,9) =  ''Sterilize''        THEN  ''SterilizerLoad''::citext	 WHEN activity_in =          ''Case Cart''        THEN  ''Scan''::citext	 WHEN activity_in =          ''Decon Receiving''  THEN  ''Scan''::citext	 WHEN activity_in =          ''Decon Sink''       THEN  ''Scan''::citext	 WHEN activity_in =          ''Deliver Inv''      THEN  ''Scan''::citext	 ELSE                                                 (''Unknown '' || activity_in)::citextEND as source_name_out;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:activity_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.activity activity_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'activity_pkey', '', 'ascendco.activity activity_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''activity_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'activity_pkey', '', 'ascendco.activity activity_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''activity_pkey'';', 'CREATE UNIQUE INDEX activity_pkey ON ascendco.activity USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_productivity_facility_id_ix_fkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_productivity analytic_productivity_facility_id_ix_fkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_productivity_facility_id_ix_fkey', '', 'ascendco.analytic_productivity analytic_productivity_facility_id_ix_fkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_productivity_facility_id_ix_fkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_productivity_facility_id_ix_fkey', '', 'ascendco.analytic_productivity analytic_productivity_facility_id_ix_fkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_productivity_facility_id_ix_fkey'';', 'CREATE INDEX analytic_productivity_facility_id_ix_fkey ON ascendco.analytic_productivity USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_productivity_hsys_id_ix_fkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_productivity analytic_productivity_hsys_id_ix_fkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_productivity_hsys_id_ix_fkey', '', 'ascendco.analytic_productivity analytic_productivity_hsys_id_ix_fkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_productivity_hsys_id_ix_fkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_productivity_hsys_id_ix_fkey', '', 'ascendco.analytic_productivity analytic_productivity_hsys_id_ix_fkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_productivity_hsys_id_ix_fkey'';', 'CREATE INDEX analytic_productivity_hsys_id_ix_fkey ON ascendco.analytic_productivity USING btree (hsys_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_productivity_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_productivity analytic_productivity_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_productivity_id_pkey', '', 'ascendco.analytic_productivity analytic_productivity_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_productivity_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_productivity_id_pkey', '', 'ascendco.analytic_productivity analytic_productivity_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_productivity_id_pkey'';', 'CREATE UNIQUE INDEX analytic_productivity_id_pkey ON ascendco.analytic_productivity USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_productivity_item_type_id_ix_fkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_productivity analytic_productivity_item_type_id_ix_fkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_productivity_item_type_id_ix_fkey', '', 'ascendco.analytic_productivity analytic_productivity_item_type_id_ix_fkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_productivity_item_type_id_ix_fkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_productivity_item_type_id_ix_fkey', '', 'ascendco.analytic_productivity analytic_productivity_item_type_id_ix_fkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_productivity_item_type_id_ix_fkey'';', 'CREATE INDEX analytic_productivity_item_type_id_ix_fkey ON ascendco.analytic_productivity USING btree (item_type_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_productivity_marked_for_deletion_ix_bgin.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_productivity analytic_productivity_marked_for_deletion_ix_bgin index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_productivity_marked_for_deletion_ix_bgin', '', 'ascendco.analytic_productivity analytic_productivity_marked_for_deletion_ix_bgin existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_productivity_marked_for_deletion_ix_bgin'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_productivity_marked_for_deletion_ix_bgin', '', 'ascendco.analytic_productivity analytic_productivity_marked_for_deletion_ix_bgin definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_productivity_marked_for_deletion_ix_bgin'';', 'CREATE INDEX analytic_productivity_marked_for_deletion_ix_bgin ON ascendco.analytic_productivity USING gin (marked_for_deletion) WHERE (marked_for_deletion = true)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_productivity_pg_con_id_key.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_productivity analytic_productivity_pg_con_id_key index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_productivity_pg_con_id_key', '', 'ascendco.analytic_productivity analytic_productivity_pg_con_id_key existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_productivity_pg_con_id_key'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_productivity_pg_con_id_key', '', 'ascendco.analytic_productivity analytic_productivity_pg_con_id_key definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_productivity_pg_con_id_key'';', 'CREATE UNIQUE INDEX analytic_productivity_pg_con_id_key ON ascendco.analytic_productivity USING btree (pg_con_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_scan_facility_id_ix_fkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_scan analytic_scan_facility_id_ix_fkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_scan_facility_id_ix_fkey', '', 'ascendco.analytic_scan analytic_scan_facility_id_ix_fkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_scan_facility_id_ix_fkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_scan_facility_id_ix_fkey', '', 'ascendco.analytic_scan analytic_scan_facility_id_ix_fkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_scan_facility_id_ix_fkey'';', 'CREATE INDEX analytic_scan_facility_id_ix_fkey ON ascendco.analytic_scan USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_scan_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_scan analytic_scan_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_scan_id_pkey', '', 'ascendco.analytic_scan analytic_scan_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_scan_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_scan_id_pkey', '', 'ascendco.analytic_scan analytic_scan_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_scan_id_pkey'';', 'CREATE UNIQUE INDEX analytic_scan_id_pkey ON ascendco.analytic_scan USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_scan_pg_con_id_key.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_scan analytic_scan_pg_con_id_key index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_scan_pg_con_id_key', '', 'ascendco.analytic_scan analytic_scan_pg_con_id_key existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_scan_pg_con_id_key'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_scan_pg_con_id_key', '', 'ascendco.analytic_scan analytic_scan_pg_con_id_key definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_scan_pg_con_id_key'';', 'CREATE UNIQUE INDEX analytic_scan_pg_con_id_key ON ascendco.analytic_scan USING btree (pg_con_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_sterilizer_load_facility_id_ix_fkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_sterilizer_load analytic_sterilizer_load_facility_id_ix_fkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_load_facility_id_ix_fkey', '', 'ascendco.analytic_sterilizer_load analytic_sterilizer_load_facility_id_ix_fkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_load_facility_id_ix_fkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_load_facility_id_ix_fkey', '', 'ascendco.analytic_sterilizer_load analytic_sterilizer_load_facility_id_ix_fkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_load_facility_id_ix_fkey'';', 'CREATE INDEX analytic_sterilizer_load_facility_id_ix_fkey ON ascendco.analytic_sterilizer_load USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_sterilizer_load_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_sterilizer_load analytic_sterilizer_load_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_load_id_pkey', '', 'ascendco.analytic_sterilizer_load analytic_sterilizer_load_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_load_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_load_id_pkey', '', 'ascendco.analytic_sterilizer_load analytic_sterilizer_load_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_load_id_pkey'';', 'CREATE UNIQUE INDEX analytic_sterilizer_load_id_pkey ON ascendco.analytic_sterilizer_load USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_sterilizer_load_instruments_count_ix_btree.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_sterilizer_load analytic_sterilizer_load_instruments_count_ix_btree index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_load_instruments_count_ix_btree', '', 'ascendco.analytic_sterilizer_load analytic_sterilizer_load_instruments_count_ix_btree existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_load_instruments_count_ix_btree'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_load_instruments_count_ix_btree', '', 'ascendco.analytic_sterilizer_load analytic_sterilizer_load_instruments_count_ix_btree definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_load_instruments_count_ix_btree'';', 'CREATE INDEX analytic_sterilizer_load_instruments_count_ix_btree ON ascendco.analytic_sterilizer_load USING btree (instruments_count)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_sterilizer_load_packs_count_ix_btree.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_sterilizer_load analytic_sterilizer_load_packs_count_ix_btree index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_load_packs_count_ix_btree', '', 'ascendco.analytic_sterilizer_load analytic_sterilizer_load_packs_count_ix_btree existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_load_packs_count_ix_btree'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_load_packs_count_ix_btree', '', 'ascendco.analytic_sterilizer_load analytic_sterilizer_load_packs_count_ix_btree definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_load_packs_count_ix_btree'';', 'CREATE INDEX analytic_sterilizer_load_packs_count_ix_btree ON ascendco.analytic_sterilizer_load USING btree (packs_count)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_sterilizer_load_sterilize_params_id_ix_fkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_sterilizer_load analytic_sterilizer_load_sterilize_params_id_ix_fkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_load_sterilize_params_id_ix_fkey', '', 'ascendco.analytic_sterilizer_load analytic_sterilizer_load_sterilize_params_id_ix_fkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_load_sterilize_params_id_ix_fkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_load_sterilize_params_id_ix_fkey', '', 'ascendco.analytic_sterilizer_load analytic_sterilizer_load_sterilize_params_id_ix_fkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_load_sterilize_params_id_ix_fkey'';', 'CREATE INDEX analytic_sterilizer_load_sterilize_params_id_ix_fkey ON ascendco.analytic_sterilizer_load USING btree (sterilize_params_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_sterilizer_load_sterilizer_id_ix_fkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_sterilizer_load analytic_sterilizer_load_sterilizer_id_ix_fkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_load_sterilizer_id_ix_fkey', '', 'ascendco.analytic_sterilizer_load analytic_sterilizer_load_sterilizer_id_ix_fkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_load_sterilizer_id_ix_fkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_load_sterilizer_id_ix_fkey', '', 'ascendco.analytic_sterilizer_load analytic_sterilizer_load_sterilizer_id_ix_fkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_load_sterilizer_id_ix_fkey'';', 'CREATE INDEX analytic_sterilizer_load_sterilizer_id_ix_fkey ON ascendco.analytic_sterilizer_load USING btree (sterilizer_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_sterilizer_load_trays_count_count_ix_btree.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_sterilizer_load analytic_sterilizer_load_trays_count_count_ix_btree index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_load_trays_count_count_ix_btree', '', 'ascendco.analytic_sterilizer_load analytic_sterilizer_load_trays_count_count_ix_btree existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_load_trays_count_count_ix_btree'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_load_trays_count_count_ix_btree', '', 'ascendco.analytic_sterilizer_load analytic_sterilizer_load_trays_count_count_ix_btree definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_load_trays_count_count_ix_btree'';', 'CREATE INDEX analytic_sterilizer_load_trays_count_count_ix_btree ON ascendco.analytic_sterilizer_load USING btree (trays_count)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_sterilizer_load_web_user_id_ix_fkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_sterilizer_load analytic_sterilizer_load_web_user_id_ix_fkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_load_web_user_id_ix_fkey', '', 'ascendco.analytic_sterilizer_load analytic_sterilizer_load_web_user_id_ix_fkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_load_web_user_id_ix_fkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_load_web_user_id_ix_fkey', '', 'ascendco.analytic_sterilizer_load analytic_sterilizer_load_web_user_id_ix_fkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_load_web_user_id_ix_fkey'';', 'CREATE INDEX analytic_sterilizer_load_web_user_id_ix_fkey ON ascendco.analytic_sterilizer_load USING btree (web_user_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_sterilizer_loadinv_facility_id_ix_btree.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_facility_id_ix_btree index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_loadinv_facility_id_ix_btree', '', 'ascendco.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_facility_id_ix_btree existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_loadinv_facility_id_ix_btree'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_loadinv_facility_id_ix_btree', '', 'ascendco.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_facility_id_ix_btree definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_loadinv_facility_id_ix_btree'';', 'CREATE INDEX analytic_sterilizer_loadinv_facility_id_ix_btree ON ascendco.analytic_sterilizer_loadinv USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_sterilizer_loadinv_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_loadinv_id_pkey', '', 'ascendco.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_loadinv_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_loadinv_id_pkey', '', 'ascendco.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_loadinv_id_pkey'';', 'CREATE UNIQUE INDEX analytic_sterilizer_loadinv_id_pkey ON ascendco.analytic_sterilizer_loadinv USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_sterilizer_loadinv_item_type_id_ix_btree.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_item_type_id_ix_btree index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_loadinv_item_type_id_ix_btree', '', 'ascendco.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_item_type_id_ix_btree existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_loadinv_item_type_id_ix_btree'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_loadinv_item_type_id_ix_btree', '', 'ascendco.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_item_type_id_ix_btree definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_loadinv_item_type_id_ix_btree'';', 'CREATE INDEX analytic_sterilizer_loadinv_item_type_id_ix_btree ON ascendco.analytic_sterilizer_loadinv USING btree (item_type_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_sterilizer_loadinv_marked_for_deletion_ix_bgin.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_marked_for_deletion_ix_bgin index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_loadinv_marked_for_deletion_ix_bgin', '', 'ascendco.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_marked_for_deletion_ix_bgin existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_loadinv_marked_for_deletion_ix_bgin'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_loadinv_marked_for_deletion_ix_bgin', '', 'ascendco.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_marked_for_deletion_ix_bgin definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_loadinv_marked_for_deletion_ix_bgin'';', 'CREATE INDEX analytic_sterilizer_loadinv_marked_for_deletion_ix_bgin ON ascendco.analytic_sterilizer_loadinv USING gin (marked_for_deletion) WHERE (marked_for_deletion = true)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_sterilizer_loadinv_sterilize_params_id_ix_btree.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_sterilize_params_id_ix_btree index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_loadinv_sterilize_params_id_ix_btree', '', 'ascendco.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_sterilize_params_id_ix_btree existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_loadinv_sterilize_params_id_ix_btree'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_loadinv_sterilize_params_id_ix_btree', '', 'ascendco.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_sterilize_params_id_ix_btree definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_loadinv_sterilize_params_id_ix_btree'';', 'CREATE INDEX analytic_sterilizer_loadinv_sterilize_params_id_ix_btree ON ascendco.analytic_sterilizer_loadinv USING btree (sterilize_params_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_sterilizer_loadinv_sterilizer_id_ix_btree.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_sterilizer_id_ix_btree index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_loadinv_sterilizer_id_ix_btree', '', 'ascendco.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_sterilizer_id_ix_btree existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_loadinv_sterilizer_id_ix_btree'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_loadinv_sterilizer_id_ix_btree', '', 'ascendco.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_sterilizer_id_ix_btree definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_loadinv_sterilizer_id_ix_btree'';', 'CREATE INDEX analytic_sterilizer_loadinv_sterilizer_id_ix_btree ON ascendco.analytic_sterilizer_loadinv USING btree (sterilizer_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_sterilizer_loadinv_web_user_id_ix_btree.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_web_user_id_ix_btree index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_loadinv_web_user_id_ix_btree', '', 'ascendco.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_web_user_id_ix_btree existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_loadinv_web_user_id_ix_btree'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_loadinv_web_user_id_ix_btree', '', 'ascendco.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_web_user_id_ix_btree definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_loadinv_web_user_id_ix_btree'';', 'CREATE INDEX analytic_sterilizer_loadinv_web_user_id_ix_btree ON ascendco.analytic_sterilizer_loadinv USING btree (web_user_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_sterilizer_marked_for_deletion_ix_bgin.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_sterilizer_load analytic_sterilizer_marked_for_deletion_ix_bgin index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_marked_for_deletion_ix_bgin', '', 'ascendco.analytic_sterilizer_load analytic_sterilizer_marked_for_deletion_ix_bgin existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_marked_for_deletion_ix_bgin'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_sterilizer_marked_for_deletion_ix_bgin', '', 'ascendco.analytic_sterilizer_load analytic_sterilizer_marked_for_deletion_ix_bgin definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_sterilizer_marked_for_deletion_ix_bgin'';', 'CREATE INDEX analytic_sterilizer_marked_for_deletion_ix_bgin ON ascendco.analytic_sterilizer_load USING gin (marked_for_deletion) WHERE (marked_for_deletion = true)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_work_marked_for_deletion_ix_gin.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_work analytic_work_marked_for_deletion_ix_gin index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_work_marked_for_deletion_ix_gin', '', 'ascendco.analytic_work analytic_work_marked_for_deletion_ix_gin existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_work_marked_for_deletion_ix_gin'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_work_marked_for_deletion_ix_gin', '', 'ascendco.analytic_work analytic_work_marked_for_deletion_ix_gin definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_work_marked_for_deletion_ix_gin'';', 'CREATE INDEX analytic_work_marked_for_deletion_ix_gin ON ascendco.analytic_work USING gin (marked_for_deletion) WHERE (marked_for_deletion = true)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:analytic_work_pk.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_work analytic_work_pk index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'analytic_work_pk', '', 'ascendco.analytic_work analytic_work_pk existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_work_pk'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'analytic_work_pk', '', 'ascendco.analytic_work analytic_work_pk definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''analytic_work_pk'';', 'CREATE UNIQUE INDEX analytic_work_pk ON ascendco.analytic_work USING btree (id, key_supplement)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.assembly assembly_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'assembly_id_pkey', '', 'ascendco.assembly assembly_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''assembly_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'assembly_id_pkey', '', 'ascendco.assembly assembly_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''assembly_id_pkey'';', 'CREATE UNIQUE INDEX assembly_id_pkey ON ascendco.assembly USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_assembly_id_covering_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.assembly_prods assembly_prods_assembly_id_covering_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'assembly_prods_assembly_id_covering_idx', '', 'ascendco.assembly_prods assembly_prods_assembly_id_covering_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''assembly_prods_assembly_id_covering_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'assembly_prods_assembly_id_covering_idx', '', 'ascendco.assembly_prods assembly_prods_assembly_id_covering_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''assembly_prods_assembly_id_covering_idx'';', 'CREATE INDEX assembly_prods_assembly_id_covering_idx ON ONLY ascendco.assembly_prods USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_default_assembly_id_marked_for_deletion_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.assembly_prods_default assembly_prods_default_assembly_id_marked_for_deletion_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'assembly_prods_default_assembly_id_marked_for_deletion_idx', '', 'ascendco.assembly_prods_default assembly_prods_default_assembly_id_marked_for_deletion_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''assembly_prods_default_assembly_id_marked_for_deletion_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'assembly_prods_default_assembly_id_marked_for_deletion_idx', '', 'ascendco.assembly_prods_default assembly_prods_default_assembly_id_marked_for_deletion_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''assembly_prods_default_assembly_id_marked_for_deletion_idx'';', 'CREATE INDEX assembly_prods_default_assembly_id_marked_for_deletion_idx ON ascendco.assembly_prods_default USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_default_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.assembly_prods_default assembly_prods_default_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'assembly_prods_default_pkey', '', 'ascendco.assembly_prods_default assembly_prods_default_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''assembly_prods_default_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'assembly_prods_default_pkey', '', 'ascendco.assembly_prods_default assembly_prods_default_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''assembly_prods_default_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_default_pkey ON ascendco.assembly_prods_default USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.assembly_prods assembly_prods_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'assembly_prods_pkey', '', 'ascendco.assembly_prods assembly_prods_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''assembly_prods_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'assembly_prods_pkey', '', 'ascendco.assembly_prods assembly_prods_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''assembly_prods_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_pkey ON ONLY ascendco.assembly_prods USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2015_assembly_id_marked_for_deletion_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2015 assembly_prods_y2015_assembly_id_marked_for_deletion_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2015_assembly_id_marked_for_deletion_idx', '', 'api.assembly_prods_y2015 assembly_prods_y2015_assembly_id_marked_for_deletion_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2015_assembly_id_marked_for_deletion_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2015_assembly_id_marked_for_deletion_idx', '', 'api.assembly_prods_y2015 assembly_prods_y2015_assembly_id_marked_for_deletion_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2015_assembly_id_marked_for_deletion_idx'';', 'CREATE INDEX assembly_prods_y2015_assembly_id_marked_for_deletion_idx ON api.assembly_prods_y2015 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2015_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2015 assembly_prods_y2015_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2015_pkey', '', 'api.assembly_prods_y2015 assembly_prods_y2015_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2015_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2015_pkey', '', 'api.assembly_prods_y2015 assembly_prods_y2015_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2015_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2015_pkey ON api.assembly_prods_y2015 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2016_m010203_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2016_m010203 assembly_prods_y2016_m010203_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2016_m010203_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2016_m010203 assembly_prods_y2016_m010203_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2016_m010203_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2016_m010203_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2016_m010203 assembly_prods_y2016_m010203_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2016_m010203_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2016_m010203_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2016_m010203 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2016_m010203_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2016_m010203 assembly_prods_y2016_m010203_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2016_m010203_pkey', '', 'api.assembly_prods_y2016_m010203 assembly_prods_y2016_m010203_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2016_m010203_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2016_m010203_pkey', '', 'api.assembly_prods_y2016_m010203 assembly_prods_y2016_m010203_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2016_m010203_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2016_m010203_pkey ON api.assembly_prods_y2016_m010203 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2016_m040506_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2016_m040506 assembly_prods_y2016_m040506_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2016_m040506_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2016_m040506 assembly_prods_y2016_m040506_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2016_m040506_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2016_m040506_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2016_m040506 assembly_prods_y2016_m040506_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2016_m040506_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2016_m040506_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2016_m040506 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2016_m040506_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2016_m040506 assembly_prods_y2016_m040506_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2016_m040506_pkey', '', 'api.assembly_prods_y2016_m040506 assembly_prods_y2016_m040506_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2016_m040506_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2016_m040506_pkey', '', 'api.assembly_prods_y2016_m040506 assembly_prods_y2016_m040506_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2016_m040506_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2016_m040506_pkey ON api.assembly_prods_y2016_m040506 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2016_m070809_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2016_m070809 assembly_prods_y2016_m070809_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2016_m070809_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2016_m070809 assembly_prods_y2016_m070809_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2016_m070809_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2016_m070809_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2016_m070809 assembly_prods_y2016_m070809_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2016_m070809_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2016_m070809_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2016_m070809 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2016_m070809_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2016_m070809 assembly_prods_y2016_m070809_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2016_m070809_pkey', '', 'api.assembly_prods_y2016_m070809 assembly_prods_y2016_m070809_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2016_m070809_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2016_m070809_pkey', '', 'api.assembly_prods_y2016_m070809 assembly_prods_y2016_m070809_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2016_m070809_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2016_m070809_pkey ON api.assembly_prods_y2016_m070809 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2016_m101112_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2016_m101112 assembly_prods_y2016_m101112_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2016_m101112_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2016_m101112 assembly_prods_y2016_m101112_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2016_m101112_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2016_m101112_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2016_m101112 assembly_prods_y2016_m101112_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2016_m101112_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2016_m101112_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2016_m101112 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2016_m101112_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2016_m101112 assembly_prods_y2016_m101112_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2016_m101112_pkey', '', 'api.assembly_prods_y2016_m101112 assembly_prods_y2016_m101112_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2016_m101112_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2016_m101112_pkey', '', 'api.assembly_prods_y2016_m101112 assembly_prods_y2016_m101112_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2016_m101112_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2016_m101112_pkey ON api.assembly_prods_y2016_m101112 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2017_m010203_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2017_m010203 assembly_prods_y2017_m010203_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2017_m010203_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2017_m010203 assembly_prods_y2017_m010203_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2017_m010203_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2017_m010203_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2017_m010203 assembly_prods_y2017_m010203_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2017_m010203_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2017_m010203_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2017_m010203 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2017_m010203_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2017_m010203 assembly_prods_y2017_m010203_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2017_m010203_pkey', '', 'api.assembly_prods_y2017_m010203 assembly_prods_y2017_m010203_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2017_m010203_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2017_m010203_pkey', '', 'api.assembly_prods_y2017_m010203 assembly_prods_y2017_m010203_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2017_m010203_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2017_m010203_pkey ON api.assembly_prods_y2017_m010203 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2017_m040506_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2017_m040506 assembly_prods_y2017_m040506_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2017_m040506_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2017_m040506 assembly_prods_y2017_m040506_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2017_m040506_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2017_m040506_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2017_m040506 assembly_prods_y2017_m040506_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2017_m040506_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2017_m040506_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2017_m040506 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2017_m040506_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2017_m040506 assembly_prods_y2017_m040506_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2017_m040506_pkey', '', 'api.assembly_prods_y2017_m040506 assembly_prods_y2017_m040506_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2017_m040506_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2017_m040506_pkey', '', 'api.assembly_prods_y2017_m040506 assembly_prods_y2017_m040506_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2017_m040506_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2017_m040506_pkey ON api.assembly_prods_y2017_m040506 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2017_m070809_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2017_m070809 assembly_prods_y2017_m070809_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2017_m070809_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2017_m070809 assembly_prods_y2017_m070809_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2017_m070809_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2017_m070809_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2017_m070809 assembly_prods_y2017_m070809_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2017_m070809_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2017_m070809_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2017_m070809 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2017_m070809_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2017_m070809 assembly_prods_y2017_m070809_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2017_m070809_pkey', '', 'api.assembly_prods_y2017_m070809 assembly_prods_y2017_m070809_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2017_m070809_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2017_m070809_pkey', '', 'api.assembly_prods_y2017_m070809 assembly_prods_y2017_m070809_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2017_m070809_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2017_m070809_pkey ON api.assembly_prods_y2017_m070809 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2017_m101112_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2017_m101112 assembly_prods_y2017_m101112_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2017_m101112_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2017_m101112 assembly_prods_y2017_m101112_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2017_m101112_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2017_m101112_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2017_m101112 assembly_prods_y2017_m101112_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2017_m101112_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2017_m101112_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2017_m101112 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2017_m101112_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2017_m101112 assembly_prods_y2017_m101112_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2017_m101112_pkey', '', 'api.assembly_prods_y2017_m101112 assembly_prods_y2017_m101112_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2017_m101112_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2017_m101112_pkey', '', 'api.assembly_prods_y2017_m101112 assembly_prods_y2017_m101112_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2017_m101112_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2017_m101112_pkey ON api.assembly_prods_y2017_m101112 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2018_m010203_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2018_m010203 assembly_prods_y2018_m010203_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2018_m010203_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2018_m010203 assembly_prods_y2018_m010203_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2018_m010203_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2018_m010203_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2018_m010203 assembly_prods_y2018_m010203_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2018_m010203_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2018_m010203_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2018_m010203 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2018_m010203_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2018_m010203 assembly_prods_y2018_m010203_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2018_m010203_pkey', '', 'api.assembly_prods_y2018_m010203 assembly_prods_y2018_m010203_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2018_m010203_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2018_m010203_pkey', '', 'api.assembly_prods_y2018_m010203 assembly_prods_y2018_m010203_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2018_m010203_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2018_m010203_pkey ON api.assembly_prods_y2018_m010203 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2018_m040506_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2018_m040506 assembly_prods_y2018_m040506_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2018_m040506_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2018_m040506 assembly_prods_y2018_m040506_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2018_m040506_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2018_m040506_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2018_m040506 assembly_prods_y2018_m040506_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2018_m040506_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2018_m040506_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2018_m040506 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2018_m040506_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2018_m040506 assembly_prods_y2018_m040506_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2018_m040506_pkey', '', 'api.assembly_prods_y2018_m040506 assembly_prods_y2018_m040506_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2018_m040506_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2018_m040506_pkey', '', 'api.assembly_prods_y2018_m040506 assembly_prods_y2018_m040506_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2018_m040506_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2018_m040506_pkey ON api.assembly_prods_y2018_m040506 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2018_m070809_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2018_m070809 assembly_prods_y2018_m070809_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2018_m070809_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2018_m070809 assembly_prods_y2018_m070809_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2018_m070809_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2018_m070809_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2018_m070809 assembly_prods_y2018_m070809_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2018_m070809_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2018_m070809_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2018_m070809 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2018_m070809_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2018_m070809 assembly_prods_y2018_m070809_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2018_m070809_pkey', '', 'api.assembly_prods_y2018_m070809 assembly_prods_y2018_m070809_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2018_m070809_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2018_m070809_pkey', '', 'api.assembly_prods_y2018_m070809 assembly_prods_y2018_m070809_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2018_m070809_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2018_m070809_pkey ON api.assembly_prods_y2018_m070809 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2018_m101112_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2018_m101112 assembly_prods_y2018_m101112_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2018_m101112_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2018_m101112 assembly_prods_y2018_m101112_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2018_m101112_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2018_m101112_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2018_m101112 assembly_prods_y2018_m101112_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2018_m101112_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2018_m101112_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2018_m101112 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2018_m101112_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2018_m101112 assembly_prods_y2018_m101112_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2018_m101112_pkey', '', 'api.assembly_prods_y2018_m101112 assembly_prods_y2018_m101112_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2018_m101112_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2018_m101112_pkey', '', 'api.assembly_prods_y2018_m101112 assembly_prods_y2018_m101112_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2018_m101112_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2018_m101112_pkey ON api.assembly_prods_y2018_m101112 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2019_m010203_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2019_m010203 assembly_prods_y2019_m010203_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2019_m010203_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2019_m010203 assembly_prods_y2019_m010203_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2019_m010203_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2019_m010203_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2019_m010203 assembly_prods_y2019_m010203_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2019_m010203_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2019_m010203_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2019_m010203 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2019_m010203_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2019_m010203 assembly_prods_y2019_m010203_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2019_m010203_pkey', '', 'api.assembly_prods_y2019_m010203 assembly_prods_y2019_m010203_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2019_m010203_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2019_m010203_pkey', '', 'api.assembly_prods_y2019_m010203 assembly_prods_y2019_m010203_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2019_m010203_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2019_m010203_pkey ON api.assembly_prods_y2019_m010203 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2019_m040506_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2019_m040506 assembly_prods_y2019_m040506_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2019_m040506_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2019_m040506 assembly_prods_y2019_m040506_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2019_m040506_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2019_m040506_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2019_m040506 assembly_prods_y2019_m040506_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2019_m040506_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2019_m040506_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2019_m040506 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2019_m040506_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2019_m040506 assembly_prods_y2019_m040506_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2019_m040506_pkey', '', 'api.assembly_prods_y2019_m040506 assembly_prods_y2019_m040506_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2019_m040506_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2019_m040506_pkey', '', 'api.assembly_prods_y2019_m040506 assembly_prods_y2019_m040506_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2019_m040506_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2019_m040506_pkey ON api.assembly_prods_y2019_m040506 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2019_m070809_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2019_m070809 assembly_prods_y2019_m070809_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2019_m070809_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2019_m070809 assembly_prods_y2019_m070809_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2019_m070809_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2019_m070809_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2019_m070809 assembly_prods_y2019_m070809_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2019_m070809_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2019_m070809_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2019_m070809 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2019_m070809_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2019_m070809 assembly_prods_y2019_m070809_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2019_m070809_pkey', '', 'api.assembly_prods_y2019_m070809 assembly_prods_y2019_m070809_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2019_m070809_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2019_m070809_pkey', '', 'api.assembly_prods_y2019_m070809 assembly_prods_y2019_m070809_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2019_m070809_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2019_m070809_pkey ON api.assembly_prods_y2019_m070809 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2019_m101112_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2019_m101112 assembly_prods_y2019_m101112_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2019_m101112_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2019_m101112 assembly_prods_y2019_m101112_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2019_m101112_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2019_m101112_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2019_m101112 assembly_prods_y2019_m101112_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2019_m101112_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2019_m101112_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2019_m101112 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2019_m101112_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2019_m101112 assembly_prods_y2019_m101112_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2019_m101112_pkey', '', 'api.assembly_prods_y2019_m101112 assembly_prods_y2019_m101112_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2019_m101112_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2019_m101112_pkey', '', 'api.assembly_prods_y2019_m101112 assembly_prods_y2019_m101112_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2019_m101112_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2019_m101112_pkey ON api.assembly_prods_y2019_m101112 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2020_m010203_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2020_m010203 assembly_prods_y2020_m010203_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2020_m010203_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2020_m010203 assembly_prods_y2020_m010203_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2020_m010203_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2020_m010203_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2020_m010203 assembly_prods_y2020_m010203_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2020_m010203_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2020_m010203_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2020_m010203 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2020_m010203_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2020_m010203 assembly_prods_y2020_m010203_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2020_m010203_pkey', '', 'api.assembly_prods_y2020_m010203 assembly_prods_y2020_m010203_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2020_m010203_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2020_m010203_pkey', '', 'api.assembly_prods_y2020_m010203 assembly_prods_y2020_m010203_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2020_m010203_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2020_m010203_pkey ON api.assembly_prods_y2020_m010203 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2020_m040506_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2020_m040506 assembly_prods_y2020_m040506_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2020_m040506_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2020_m040506 assembly_prods_y2020_m040506_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2020_m040506_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2020_m040506_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2020_m040506 assembly_prods_y2020_m040506_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2020_m040506_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2020_m040506_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2020_m040506 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2020_m040506_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2020_m040506 assembly_prods_y2020_m040506_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2020_m040506_pkey', '', 'api.assembly_prods_y2020_m040506 assembly_prods_y2020_m040506_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2020_m040506_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2020_m040506_pkey', '', 'api.assembly_prods_y2020_m040506 assembly_prods_y2020_m040506_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2020_m040506_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2020_m040506_pkey ON api.assembly_prods_y2020_m040506 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2020_m070809_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2020_m070809 assembly_prods_y2020_m070809_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2020_m070809_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2020_m070809 assembly_prods_y2020_m070809_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2020_m070809_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2020_m070809_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2020_m070809 assembly_prods_y2020_m070809_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2020_m070809_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2020_m070809_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2020_m070809 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2020_m070809_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2020_m070809 assembly_prods_y2020_m070809_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2020_m070809_pkey', '', 'api.assembly_prods_y2020_m070809 assembly_prods_y2020_m070809_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2020_m070809_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2020_m070809_pkey', '', 'api.assembly_prods_y2020_m070809 assembly_prods_y2020_m070809_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2020_m070809_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2020_m070809_pkey ON api.assembly_prods_y2020_m070809 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2020_m101112_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2020_m101112 assembly_prods_y2020_m101112_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2020_m101112_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2020_m101112 assembly_prods_y2020_m101112_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2020_m101112_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2020_m101112_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2020_m101112 assembly_prods_y2020_m101112_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2020_m101112_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2020_m101112_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2020_m101112 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2020_m101112_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2020_m101112 assembly_prods_y2020_m101112_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2020_m101112_pkey', '', 'api.assembly_prods_y2020_m101112 assembly_prods_y2020_m101112_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2020_m101112_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2020_m101112_pkey', '', 'api.assembly_prods_y2020_m101112 assembly_prods_y2020_m101112_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2020_m101112_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2020_m101112_pkey ON api.assembly_prods_y2020_m101112 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2021_m010203_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2021_m010203 assembly_prods_y2021_m010203_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2021_m010203_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2021_m010203 assembly_prods_y2021_m010203_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2021_m010203_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2021_m010203_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2021_m010203 assembly_prods_y2021_m010203_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2021_m010203_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2021_m010203_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2021_m010203 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2021_m010203_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2021_m010203 assembly_prods_y2021_m010203_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2021_m010203_pkey', '', 'api.assembly_prods_y2021_m010203 assembly_prods_y2021_m010203_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2021_m010203_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2021_m010203_pkey', '', 'api.assembly_prods_y2021_m010203 assembly_prods_y2021_m010203_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2021_m010203_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2021_m010203_pkey ON api.assembly_prods_y2021_m010203 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2021_m040506_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2021_m040506 assembly_prods_y2021_m040506_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2021_m040506_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2021_m040506 assembly_prods_y2021_m040506_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2021_m040506_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2021_m040506_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2021_m040506 assembly_prods_y2021_m040506_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2021_m040506_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2021_m040506_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2021_m040506 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2021_m040506_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2021_m040506 assembly_prods_y2021_m040506_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2021_m040506_pkey', '', 'api.assembly_prods_y2021_m040506 assembly_prods_y2021_m040506_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2021_m040506_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2021_m040506_pkey', '', 'api.assembly_prods_y2021_m040506 assembly_prods_y2021_m040506_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2021_m040506_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2021_m040506_pkey ON api.assembly_prods_y2021_m040506 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2021_m070809_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2021_m070809 assembly_prods_y2021_m070809_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2021_m070809_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2021_m070809 assembly_prods_y2021_m070809_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2021_m070809_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2021_m070809_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2021_m070809 assembly_prods_y2021_m070809_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2021_m070809_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2021_m070809_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2021_m070809 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2021_m070809_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2021_m070809 assembly_prods_y2021_m070809_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2021_m070809_pkey', '', 'api.assembly_prods_y2021_m070809 assembly_prods_y2021_m070809_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2021_m070809_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2021_m070809_pkey', '', 'api.assembly_prods_y2021_m070809 assembly_prods_y2021_m070809_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2021_m070809_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2021_m070809_pkey ON api.assembly_prods_y2021_m070809 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2021_m101112_assembly_id_marked_for_deletio_idx.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2021_m101112 assembly_prods_y2021_m101112_assembly_id_marked_for_deletio_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2021_m101112_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2021_m101112 assembly_prods_y2021_m101112_assembly_id_marked_for_deletio_idx existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2021_m101112_assembly_id_marked_for_deletio_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2021_m101112_assembly_id_marked_for_deletio_idx', '', 'api.assembly_prods_y2021_m101112 assembly_prods_y2021_m101112_assembly_id_marked_for_deletio_idx definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2021_m101112_assembly_id_marked_for_deletio_idx'';', 'CREATE INDEX assembly_prods_y2021_m101112_assembly_id_marked_for_deletio_idx ON api.assembly_prods_y2021_m101112 USING btree (assembly_id) INCLUDE (marked_for_deletion)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:assembly_prods_y2021_m101112_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.assembly_prods_y2021_m101112 assembly_prods_y2021_m101112_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2021_m101112_pkey', '', 'api.assembly_prods_y2021_m101112 assembly_prods_y2021_m101112_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2021_m101112_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'assembly_prods_y2021_m101112_pkey', '', 'api.assembly_prods_y2021_m101112 assembly_prods_y2021_m101112_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''assembly_prods_y2021_m101112_pkey'';', 'CREATE UNIQUE INDEX assembly_prods_y2021_m101112_pkey ON api.assembly_prods_y2021_m101112 USING btree (updated_date, id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:calendar_calendar_name_key.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.calendar calendar_calendar_name_key index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'calendar_calendar_name_key', '', 'ascendco.calendar calendar_calendar_name_key existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''calendar_calendar_name_key'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'calendar_calendar_name_key', '', 'ascendco.calendar calendar_calendar_name_key definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''calendar_calendar_name_key'';', 'CREATE UNIQUE INDEX calendar_calendar_name_key ON ascendco.calendar USING btree (calendar_name)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:calendar_day_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.calendar_day calendar_day_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'calendar_day_pkey', '', 'ascendco.calendar_day calendar_day_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''calendar_day_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'calendar_day_pkey', '', 'ascendco.calendar_day calendar_day_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''calendar_day_pkey'';', 'CREATE UNIQUE INDEX calendar_day_pkey ON ascendco.calendar_day USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:calendar_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.calendar calendar_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'calendar_pkey', '', 'ascendco.calendar calendar_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''calendar_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'calendar_pkey', '', 'ascendco.calendar calendar_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''calendar_pkey'';', 'CREATE UNIQUE INDEX calendar_pkey ON ascendco.calendar USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:calendar_year_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.calendar_year calendar_year_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'calendar_year_pkey', '', 'ascendco.calendar_year calendar_year_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''calendar_year_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'calendar_year_pkey', '', 'ascendco.calendar_year calendar_year_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''calendar_year_pkey'';', 'CREATE UNIQUE INDEX calendar_year_pkey ON ascendco.calendar_year USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:calendar_year_unique_abbr.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.calendar_year calendar_year_unique_abbr index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'calendar_year_unique_abbr', '', 'ascendco.calendar_year calendar_year_unique_abbr existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''calendar_year_unique_abbr'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'calendar_year_unique_abbr', '', 'ascendco.calendar_year calendar_year_unique_abbr definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''calendar_year_unique_abbr'';', 'CREATE UNIQUE INDEX calendar_year_unique_abbr ON ascendco.calendar_year USING btree (calendar_id, fiscal_year_abbr)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:calendar_year_unique_name.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.calendar_year calendar_year_unique_name index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'calendar_year_unique_name', '', 'ascendco.calendar_year calendar_year_unique_name existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''calendar_year_unique_name'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'calendar_year_unique_name', '', 'ascendco.calendar_year calendar_year_unique_name definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''calendar_year_unique_name'';', 'CREATE UNIQUE INDEX calendar_year_unique_name ON ascendco.calendar_year USING btree (calendar_id, fiscal_year_name)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:clinic_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.clinic clinic_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'clinic_pkey', '', 'ascendco.clinic clinic_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''clinic_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'clinic_pkey', '', 'ascendco.clinic clinic_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''clinic_pkey'';', 'CREATE UNIQUE INDEX clinic_pkey ON ascendco.clinic USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:data_file_info_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.data_file_info data_file_info_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'data_file_info_pkey', '', 'ascendco.data_file_info data_file_info_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''data_file_info_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'data_file_info_pkey', '', 'ascendco.data_file_info data_file_info_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''data_file_info_pkey'';', 'CREATE UNIQUE INDEX data_file_info_pkey ON ascendco.data_file_info USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:ddl_event_log_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for dba.ddl_event_log ddl_event_log_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'dba', 'ddl_event_log_id_pkey', '', 'dba.ddl_event_log ddl_event_log_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''dba'' and indexname = ''ddl_event_log_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'dba', 'ddl_event_log_id_pkey', '', 'dba.ddl_event_log ddl_event_log_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''dba'' and indexname = ''ddl_event_log_id_pkey'';', 'CREATE UNIQUE INDEX ddl_event_log_id_pkey ON dba.ddl_event_log USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:deletion_log_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.deletion_log deletion_log_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'deletion_log_pkey', '', 'ascendco.deletion_log deletion_log_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''deletion_log_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'deletion_log_pkey', '', 'ascendco.deletion_log deletion_log_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''deletion_log_pkey'';', 'CREATE UNIQUE INDEX deletion_log_pkey ON ascendco.deletion_log USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:domo_dataset_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.domo_dataset domo_dataset_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'domo_dataset_id_pkey', '', 'ascendco.domo_dataset domo_dataset_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''domo_dataset_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'domo_dataset_id_pkey', '', 'ascendco.domo_dataset domo_dataset_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''domo_dataset_id_pkey'';', 'CREATE UNIQUE INDEX domo_dataset_id_pkey ON ascendco.domo_dataset USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:domo_passthrough_key_unique.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.domo_passthrough domo_passthrough_key_unique index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'domo_passthrough_key_unique', '', 'ascendco.domo_passthrough domo_passthrough_key_unique existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''domo_passthrough_key_unique'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'domo_passthrough_key_unique', '', 'ascendco.domo_passthrough domo_passthrough_key_unique definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''domo_passthrough_key_unique'';', 'CREATE UNIQUE INDEX domo_passthrough_key_unique ON ascendco.domo_passthrough USING btree (source_id, dataset_name, key_supplement)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:domo_passthrough_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.domo_passthrough domo_passthrough_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'domo_passthrough_pkey', '', 'ascendco.domo_passthrough domo_passthrough_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''domo_passthrough_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'domo_passthrough_pkey', '', 'ascendco.domo_passthrough domo_passthrough_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''domo_passthrough_pkey'';', 'CREATE UNIQUE INDEX domo_passthrough_pkey ON ascendco.domo_passthrough USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:error_code_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.error_code error_code_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'error_code_pkey', '', 'ascendco.error_code error_code_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''error_code_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'error_code_pkey', '', 'ascendco.error_code error_code_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''error_code_pkey'';', 'CREATE UNIQUE INDEX error_code_pkey ON ascendco.error_code USING btree (errcode)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:facility_activities_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.facility_activities facility_activities_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'facility_activities_pkey', '', 'ascendco.facility_activities facility_activities_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''facility_activities_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'facility_activities_pkey', '', 'ascendco.facility_activities facility_activities_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''facility_activities_pkey'';', 'CREATE UNIQUE INDEX facility_activities_pkey ON ascendco.facility_activities USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:facility_department_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.facility_department facility_department_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'facility_department_pkey', '', 'ascendco.facility_department facility_department_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''facility_department_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'facility_department_pkey', '', 'ascendco.facility_department facility_department_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''facility_department_pkey'';', 'CREATE UNIQUE INDEX facility_department_pkey ON ascendco.facility_department USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:facility_location_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.facility_location facility_location_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'facility_location_id_pkey', '', 'ascendco.facility_location facility_location_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''facility_location_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'facility_location_id_pkey', '', 'ascendco.facility_location facility_location_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''facility_location_id_pkey'';', 'CREATE UNIQUE INDEX facility_location_id_pkey ON ascendco.facility_location USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:facility_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.facility facility_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'facility_pkey', '', 'ascendco.facility facility_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''facility_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'facility_pkey', '', 'ascendco.facility facility_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''facility_pkey'';', 'CREATE UNIQUE INDEX facility_pkey ON ascendco.facility USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:focus_facility_id_ix_btree.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.focus focus_facility_id_ix_btree index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'focus_facility_id_ix_btree', '', 'ascendco.focus focus_facility_id_ix_btree existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''focus_facility_id_ix_btree'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'focus_facility_id_ix_btree', '', 'ascendco.focus focus_facility_id_ix_btree definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''focus_facility_id_ix_btree'';', 'CREATE INDEX focus_facility_id_ix_btree ON ascendco.focus USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:focus_hsys_id_ix_btree.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.focus focus_hsys_id_ix_btree index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'focus_hsys_id_ix_btree', '', 'ascendco.focus focus_hsys_id_ix_btree existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''focus_hsys_id_ix_btree'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'focus_hsys_id_ix_btree', '', 'ascendco.focus focus_hsys_id_ix_btree definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''focus_hsys_id_ix_btree'';', 'CREATE INDEX focus_hsys_id_ix_btree ON ascendco.focus USING btree (hsys_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:focus_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.focus focus_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'focus_id_pkey', '', 'ascendco.focus focus_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''focus_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'focus_id_pkey', '', 'ascendco.focus focus_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''focus_id_pkey'';', 'CREATE UNIQUE INDEX focus_id_pkey ON ascendco.focus USING btree (scase_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:form_template_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.form_template form_template_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'form_template_pkey', '', 'ascendco.form_template form_template_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''form_template_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'form_template_pkey', '', 'ascendco.form_template form_template_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''form_template_pkey'';', 'CREATE UNIQUE INDEX form_template_pkey ON ascendco.form_template USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:hour_bin_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for api.hour_bin hour_bin_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'api', 'hour_bin_id_pkey', '', 'api.hour_bin hour_bin_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''api'' and indexname = ''hour_bin_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'api', 'hour_bin_id_pkey', '', 'api.hour_bin hour_bin_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''api'' and indexname = ''hour_bin_id_pkey'';', 'CREATE UNIQUE INDEX hour_bin_id_pkey ON api.hour_bin USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:hsys_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.hsys hsys_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'hsys_id_pkey', '', 'ascendco.hsys hsys_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''hsys_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'hsys_id_pkey', '', 'ascendco.hsys hsys_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''hsys_id_pkey'';', 'CREATE UNIQUE INDEX hsys_id_pkey ON ascendco.hsys USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:iceberg_table_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.iceberg_table iceberg_table_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'iceberg_table_pkey', '', 'ascendco.iceberg_table iceberg_table_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''iceberg_table_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'iceberg_table_pkey', '', 'ascendco.iceberg_table iceberg_table_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''iceberg_table_pkey'';', 'CREATE UNIQUE INDEX iceberg_table_pkey ON ascendco.iceberg_table USING btree (table_number)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:index_list.test.sqlselect * from test_case_setup('Index', 'Global', 'index_list', '', 'Index list comparison', 'select string_agg(indexname, '','' order by indexname) as index_list from pg_indexes;', 'activity_pkey,analytic_productivity_facility_id_ix_fkey,analytic_productivity_hsys_id_ix_fkey,analytic_productivity_id_pkey,analytic_productivity_item_type_id_ix_fkey,analytic_productivity_marked_for_deletion_ix_bgin,analytic_productivity_pg_con_id_key,analytic_scan_facility_id_ix_fkey,analytic_scan_id_pkey,analytic_scan_pg_con_id_key,analytic_sterilizer_load_facility_id_ix_fkey,analytic_sterilizer_load_id_pkey,analytic_sterilizer_load_instruments_count_ix_btree,analytic_sterilizer_load_packs_count_ix_btree,analytic_sterilizer_load_sterilize_params_id_ix_fkey,analytic_sterilizer_load_sterilizer_id_ix_fkey,analytic_sterilizer_load_trays_count_count_ix_btree,analytic_sterilizer_load_web_user_id_ix_fkey,analytic_sterilizer_loadinv_facility_id_ix_btree,analytic_sterilizer_loadinv_id_pkey,analytic_sterilizer_loadinv_item_type_id_ix_btree,analytic_sterilizer_loadinv_marked_for_deletion_ix_bgin,analytic_sterilizer_loadinv_sterilize_params_id_ix_btree,analytic_sterilizer_loadinv_sterilizer_id_ix_btree,analytic_sterilizer_loadinv_web_user_id_ix_btree,analytic_sterilizer_marked_for_deletion_ix_bgin,analytic_work_marked_for_deletion_ix_gin,analytic_work_pk,assembly_id_pkey,assembly_prods_assembly_id_covering_idx,assembly_prods_default_assembly_id_marked_for_deletion_idx,assembly_prods_default_pkey,assembly_prods_pkey,assembly_prods_y2015_assembly_id_marked_for_deletion_idx,assembly_prods_y2015_pkey,assembly_prods_y2016_m010203_assembly_id_marked_for_deletio_idx,assembly_prods_y2016_m010203_pkey,assembly_prods_y2016_m040506_assembly_id_marked_for_deletio_idx,assembly_prods_y2016_m040506_pkey,assembly_prods_y2016_m070809_assembly_id_marked_for_deletio_idx,assembly_prods_y2016_m070809_pkey,assembly_prods_y2016_m101112_assembly_id_marked_for_deletio_idx,assembly_prods_y2016_m101112_pkey,assembly_prods_y2017_m010203_assembly_id_marked_for_deletio_idx,assembly_prods_y2017_m010203_pkey,assembly_prods_y2017_m040506_assembly_id_marked_for_deletio_idx,assembly_prods_y2017_m040506_pkey,assembly_prods_y2017_m070809_assembly_id_marked_for_deletio_idx,assembly_prods_y2017_m070809_pkey,assembly_prods_y2017_m101112_assembly_id_marked_for_deletio_idx,assembly_prods_y2017_m101112_pkey,assembly_prods_y2018_m010203_assembly_id_marked_for_deletio_idx,assembly_prods_y2018_m010203_pkey,assembly_prods_y2018_m040506_assembly_id_marked_for_deletio_idx,assembly_prods_y2018_m040506_pkey,assembly_prods_y2018_m070809_assembly_id_marked_for_deletio_idx,assembly_prods_y2018_m070809_pkey,assembly_prods_y2018_m101112_assembly_id_marked_for_deletio_idx,assembly_prods_y2018_m101112_pkey,assembly_prods_y2019_m010203_assembly_id_marked_for_deletio_idx,assembly_prods_y2019_m010203_pkey,assembly_prods_y2019_m040506_assembly_id_marked_for_deletio_idx,assembly_prods_y2019_m040506_pkey,assembly_prods_y2019_m070809_assembly_id_marked_for_deletio_idx,assembly_prods_y2019_m070809_pkey,assembly_prods_y2019_m101112_assembly_id_marked_for_deletio_idx,assembly_prods_y2019_m101112_pkey,assembly_prods_y2020_m010203_assembly_id_marked_for_deletio_idx,assembly_prods_y2020_m010203_pkey,assembly_prods_y2020_m040506_assembly_id_marked_for_deletio_idx,assembly_prods_y2020_m040506_pkey,assembly_prods_y2020_m070809_assembly_id_marked_for_deletio_idx,assembly_prods_y2020_m070809_pkey,assembly_prods_y2020_m101112_assembly_id_marked_for_deletio_idx,assembly_prods_y2020_m101112_pkey,assembly_prods_y2021_m010203_assembly_id_marked_for_deletio_idx,assembly_prods_y2021_m010203_pkey,assembly_prods_y2021_m040506_assembly_id_marked_for_deletio_idx,assembly_prods_y2021_m040506_pkey,assembly_prods_y2021_m070809_assembly_id_marked_for_deletio_idx,assembly_prods_y2021_m070809_pkey,assembly_prods_y2021_m101112_assembly_id_marked_for_deletio_idx,assembly_prods_y2021_m101112_pkey,calendar_calendar_name_key,calendar_day_pkey,calendar_pkey,calendar_year_pkey,calendar_year_unique_abbr,calendar_year_unique_name,clinic_pkey,data_file_info_pkey,ddl_event_log_id_pkey,deletion_log_pkey,domo_dataset_id_pkey,domo_passthrough_key_unique,domo_passthrough_pkey,error_code_pkey,facility_activities_pkey,facility_department_pkey,facility_location_id_pkey,facility_pkey,focus_facility_id_ix_btree,focus_hsys_id_ix_btree,focus_id_pkey,form_template_pkey,hour_bin_id_pkey,hsys_id_pkey,iceberg_table_pkey,inv_pkey,item_arch_pkey,item_pkey,item_type_id_pkey,loaner_case_pkey,loaner_item_pkey,loaner_iteminv_pkey,loaner_pkey,need_facility_id_ix_fkey,need_id_pkey,outlier_change_pkey,outlier_rule_id_unique,outlier_rule_pkey,passthrough_dataset_name_and_version_ix_btree,patch_log_id_pkey,pg_aggregate_fnoid_index,pg_am_name_index,pg_am_oid_index,pg_amop_fam_strat_index,pg_amop_oid_index,pg_amop_opr_fam_index,pg_amproc_fam_proc_index,pg_amproc_oid_index,pg_attrdef_adrelid_adnum_index,pg_attrdef_oid_index,pg_attribute_relid_attnam_index,pg_attribute_relid_attnum_index,pg_auth_members_member_role_index,pg_auth_members_role_member_index,pg_authid_oid_index,pg_authid_rolname_index,pg_cast_oid_index,pg_cast_source_target_index,pg_class_oid_index,pg_class_relname_nsp_index,pg_class_tblspc_relfilenode_index,pg_collation_name_enc_nsp_index,pg_collation_oid_index,pg_constraint_conname_nsp_index,pg_constraint_conparentid_index,pg_constraint_conrelid_contypid_conname_index,pg_constraint_contypid_index,pg_constraint_oid_index,pg_conversion_default_index,pg_conversion_name_nsp_index,pg_conversion_oid_index,pg_database_datname_index,pg_database_oid_index,pg_db_role_setting_databaseid_rol_index,pg_default_acl_oid_index,pg_default_acl_role_nsp_obj_index,pg_depend_depender_index,pg_depend_reference_index,pg_description_o_c_o_index,pg_enum_oid_index,pg_enum_typid_label_index,pg_enum_typid_sortorder_index,pg_event_trigger_evtname_index,pg_event_trigger_oid_index,pg_extension_name_index,pg_extension_oid_index,pg_foreign_data_wrapper_name_index,pg_foreign_data_wrapper_oid_index,pg_foreign_server_name_index,pg_foreign_server_oid_index,pg_foreign_table_relid_index,pg_index_indexrelid_index,pg_index_indrelid_index,pg_inherits_parent_index,pg_inherits_relid_seqno_index,pg_init_privs_o_c_o_index,pg_language_name_index,pg_language_oid_index,pg_largeobject_loid_pn_index,pg_largeobject_metadata_oid_index,pg_namespace_nspname_index,pg_namespace_oid_index,pg_opclass_am_name_nsp_index,pg_opclass_oid_index,pg_operator_oid_index,pg_operator_oprname_l_r_n_index,pg_opfamily_am_name_nsp_index,pg_opfamily_oid_index,pg_partitioned_table_partrelid_index,pg_policy_oid_index,pg_policy_polrelid_polname_index,pg_proc_oid_index,pg_proc_proname_args_nsp_index,pg_publication_oid_index,pg_publication_pubname_index,pg_publication_rel_oid_index,pg_publication_rel_prrelid_prpubid_index,pg_range_rngtypid_index,pg_replication_origin_roiident_index,pg_replication_origin_roname_index,pg_rewrite_oid_index,pg_rewrite_rel_rulename_index,pg_seclabel_object_index,pg_sequence_seqrelid_index,pg_shdepend_depender_index,pg_shdepend_reference_index,pg_shdescription_o_c_index,pg_shseclabel_object_index,pg_statistic_ext_data_stxoid_index,pg_statistic_ext_name_index,pg_statistic_ext_oid_index,pg_statistic_ext_relid_index,pg_statistic_relid_att_inh_index,pg_subscription_oid_index,pg_subscription_rel_srrelid_srsubid_index,pg_subscription_subname_index,pg_tablespace_oid_index,pg_tablespace_spcname_index,pg_transform_oid_index,pg_transform_type_lang_index,pg_trigger_oid_index,pg_trigger_tgconstraint_index,pg_trigger_tgrelid_tgname_index,pg_ts_config_cfgname_index,pg_ts_config_map_index,pg_ts_config_oid_index,pg_ts_dict_dictname_index,pg_ts_dict_oid_index,pg_ts_parser_oid_index,pg_ts_parser_prsname_index,pg_ts_template_oid_index,pg_ts_template_tmplname_index,pg_type_oid_index,pg_type_typname_nsp_index,pg_user_mapping_oid_index,pg_user_mapping_user_server_index,productivity_detail_2020_01_facility_id_idx,productivity_detail_2020_01_pkey,productivity_detail_2020_01_year_and_month_idx,productivity_detail_2020_02_facility_id_idx,productivity_detail_2020_02_pkey,productivity_detail_2020_02_year_and_month_idx,productivity_detail_2020_03_facility_id_idx,productivity_detail_2020_03_pkey,productivity_detail_2020_03_year_and_month_idx,productivity_detail_2020_04_facility_id_idx,productivity_detail_2020_04_pkey,productivity_detail_2020_04_year_and_month_idx,productivity_detail_2020_05_facility_id_idx,productivity_detail_2020_05_pkey,productivity_detail_2020_05_year_and_month_idx,productivity_detail_2020_06_facility_id_idx,productivity_detail_2020_06_pkey,productivity_detail_2020_06_year_and_month_idx,productivity_detail_2020_07_facility_id_idx,productivity_detail_2020_07_pkey,productivity_detail_2020_07_year_and_month_idx,productivity_detail_2020_08_facility_id_idx,productivity_detail_2020_08_pkey,productivity_detail_2020_08_year_and_month_idx,productivity_detail_2020_09_facility_id_idx,productivity_detail_2020_09_pkey,productivity_detail_2020_09_year_and_month_idx,productivity_detail_2020_10_facility_id_idx,productivity_detail_2020_10_pkey,productivity_detail_2020_10_year_and_month_idx,productivity_detail_2020_11_facility_id_idx,productivity_detail_2020_11_pkey,productivity_detail_2020_11_year_and_month_idx,productivity_detail_2020_12_facility_id_idx,productivity_detail_2020_12_pkey,productivity_detail_2020_12_year_and_month_idx,productivity_detail_2021_01_facility_id_idx,productivity_detail_2021_01_pkey,productivity_detail_2021_01_year_and_month_idx,productivity_detail_2021_02_facility_id_idx,productivity_detail_2021_02_pkey,productivity_detail_2021_02_year_and_month_idx,productivity_detail_2021_03_facility_id_idx,productivity_detail_2021_03_pkey,productivity_detail_2021_03_year_and_month_idx,productivity_detail_2021_04_facility_id_idx,productivity_detail_2021_04_pkey,productivity_detail_2021_04_year_and_month_idx,productivity_detail_2021_05_facility_id_idx,productivity_detail_2021_05_pkey,productivity_detail_2021_05_year_and_month_idx,productivity_detail_2021_06_facility_id_idx,productivity_detail_2021_06_pkey,productivity_detail_2021_06_year_and_month_idx,productivity_detail_2021_07_facility_id_idx,productivity_detail_2021_07_pkey,productivity_detail_2021_07_year_and_month_idx,productivity_detail_2021_08_facility_id_idx,productivity_detail_2021_08_pkey,productivity_detail_2021_08_year_and_month_idx,productivity_detail_2021_09_facility_id_idx,productivity_detail_2021_09_pkey,productivity_detail_2021_09_year_and_month_idx,productivity_detail_2021_10_facility_id_idx,productivity_detail_2021_10_pkey,productivity_detail_2021_10_year_and_month_idx,productivity_detail_2021_11_facility_id_idx,productivity_detail_2021_11_pkey,productivity_detail_2021_11_year_and_month_idx,productivity_detail_2021_12_facility_id_idx,productivity_detail_2021_12_pkey,productivity_detail_2021_12_year_and_month_idx,productivity_detail_default_facility_id_idx,productivity_detail_default_pkey,productivity_detail_default_year_and_month_idx,productivity_detail_facility_id_ix_btree,productivity_detail_id_pkey,productivity_detail_year_and_month_ix_btree,push_audit_pkey,push_log_data_file_id_ix_btree,push_log_ib_table_name_ix_btree,push_log_id_pkey,push_log_push_dts_ix_btree,push_target_pkey,push_target_unique_path_key,q_audit_step_pkey,q_event_audit_step_pkey,q_event_person_pkey,q_event_pkey,q_level_pkey,q_subtype_pkey,q_type_pkey,rcl_check_pkey,rcl_id_pkey,record_changes_log_detail_pkey,record_changes_log_id_ix_fkey,record_changes_log_pkey,record_changes_log_record_id_ix_btree,rep_pkey,row_compare_fail,row_compare_pkey,specialty_id_pkey,stat_facility_pkey,sterilize_method_id_pkey,sterilize_params_id_pkey,sterilizer_id_pkey,sterilizer_load_id_pkey,sterilizer_log_id_pkey,sup_parent_pkey,sup_pkey,target_count_pk,test_case_id_pkey,test_case_unique_signature,test_result_case_and_user_unique,test_result_id_pkey,text_collection_item_pkey,text_collection_item_text_ix_tgrm_gist,text_collection_name_idx,text_collection_pkey,view_catalog_id_pkey,web_user_id_pkey', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:inv_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.inv inv_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'inv_pkey', '', 'ascendco.inv inv_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''inv_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'inv_pkey', '', 'ascendco.inv inv_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''inv_pkey'';', 'CREATE UNIQUE INDEX inv_pkey ON ascendco.inv USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:item_arch_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.item_arch item_arch_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'item_arch_pkey', '', 'ascendco.item_arch item_arch_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''item_arch_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'item_arch_pkey', '', 'ascendco.item_arch item_arch_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''item_arch_pkey'';', 'CREATE UNIQUE INDEX item_arch_pkey ON ascendco.item_arch USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:item_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.item item_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'item_pkey', '', 'ascendco.item item_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''item_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'item_pkey', '', 'ascendco.item item_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''item_pkey'';', 'CREATE UNIQUE INDEX item_pkey ON ascendco.item USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:item_type_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.item_type item_type_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'item_type_id_pkey', '', 'ascendco.item_type item_type_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''item_type_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'item_type_id_pkey', '', 'ascendco.item_type item_type_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''item_type_id_pkey'';', 'CREATE UNIQUE INDEX item_type_id_pkey ON ascendco.item_type USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:loaner_case_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.loaner_case loaner_case_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'loaner_case_pkey', '', 'ascendco.loaner_case loaner_case_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''loaner_case_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'loaner_case_pkey', '', 'ascendco.loaner_case loaner_case_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''loaner_case_pkey'';', 'CREATE UNIQUE INDEX loaner_case_pkey ON ascendco.loaner_case USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:loaner_item_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.loaner_item loaner_item_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'loaner_item_pkey', '', 'ascendco.loaner_item loaner_item_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''loaner_item_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'loaner_item_pkey', '', 'ascendco.loaner_item loaner_item_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''loaner_item_pkey'';', 'CREATE UNIQUE INDEX loaner_item_pkey ON ascendco.loaner_item USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:loaner_iteminv_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.loaner_iteminv loaner_iteminv_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'loaner_iteminv_pkey', '', 'ascendco.loaner_iteminv loaner_iteminv_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''loaner_iteminv_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'loaner_iteminv_pkey', '', 'ascendco.loaner_iteminv loaner_iteminv_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''loaner_iteminv_pkey'';', 'CREATE UNIQUE INDEX loaner_iteminv_pkey ON ascendco.loaner_iteminv USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:loaner_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.loaner loaner_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'loaner_pkey', '', 'ascendco.loaner loaner_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''loaner_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'loaner_pkey', '', 'ascendco.loaner loaner_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''loaner_pkey'';', 'CREATE UNIQUE INDEX loaner_pkey ON ascendco.loaner USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:need_facility_id_ix_fkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.need need_facility_id_ix_fkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'need_facility_id_ix_fkey', '', 'ascendco.need need_facility_id_ix_fkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''need_facility_id_ix_fkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'need_facility_id_ix_fkey', '', 'ascendco.need need_facility_id_ix_fkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''need_facility_id_ix_fkey'';', 'CREATE INDEX need_facility_id_ix_fkey ON ascendco.need USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:need_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.need need_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'need_id_pkey', '', 'ascendco.need need_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''need_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'need_id_pkey', '', 'ascendco.need need_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''need_id_pkey'';', 'CREATE UNIQUE INDEX need_id_pkey ON ascendco.need USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:outlier_change_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.outlier_change outlier_change_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'outlier_change_pkey', '', 'ascendco.outlier_change outlier_change_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''outlier_change_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'outlier_change_pkey', '', 'ascendco.outlier_change outlier_change_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''outlier_change_pkey'';', 'CREATE UNIQUE INDEX outlier_change_pkey ON ascendco.outlier_change USING btree (id, outlier_rule_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:outlier_rule_id_unique.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.outlier_rule outlier_rule_id_unique index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'outlier_rule_id_unique', '', 'ascendco.outlier_rule outlier_rule_id_unique existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''outlier_rule_id_unique'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'outlier_rule_id_unique', '', 'ascendco.outlier_rule outlier_rule_id_unique definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''outlier_rule_id_unique'';', 'CREATE UNIQUE INDEX outlier_rule_id_unique ON ascendco.outlier_rule USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:outlier_rule_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.outlier_rule outlier_rule_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'outlier_rule_pkey', '', 'ascendco.outlier_rule outlier_rule_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''outlier_rule_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'outlier_rule_pkey', '', 'ascendco.outlier_rule outlier_rule_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''outlier_rule_pkey'';', 'CREATE UNIQUE INDEX outlier_rule_pkey ON ascendco.outlier_rule USING btree (schema_name, table_name, column_name)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:passthrough_dataset_name_and_version_ix_btree.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.domo_passthrough passthrough_dataset_name_and_version_ix_btree index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'passthrough_dataset_name_and_version_ix_btree', '', 'ascendco.domo_passthrough passthrough_dataset_name_and_version_ix_btree existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''passthrough_dataset_name_and_version_ix_btree'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'passthrough_dataset_name_and_version_ix_btree', '', 'ascendco.domo_passthrough passthrough_dataset_name_and_version_ix_btree definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''passthrough_dataset_name_and_version_ix_btree'';', 'CREATE INDEX passthrough_dataset_name_and_version_ix_btree ON ascendco.domo_passthrough USING btree (dataset_name, view_version)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:patch_log_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for dba.patch_log patch_log_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'dba', 'patch_log_id_pkey', '', 'dba.patch_log patch_log_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''dba'' and indexname = ''patch_log_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'dba', 'patch_log_id_pkey', '', 'dba.patch_log patch_log_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''dba'' and indexname = ''patch_log_id_pkey'';', 'CREATE UNIQUE INDEX patch_log_id_pkey ON dba.patch_log USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_01_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_01 productivity_detail_2020_01_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_01_facility_id_idx', '', 'ascendco.productivity_detail_2020_01 productivity_detail_2020_01_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_01_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_01_facility_id_idx', '', 'ascendco.productivity_detail_2020_01 productivity_detail_2020_01_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_01_facility_id_idx'';', 'CREATE INDEX productivity_detail_2020_01_facility_id_idx ON ascendco.productivity_detail_2020_01 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_01_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_01 productivity_detail_2020_01_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_01_pkey', '', 'ascendco.productivity_detail_2020_01 productivity_detail_2020_01_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_01_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_01_pkey', '', 'ascendco.productivity_detail_2020_01 productivity_detail_2020_01_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_01_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2020_01_pkey ON ascendco.productivity_detail_2020_01 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_01_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_01 productivity_detail_2020_01_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_01_year_and_month_idx', '', 'ascendco.productivity_detail_2020_01 productivity_detail_2020_01_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_01_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_01_year_and_month_idx', '', 'ascendco.productivity_detail_2020_01 productivity_detail_2020_01_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_01_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2020_01_year_and_month_idx ON ascendco.productivity_detail_2020_01 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_02_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_02 productivity_detail_2020_02_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_02_facility_id_idx', '', 'ascendco.productivity_detail_2020_02 productivity_detail_2020_02_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_02_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_02_facility_id_idx', '', 'ascendco.productivity_detail_2020_02 productivity_detail_2020_02_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_02_facility_id_idx'';', 'CREATE INDEX productivity_detail_2020_02_facility_id_idx ON ascendco.productivity_detail_2020_02 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_02_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_02 productivity_detail_2020_02_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_02_pkey', '', 'ascendco.productivity_detail_2020_02 productivity_detail_2020_02_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_02_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_02_pkey', '', 'ascendco.productivity_detail_2020_02 productivity_detail_2020_02_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_02_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2020_02_pkey ON ascendco.productivity_detail_2020_02 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_02_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_02 productivity_detail_2020_02_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_02_year_and_month_idx', '', 'ascendco.productivity_detail_2020_02 productivity_detail_2020_02_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_02_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_02_year_and_month_idx', '', 'ascendco.productivity_detail_2020_02 productivity_detail_2020_02_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_02_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2020_02_year_and_month_idx ON ascendco.productivity_detail_2020_02 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_03_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_03 productivity_detail_2020_03_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_03_facility_id_idx', '', 'ascendco.productivity_detail_2020_03 productivity_detail_2020_03_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_03_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_03_facility_id_idx', '', 'ascendco.productivity_detail_2020_03 productivity_detail_2020_03_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_03_facility_id_idx'';', 'CREATE INDEX productivity_detail_2020_03_facility_id_idx ON ascendco.productivity_detail_2020_03 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_03_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_03 productivity_detail_2020_03_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_03_pkey', '', 'ascendco.productivity_detail_2020_03 productivity_detail_2020_03_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_03_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_03_pkey', '', 'ascendco.productivity_detail_2020_03 productivity_detail_2020_03_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_03_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2020_03_pkey ON ascendco.productivity_detail_2020_03 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_03_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_03 productivity_detail_2020_03_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_03_year_and_month_idx', '', 'ascendco.productivity_detail_2020_03 productivity_detail_2020_03_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_03_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_03_year_and_month_idx', '', 'ascendco.productivity_detail_2020_03 productivity_detail_2020_03_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_03_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2020_03_year_and_month_idx ON ascendco.productivity_detail_2020_03 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_04_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_04 productivity_detail_2020_04_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_04_facility_id_idx', '', 'ascendco.productivity_detail_2020_04 productivity_detail_2020_04_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_04_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_04_facility_id_idx', '', 'ascendco.productivity_detail_2020_04 productivity_detail_2020_04_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_04_facility_id_idx'';', 'CREATE INDEX productivity_detail_2020_04_facility_id_idx ON ascendco.productivity_detail_2020_04 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_04_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_04 productivity_detail_2020_04_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_04_pkey', '', 'ascendco.productivity_detail_2020_04 productivity_detail_2020_04_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_04_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_04_pkey', '', 'ascendco.productivity_detail_2020_04 productivity_detail_2020_04_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_04_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2020_04_pkey ON ascendco.productivity_detail_2020_04 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_04_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_04 productivity_detail_2020_04_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_04_year_and_month_idx', '', 'ascendco.productivity_detail_2020_04 productivity_detail_2020_04_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_04_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_04_year_and_month_idx', '', 'ascendco.productivity_detail_2020_04 productivity_detail_2020_04_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_04_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2020_04_year_and_month_idx ON ascendco.productivity_detail_2020_04 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_05_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_05 productivity_detail_2020_05_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_05_facility_id_idx', '', 'ascendco.productivity_detail_2020_05 productivity_detail_2020_05_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_05_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_05_facility_id_idx', '', 'ascendco.productivity_detail_2020_05 productivity_detail_2020_05_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_05_facility_id_idx'';', 'CREATE INDEX productivity_detail_2020_05_facility_id_idx ON ascendco.productivity_detail_2020_05 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_05_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_05 productivity_detail_2020_05_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_05_pkey', '', 'ascendco.productivity_detail_2020_05 productivity_detail_2020_05_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_05_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_05_pkey', '', 'ascendco.productivity_detail_2020_05 productivity_detail_2020_05_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_05_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2020_05_pkey ON ascendco.productivity_detail_2020_05 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_05_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_05 productivity_detail_2020_05_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_05_year_and_month_idx', '', 'ascendco.productivity_detail_2020_05 productivity_detail_2020_05_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_05_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_05_year_and_month_idx', '', 'ascendco.productivity_detail_2020_05 productivity_detail_2020_05_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_05_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2020_05_year_and_month_idx ON ascendco.productivity_detail_2020_05 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_06_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_06 productivity_detail_2020_06_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_06_facility_id_idx', '', 'ascendco.productivity_detail_2020_06 productivity_detail_2020_06_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_06_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_06_facility_id_idx', '', 'ascendco.productivity_detail_2020_06 productivity_detail_2020_06_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_06_facility_id_idx'';', 'CREATE INDEX productivity_detail_2020_06_facility_id_idx ON ascendco.productivity_detail_2020_06 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_06_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_06 productivity_detail_2020_06_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_06_pkey', '', 'ascendco.productivity_detail_2020_06 productivity_detail_2020_06_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_06_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_06_pkey', '', 'ascendco.productivity_detail_2020_06 productivity_detail_2020_06_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_06_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2020_06_pkey ON ascendco.productivity_detail_2020_06 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_06_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_06 productivity_detail_2020_06_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_06_year_and_month_idx', '', 'ascendco.productivity_detail_2020_06 productivity_detail_2020_06_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_06_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_06_year_and_month_idx', '', 'ascendco.productivity_detail_2020_06 productivity_detail_2020_06_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_06_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2020_06_year_and_month_idx ON ascendco.productivity_detail_2020_06 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_07_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_07 productivity_detail_2020_07_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_07_facility_id_idx', '', 'ascendco.productivity_detail_2020_07 productivity_detail_2020_07_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_07_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_07_facility_id_idx', '', 'ascendco.productivity_detail_2020_07 productivity_detail_2020_07_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_07_facility_id_idx'';', 'CREATE INDEX productivity_detail_2020_07_facility_id_idx ON ascendco.productivity_detail_2020_07 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_07_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_07 productivity_detail_2020_07_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_07_pkey', '', 'ascendco.productivity_detail_2020_07 productivity_detail_2020_07_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_07_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_07_pkey', '', 'ascendco.productivity_detail_2020_07 productivity_detail_2020_07_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_07_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2020_07_pkey ON ascendco.productivity_detail_2020_07 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_07_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_07 productivity_detail_2020_07_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_07_year_and_month_idx', '', 'ascendco.productivity_detail_2020_07 productivity_detail_2020_07_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_07_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_07_year_and_month_idx', '', 'ascendco.productivity_detail_2020_07 productivity_detail_2020_07_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_07_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2020_07_year_and_month_idx ON ascendco.productivity_detail_2020_07 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_08_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_08 productivity_detail_2020_08_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_08_facility_id_idx', '', 'ascendco.productivity_detail_2020_08 productivity_detail_2020_08_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_08_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_08_facility_id_idx', '', 'ascendco.productivity_detail_2020_08 productivity_detail_2020_08_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_08_facility_id_idx'';', 'CREATE INDEX productivity_detail_2020_08_facility_id_idx ON ascendco.productivity_detail_2020_08 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_08_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_08 productivity_detail_2020_08_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_08_pkey', '', 'ascendco.productivity_detail_2020_08 productivity_detail_2020_08_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_08_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_08_pkey', '', 'ascendco.productivity_detail_2020_08 productivity_detail_2020_08_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_08_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2020_08_pkey ON ascendco.productivity_detail_2020_08 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_08_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_08 productivity_detail_2020_08_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_08_year_and_month_idx', '', 'ascendco.productivity_detail_2020_08 productivity_detail_2020_08_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_08_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_08_year_and_month_idx', '', 'ascendco.productivity_detail_2020_08 productivity_detail_2020_08_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_08_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2020_08_year_and_month_idx ON ascendco.productivity_detail_2020_08 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_09_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_09 productivity_detail_2020_09_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_09_facility_id_idx', '', 'ascendco.productivity_detail_2020_09 productivity_detail_2020_09_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_09_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_09_facility_id_idx', '', 'ascendco.productivity_detail_2020_09 productivity_detail_2020_09_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_09_facility_id_idx'';', 'CREATE INDEX productivity_detail_2020_09_facility_id_idx ON ascendco.productivity_detail_2020_09 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_09_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_09 productivity_detail_2020_09_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_09_pkey', '', 'ascendco.productivity_detail_2020_09 productivity_detail_2020_09_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_09_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_09_pkey', '', 'ascendco.productivity_detail_2020_09 productivity_detail_2020_09_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_09_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2020_09_pkey ON ascendco.productivity_detail_2020_09 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_09_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_09 productivity_detail_2020_09_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_09_year_and_month_idx', '', 'ascendco.productivity_detail_2020_09 productivity_detail_2020_09_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_09_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_09_year_and_month_idx', '', 'ascendco.productivity_detail_2020_09 productivity_detail_2020_09_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_09_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2020_09_year_and_month_idx ON ascendco.productivity_detail_2020_09 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_10_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_10 productivity_detail_2020_10_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_10_facility_id_idx', '', 'ascendco.productivity_detail_2020_10 productivity_detail_2020_10_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_10_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_10_facility_id_idx', '', 'ascendco.productivity_detail_2020_10 productivity_detail_2020_10_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_10_facility_id_idx'';', 'CREATE INDEX productivity_detail_2020_10_facility_id_idx ON ascendco.productivity_detail_2020_10 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_10_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_10 productivity_detail_2020_10_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_10_pkey', '', 'ascendco.productivity_detail_2020_10 productivity_detail_2020_10_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_10_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_10_pkey', '', 'ascendco.productivity_detail_2020_10 productivity_detail_2020_10_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_10_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2020_10_pkey ON ascendco.productivity_detail_2020_10 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_10_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_10 productivity_detail_2020_10_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_10_year_and_month_idx', '', 'ascendco.productivity_detail_2020_10 productivity_detail_2020_10_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_10_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_10_year_and_month_idx', '', 'ascendco.productivity_detail_2020_10 productivity_detail_2020_10_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_10_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2020_10_year_and_month_idx ON ascendco.productivity_detail_2020_10 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_11_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_11 productivity_detail_2020_11_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_11_facility_id_idx', '', 'ascendco.productivity_detail_2020_11 productivity_detail_2020_11_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_11_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_11_facility_id_idx', '', 'ascendco.productivity_detail_2020_11 productivity_detail_2020_11_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_11_facility_id_idx'';', 'CREATE INDEX productivity_detail_2020_11_facility_id_idx ON ascendco.productivity_detail_2020_11 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_11_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_11 productivity_detail_2020_11_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_11_pkey', '', 'ascendco.productivity_detail_2020_11 productivity_detail_2020_11_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_11_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_11_pkey', '', 'ascendco.productivity_detail_2020_11 productivity_detail_2020_11_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_11_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2020_11_pkey ON ascendco.productivity_detail_2020_11 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_11_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_11 productivity_detail_2020_11_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_11_year_and_month_idx', '', 'ascendco.productivity_detail_2020_11 productivity_detail_2020_11_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_11_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_11_year_and_month_idx', '', 'ascendco.productivity_detail_2020_11 productivity_detail_2020_11_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_11_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2020_11_year_and_month_idx ON ascendco.productivity_detail_2020_11 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_12_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_12 productivity_detail_2020_12_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_12_facility_id_idx', '', 'ascendco.productivity_detail_2020_12 productivity_detail_2020_12_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_12_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_12_facility_id_idx', '', 'ascendco.productivity_detail_2020_12 productivity_detail_2020_12_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_12_facility_id_idx'';', 'CREATE INDEX productivity_detail_2020_12_facility_id_idx ON ascendco.productivity_detail_2020_12 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_12_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_12 productivity_detail_2020_12_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_12_pkey', '', 'ascendco.productivity_detail_2020_12 productivity_detail_2020_12_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_12_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_12_pkey', '', 'ascendco.productivity_detail_2020_12 productivity_detail_2020_12_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_12_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2020_12_pkey ON ascendco.productivity_detail_2020_12 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2020_12_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2020_12 productivity_detail_2020_12_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_12_year_and_month_idx', '', 'ascendco.productivity_detail_2020_12 productivity_detail_2020_12_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_12_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2020_12_year_and_month_idx', '', 'ascendco.productivity_detail_2020_12 productivity_detail_2020_12_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2020_12_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2020_12_year_and_month_idx ON ascendco.productivity_detail_2020_12 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_01_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_01 productivity_detail_2021_01_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_01_facility_id_idx', '', 'ascendco.productivity_detail_2021_01 productivity_detail_2021_01_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_01_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_01_facility_id_idx', '', 'ascendco.productivity_detail_2021_01 productivity_detail_2021_01_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_01_facility_id_idx'';', 'CREATE INDEX productivity_detail_2021_01_facility_id_idx ON ascendco.productivity_detail_2021_01 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_01_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_01 productivity_detail_2021_01_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_01_pkey', '', 'ascendco.productivity_detail_2021_01 productivity_detail_2021_01_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_01_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_01_pkey', '', 'ascendco.productivity_detail_2021_01 productivity_detail_2021_01_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_01_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2021_01_pkey ON ascendco.productivity_detail_2021_01 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_01_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_01 productivity_detail_2021_01_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_01_year_and_month_idx', '', 'ascendco.productivity_detail_2021_01 productivity_detail_2021_01_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_01_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_01_year_and_month_idx', '', 'ascendco.productivity_detail_2021_01 productivity_detail_2021_01_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_01_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2021_01_year_and_month_idx ON ascendco.productivity_detail_2021_01 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_02_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_02 productivity_detail_2021_02_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_02_facility_id_idx', '', 'ascendco.productivity_detail_2021_02 productivity_detail_2021_02_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_02_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_02_facility_id_idx', '', 'ascendco.productivity_detail_2021_02 productivity_detail_2021_02_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_02_facility_id_idx'';', 'CREATE INDEX productivity_detail_2021_02_facility_id_idx ON ascendco.productivity_detail_2021_02 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_02_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_02 productivity_detail_2021_02_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_02_pkey', '', 'ascendco.productivity_detail_2021_02 productivity_detail_2021_02_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_02_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_02_pkey', '', 'ascendco.productivity_detail_2021_02 productivity_detail_2021_02_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_02_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2021_02_pkey ON ascendco.productivity_detail_2021_02 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_02_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_02 productivity_detail_2021_02_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_02_year_and_month_idx', '', 'ascendco.productivity_detail_2021_02 productivity_detail_2021_02_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_02_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_02_year_and_month_idx', '', 'ascendco.productivity_detail_2021_02 productivity_detail_2021_02_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_02_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2021_02_year_and_month_idx ON ascendco.productivity_detail_2021_02 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_03_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_03 productivity_detail_2021_03_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_03_facility_id_idx', '', 'ascendco.productivity_detail_2021_03 productivity_detail_2021_03_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_03_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_03_facility_id_idx', '', 'ascendco.productivity_detail_2021_03 productivity_detail_2021_03_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_03_facility_id_idx'';', 'CREATE INDEX productivity_detail_2021_03_facility_id_idx ON ascendco.productivity_detail_2021_03 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_03_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_03 productivity_detail_2021_03_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_03_pkey', '', 'ascendco.productivity_detail_2021_03 productivity_detail_2021_03_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_03_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_03_pkey', '', 'ascendco.productivity_detail_2021_03 productivity_detail_2021_03_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_03_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2021_03_pkey ON ascendco.productivity_detail_2021_03 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_03_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_03 productivity_detail_2021_03_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_03_year_and_month_idx', '', 'ascendco.productivity_detail_2021_03 productivity_detail_2021_03_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_03_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_03_year_and_month_idx', '', 'ascendco.productivity_detail_2021_03 productivity_detail_2021_03_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_03_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2021_03_year_and_month_idx ON ascendco.productivity_detail_2021_03 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_04_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_04 productivity_detail_2021_04_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_04_facility_id_idx', '', 'ascendco.productivity_detail_2021_04 productivity_detail_2021_04_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_04_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_04_facility_id_idx', '', 'ascendco.productivity_detail_2021_04 productivity_detail_2021_04_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_04_facility_id_idx'';', 'CREATE INDEX productivity_detail_2021_04_facility_id_idx ON ascendco.productivity_detail_2021_04 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_04_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_04 productivity_detail_2021_04_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_04_pkey', '', 'ascendco.productivity_detail_2021_04 productivity_detail_2021_04_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_04_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_04_pkey', '', 'ascendco.productivity_detail_2021_04 productivity_detail_2021_04_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_04_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2021_04_pkey ON ascendco.productivity_detail_2021_04 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_04_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_04 productivity_detail_2021_04_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_04_year_and_month_idx', '', 'ascendco.productivity_detail_2021_04 productivity_detail_2021_04_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_04_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_04_year_and_month_idx', '', 'ascendco.productivity_detail_2021_04 productivity_detail_2021_04_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_04_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2021_04_year_and_month_idx ON ascendco.productivity_detail_2021_04 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_05_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_05 productivity_detail_2021_05_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_05_facility_id_idx', '', 'ascendco.productivity_detail_2021_05 productivity_detail_2021_05_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_05_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_05_facility_id_idx', '', 'ascendco.productivity_detail_2021_05 productivity_detail_2021_05_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_05_facility_id_idx'';', 'CREATE INDEX productivity_detail_2021_05_facility_id_idx ON ascendco.productivity_detail_2021_05 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_05_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_05 productivity_detail_2021_05_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_05_pkey', '', 'ascendco.productivity_detail_2021_05 productivity_detail_2021_05_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_05_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_05_pkey', '', 'ascendco.productivity_detail_2021_05 productivity_detail_2021_05_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_05_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2021_05_pkey ON ascendco.productivity_detail_2021_05 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_05_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_05 productivity_detail_2021_05_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_05_year_and_month_idx', '', 'ascendco.productivity_detail_2021_05 productivity_detail_2021_05_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_05_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_05_year_and_month_idx', '', 'ascendco.productivity_detail_2021_05 productivity_detail_2021_05_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_05_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2021_05_year_and_month_idx ON ascendco.productivity_detail_2021_05 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_06_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_06 productivity_detail_2021_06_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_06_facility_id_idx', '', 'ascendco.productivity_detail_2021_06 productivity_detail_2021_06_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_06_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_06_facility_id_idx', '', 'ascendco.productivity_detail_2021_06 productivity_detail_2021_06_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_06_facility_id_idx'';', 'CREATE INDEX productivity_detail_2021_06_facility_id_idx ON ascendco.productivity_detail_2021_06 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_06_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_06 productivity_detail_2021_06_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_06_pkey', '', 'ascendco.productivity_detail_2021_06 productivity_detail_2021_06_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_06_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_06_pkey', '', 'ascendco.productivity_detail_2021_06 productivity_detail_2021_06_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_06_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2021_06_pkey ON ascendco.productivity_detail_2021_06 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_06_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_06 productivity_detail_2021_06_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_06_year_and_month_idx', '', 'ascendco.productivity_detail_2021_06 productivity_detail_2021_06_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_06_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_06_year_and_month_idx', '', 'ascendco.productivity_detail_2021_06 productivity_detail_2021_06_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_06_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2021_06_year_and_month_idx ON ascendco.productivity_detail_2021_06 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_07_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_07 productivity_detail_2021_07_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_07_facility_id_idx', '', 'ascendco.productivity_detail_2021_07 productivity_detail_2021_07_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_07_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_07_facility_id_idx', '', 'ascendco.productivity_detail_2021_07 productivity_detail_2021_07_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_07_facility_id_idx'';', 'CREATE INDEX productivity_detail_2021_07_facility_id_idx ON ascendco.productivity_detail_2021_07 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_07_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_07 productivity_detail_2021_07_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_07_pkey', '', 'ascendco.productivity_detail_2021_07 productivity_detail_2021_07_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_07_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_07_pkey', '', 'ascendco.productivity_detail_2021_07 productivity_detail_2021_07_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_07_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2021_07_pkey ON ascendco.productivity_detail_2021_07 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_07_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_07 productivity_detail_2021_07_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_07_year_and_month_idx', '', 'ascendco.productivity_detail_2021_07 productivity_detail_2021_07_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_07_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_07_year_and_month_idx', '', 'ascendco.productivity_detail_2021_07 productivity_detail_2021_07_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_07_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2021_07_year_and_month_idx ON ascendco.productivity_detail_2021_07 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_08_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_08 productivity_detail_2021_08_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_08_facility_id_idx', '', 'ascendco.productivity_detail_2021_08 productivity_detail_2021_08_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_08_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_08_facility_id_idx', '', 'ascendco.productivity_detail_2021_08 productivity_detail_2021_08_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_08_facility_id_idx'';', 'CREATE INDEX productivity_detail_2021_08_facility_id_idx ON ascendco.productivity_detail_2021_08 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_08_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_08 productivity_detail_2021_08_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_08_pkey', '', 'ascendco.productivity_detail_2021_08 productivity_detail_2021_08_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_08_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_08_pkey', '', 'ascendco.productivity_detail_2021_08 productivity_detail_2021_08_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_08_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2021_08_pkey ON ascendco.productivity_detail_2021_08 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_08_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_08 productivity_detail_2021_08_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_08_year_and_month_idx', '', 'ascendco.productivity_detail_2021_08 productivity_detail_2021_08_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_08_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_08_year_and_month_idx', '', 'ascendco.productivity_detail_2021_08 productivity_detail_2021_08_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_08_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2021_08_year_and_month_idx ON ascendco.productivity_detail_2021_08 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_09_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_09 productivity_detail_2021_09_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_09_facility_id_idx', '', 'ascendco.productivity_detail_2021_09 productivity_detail_2021_09_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_09_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_09_facility_id_idx', '', 'ascendco.productivity_detail_2021_09 productivity_detail_2021_09_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_09_facility_id_idx'';', 'CREATE INDEX productivity_detail_2021_09_facility_id_idx ON ascendco.productivity_detail_2021_09 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_09_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_09 productivity_detail_2021_09_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_09_pkey', '', 'ascendco.productivity_detail_2021_09 productivity_detail_2021_09_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_09_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_09_pkey', '', 'ascendco.productivity_detail_2021_09 productivity_detail_2021_09_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_09_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2021_09_pkey ON ascendco.productivity_detail_2021_09 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_09_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_09 productivity_detail_2021_09_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_09_year_and_month_idx', '', 'ascendco.productivity_detail_2021_09 productivity_detail_2021_09_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_09_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_09_year_and_month_idx', '', 'ascendco.productivity_detail_2021_09 productivity_detail_2021_09_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_09_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2021_09_year_and_month_idx ON ascendco.productivity_detail_2021_09 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_10_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_10 productivity_detail_2021_10_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_10_facility_id_idx', '', 'ascendco.productivity_detail_2021_10 productivity_detail_2021_10_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_10_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_10_facility_id_idx', '', 'ascendco.productivity_detail_2021_10 productivity_detail_2021_10_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_10_facility_id_idx'';', 'CREATE INDEX productivity_detail_2021_10_facility_id_idx ON ascendco.productivity_detail_2021_10 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_10_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_10 productivity_detail_2021_10_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_10_pkey', '', 'ascendco.productivity_detail_2021_10 productivity_detail_2021_10_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_10_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_10_pkey', '', 'ascendco.productivity_detail_2021_10 productivity_detail_2021_10_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_10_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2021_10_pkey ON ascendco.productivity_detail_2021_10 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_10_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_10 productivity_detail_2021_10_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_10_year_and_month_idx', '', 'ascendco.productivity_detail_2021_10 productivity_detail_2021_10_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_10_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_10_year_and_month_idx', '', 'ascendco.productivity_detail_2021_10 productivity_detail_2021_10_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_10_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2021_10_year_and_month_idx ON ascendco.productivity_detail_2021_10 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_11_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_11 productivity_detail_2021_11_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_11_facility_id_idx', '', 'ascendco.productivity_detail_2021_11 productivity_detail_2021_11_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_11_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_11_facility_id_idx', '', 'ascendco.productivity_detail_2021_11 productivity_detail_2021_11_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_11_facility_id_idx'';', 'CREATE INDEX productivity_detail_2021_11_facility_id_idx ON ascendco.productivity_detail_2021_11 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_11_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_11 productivity_detail_2021_11_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_11_pkey', '', 'ascendco.productivity_detail_2021_11 productivity_detail_2021_11_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_11_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_11_pkey', '', 'ascendco.productivity_detail_2021_11 productivity_detail_2021_11_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_11_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2021_11_pkey ON ascendco.productivity_detail_2021_11 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_11_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_11 productivity_detail_2021_11_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_11_year_and_month_idx', '', 'ascendco.productivity_detail_2021_11 productivity_detail_2021_11_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_11_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_11_year_and_month_idx', '', 'ascendco.productivity_detail_2021_11 productivity_detail_2021_11_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_11_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2021_11_year_and_month_idx ON ascendco.productivity_detail_2021_11 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_12_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_12 productivity_detail_2021_12_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_12_facility_id_idx', '', 'ascendco.productivity_detail_2021_12 productivity_detail_2021_12_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_12_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_12_facility_id_idx', '', 'ascendco.productivity_detail_2021_12 productivity_detail_2021_12_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_12_facility_id_idx'';', 'CREATE INDEX productivity_detail_2021_12_facility_id_idx ON ascendco.productivity_detail_2021_12 USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_12_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_12 productivity_detail_2021_12_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_12_pkey', '', 'ascendco.productivity_detail_2021_12 productivity_detail_2021_12_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_12_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_12_pkey', '', 'ascendco.productivity_detail_2021_12 productivity_detail_2021_12_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_12_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_2021_12_pkey ON ascendco.productivity_detail_2021_12 USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_2021_12_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_2021_12 productivity_detail_2021_12_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_12_year_and_month_idx', '', 'ascendco.productivity_detail_2021_12 productivity_detail_2021_12_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_12_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_2021_12_year_and_month_idx', '', 'ascendco.productivity_detail_2021_12 productivity_detail_2021_12_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_2021_12_year_and_month_idx'';', 'CREATE INDEX productivity_detail_2021_12_year_and_month_idx ON ascendco.productivity_detail_2021_12 USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_default_facility_id_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_default productivity_detail_default_facility_id_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_default_facility_id_idx', '', 'ascendco.productivity_detail_default productivity_detail_default_facility_id_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_default_facility_id_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_default_facility_id_idx', '', 'ascendco.productivity_detail_default productivity_detail_default_facility_id_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_default_facility_id_idx'';', 'CREATE INDEX productivity_detail_default_facility_id_idx ON ascendco.productivity_detail_default USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_default_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_default productivity_detail_default_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_default_pkey', '', 'ascendco.productivity_detail_default productivity_detail_default_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_default_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_default_pkey', '', 'ascendco.productivity_detail_default productivity_detail_default_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_default_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_default_pkey ON ascendco.productivity_detail_default USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_default_year_and_month_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail_default productivity_detail_default_year_and_month_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_default_year_and_month_idx', '', 'ascendco.productivity_detail_default productivity_detail_default_year_and_month_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_default_year_and_month_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_default_year_and_month_idx', '', 'ascendco.productivity_detail_default productivity_detail_default_year_and_month_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_default_year_and_month_idx'';', 'CREATE INDEX productivity_detail_default_year_and_month_idx ON ascendco.productivity_detail_default USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_facility_id_ix_btree.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail productivity_detail_facility_id_ix_btree index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_facility_id_ix_btree', '', 'ascendco.productivity_detail productivity_detail_facility_id_ix_btree existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_facility_id_ix_btree'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_facility_id_ix_btree', '', 'ascendco.productivity_detail productivity_detail_facility_id_ix_btree definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_facility_id_ix_btree'';', 'CREATE INDEX productivity_detail_facility_id_ix_btree ON ONLY ascendco.productivity_detail USING btree (facility_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail productivity_detail_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_id_pkey', '', 'ascendco.productivity_detail productivity_detail_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_id_pkey', '', 'ascendco.productivity_detail productivity_detail_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_id_pkey'';', 'CREATE UNIQUE INDEX productivity_detail_id_pkey ON ONLY ascendco.productivity_detail USING btree (id, source_record_row_counter, year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:productivity_detail_year_and_month_ix_btree.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.productivity_detail productivity_detail_year_and_month_ix_btree index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_year_and_month_ix_btree', '', 'ascendco.productivity_detail productivity_detail_year_and_month_ix_btree existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_year_and_month_ix_btree'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'productivity_detail_year_and_month_ix_btree', '', 'ascendco.productivity_detail productivity_detail_year_and_month_ix_btree definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''productivity_detail_year_and_month_ix_btree'';', 'CREATE INDEX productivity_detail_year_and_month_ix_btree ON ONLY ascendco.productivity_detail USING btree (year_and_month)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:push_audit_pkey.tests.sql------------------------------------------------------------------------------------- Checks for dba.push_audit push_audit_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'dba', 'push_audit_pkey', '', 'dba.push_audit push_audit_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''dba'' and indexname = ''push_audit_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'dba', 'push_audit_pkey', '', 'dba.push_audit push_audit_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''dba'' and indexname = ''push_audit_pkey'';', 'CREATE UNIQUE INDEX push_audit_pkey ON dba.push_audit USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:push_log_data_file_id_ix_btree.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.push_log push_log_data_file_id_ix_btree index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'push_log_data_file_id_ix_btree', '', 'ascendco.push_log push_log_data_file_id_ix_btree existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''push_log_data_file_id_ix_btree'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'push_log_data_file_id_ix_btree', '', 'ascendco.push_log push_log_data_file_id_ix_btree definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''push_log_data_file_id_ix_btree'';', 'CREATE INDEX push_log_data_file_id_ix_btree ON ascendco.push_log USING btree (data_file_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:push_log_ib_table_name_ix_btree.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.push_log push_log_ib_table_name_ix_btree index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'push_log_ib_table_name_ix_btree', '', 'ascendco.push_log push_log_ib_table_name_ix_btree existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''push_log_ib_table_name_ix_btree'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'push_log_ib_table_name_ix_btree', '', 'ascendco.push_log push_log_ib_table_name_ix_btree definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''push_log_ib_table_name_ix_btree'';', 'CREATE INDEX push_log_ib_table_name_ix_btree ON ascendco.push_log USING btree (ib_table_name)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:push_log_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.push_log push_log_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'push_log_id_pkey', '', 'ascendco.push_log push_log_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''push_log_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'push_log_id_pkey', '', 'ascendco.push_log push_log_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''push_log_id_pkey'';', 'CREATE UNIQUE INDEX push_log_id_pkey ON ascendco.push_log USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:push_log_push_dts_ix_btree.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.push_log push_log_push_dts_ix_btree index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'push_log_push_dts_ix_btree', '', 'ascendco.push_log push_log_push_dts_ix_btree existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''push_log_push_dts_ix_btree'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'push_log_push_dts_ix_btree', '', 'ascendco.push_log push_log_push_dts_ix_btree definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''push_log_push_dts_ix_btree'';', 'CREATE INDEX push_log_push_dts_ix_btree ON ascendco.push_log USING btree (push_dts)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:push_target_pkey.tests.sql------------------------------------------------------------------------------------- Checks for dba.push_target push_target_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'dba', 'push_target_pkey', '', 'dba.push_target push_target_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''dba'' and indexname = ''push_target_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'dba', 'push_target_pkey', '', 'dba.push_target push_target_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''dba'' and indexname = ''push_target_pkey'';', 'CREATE UNIQUE INDEX push_target_pkey ON dba.push_target USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:push_target_unique_path_key.tests.sql------------------------------------------------------------------------------------- Checks for dba.push_target push_target_unique_path_key index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'dba', 'push_target_unique_path_key', '', 'dba.push_target push_target_unique_path_key existence check', 'select count(*) from pg_indexes where schemaname = ''dba'' and indexname = ''push_target_unique_path_key'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'dba', 'push_target_unique_path_key', '', 'dba.push_target push_target_unique_path_key definition check', 'select indexdef from pg_indexes where schemaname = ''dba'' and indexname = ''push_target_unique_path_key'';', 'CREATE UNIQUE INDEX push_target_unique_path_key ON dba.push_target USING btree (unique_path)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:q_audit_step_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.q_audit_step q_audit_step_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'q_audit_step_pkey', '', 'ascendco.q_audit_step q_audit_step_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''q_audit_step_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'q_audit_step_pkey', '', 'ascendco.q_audit_step q_audit_step_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''q_audit_step_pkey'';', 'CREATE UNIQUE INDEX q_audit_step_pkey ON ascendco.q_audit_step USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:q_event_audit_step_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.q_event_audit_step q_event_audit_step_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'q_event_audit_step_pkey', '', 'ascendco.q_event_audit_step q_event_audit_step_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''q_event_audit_step_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'q_event_audit_step_pkey', '', 'ascendco.q_event_audit_step q_event_audit_step_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''q_event_audit_step_pkey'';', 'CREATE UNIQUE INDEX q_event_audit_step_pkey ON ascendco.q_event_audit_step USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:q_event_person_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.q_event_person q_event_person_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'q_event_person_pkey', '', 'ascendco.q_event_person q_event_person_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''q_event_person_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'q_event_person_pkey', '', 'ascendco.q_event_person q_event_person_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''q_event_person_pkey'';', 'CREATE UNIQUE INDEX q_event_person_pkey ON ascendco.q_event_person USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:q_event_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.q_event q_event_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'q_event_pkey', '', 'ascendco.q_event q_event_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''q_event_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'q_event_pkey', '', 'ascendco.q_event q_event_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''q_event_pkey'';', 'CREATE UNIQUE INDEX q_event_pkey ON ascendco.q_event USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:q_level_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.q_level q_level_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'q_level_pkey', '', 'ascendco.q_level q_level_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''q_level_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'q_level_pkey', '', 'ascendco.q_level q_level_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''q_level_pkey'';', 'CREATE UNIQUE INDEX q_level_pkey ON ascendco.q_level USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:q_subtype_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.q_subtype q_subtype_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'q_subtype_pkey', '', 'ascendco.q_subtype q_subtype_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''q_subtype_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'q_subtype_pkey', '', 'ascendco.q_subtype q_subtype_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''q_subtype_pkey'';', 'CREATE UNIQUE INDEX q_subtype_pkey ON ascendco.q_subtype USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:q_type_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.q_type q_type_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'q_type_pkey', '', 'ascendco.q_type q_type_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''q_type_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'q_type_pkey', '', 'ascendco.q_type q_type_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''q_type_pkey'';', 'CREATE UNIQUE INDEX q_type_pkey ON ascendco.q_type USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:rcl_check_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.rcl_check rcl_check_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'rcl_check_pkey', '', 'ascendco.rcl_check rcl_check_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''rcl_check_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'rcl_check_pkey', '', 'ascendco.rcl_check rcl_check_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''rcl_check_pkey'';', 'CREATE UNIQUE INDEX rcl_check_pkey ON ascendco.rcl_check USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:rcl_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.rcl_id rcl_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'rcl_id_pkey', '', 'ascendco.rcl_id rcl_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''rcl_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'rcl_id_pkey', '', 'ascendco.rcl_id rcl_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''rcl_id_pkey'';', 'CREATE UNIQUE INDEX rcl_id_pkey ON ascendco.rcl_id USING btree (id, source)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:record_changes_log_detail_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.record_changes_log_detail record_changes_log_detail_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'record_changes_log_detail_pkey', '', 'ascendco.record_changes_log_detail record_changes_log_detail_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''record_changes_log_detail_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'record_changes_log_detail_pkey', '', 'ascendco.record_changes_log_detail record_changes_log_detail_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''record_changes_log_detail_pkey'';', 'CREATE UNIQUE INDEX record_changes_log_detail_pkey ON ascendco.record_changes_log_detail USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:record_changes_log_id_ix_fkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.record_changes_log_detail record_changes_log_id_ix_fkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'record_changes_log_id_ix_fkey', '', 'ascendco.record_changes_log_detail record_changes_log_id_ix_fkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''record_changes_log_id_ix_fkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'record_changes_log_id_ix_fkey', '', 'ascendco.record_changes_log_detail record_changes_log_id_ix_fkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''record_changes_log_id_ix_fkey'';', 'CREATE INDEX record_changes_log_id_ix_fkey ON ascendco.record_changes_log_detail USING btree (record_changes_log_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:record_changes_log_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.record_changes_log record_changes_log_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'record_changes_log_pkey', '', 'ascendco.record_changes_log record_changes_log_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''record_changes_log_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'record_changes_log_pkey', '', 'ascendco.record_changes_log record_changes_log_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''record_changes_log_pkey'';', 'CREATE UNIQUE INDEX record_changes_log_pkey ON ascendco.record_changes_log USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:record_changes_log_record_id_ix_btree.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.record_changes_log record_changes_log_record_id_ix_btree index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'record_changes_log_record_id_ix_btree', '', 'ascendco.record_changes_log record_changes_log_record_id_ix_btree existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''record_changes_log_record_id_ix_btree'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'record_changes_log_record_id_ix_btree', '', 'ascendco.record_changes_log record_changes_log_record_id_ix_btree definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''record_changes_log_record_id_ix_btree'';', 'CREATE INDEX record_changes_log_record_id_ix_btree ON ascendco.record_changes_log USING btree (record_id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:rep_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.rep rep_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'rep_pkey', '', 'ascendco.rep rep_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''rep_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'rep_pkey', '', 'ascendco.rep rep_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''rep_pkey'';', 'CREATE UNIQUE INDEX rep_pkey ON ascendco.rep USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:row_compare_fail.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.row_compare row_compare_fail index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'row_compare_fail', '', 'ascendco.row_compare row_compare_fail existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''row_compare_fail'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'row_compare_fail', '', 'ascendco.row_compare row_compare_fail definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''row_compare_fail'';', 'CREATE INDEX row_compare_fail ON ascendco.row_compare USING btree (((hashes_match = false)))', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:row_compare_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.row_compare row_compare_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'row_compare_pkey', '', 'ascendco.row_compare row_compare_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''row_compare_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'row_compare_pkey', '', 'ascendco.row_compare row_compare_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''row_compare_pkey'';', 'CREATE UNIQUE INDEX row_compare_pkey ON ascendco.row_compare USING btree (id, table_name)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:specialty_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.specialty specialty_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'specialty_id_pkey', '', 'ascendco.specialty specialty_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''specialty_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'specialty_id_pkey', '', 'ascendco.specialty specialty_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''specialty_id_pkey'';', 'CREATE UNIQUE INDEX specialty_id_pkey ON ascendco.specialty USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:stat_facility_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.stat_facility stat_facility_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'stat_facility_pkey', '', 'ascendco.stat_facility stat_facility_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''stat_facility_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'stat_facility_pkey', '', 'ascendco.stat_facility stat_facility_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''stat_facility_pkey'';', 'CREATE UNIQUE INDEX stat_facility_pkey ON ascendco.stat_facility USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:sterilize_method_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.sterilize_method sterilize_method_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'sterilize_method_id_pkey', '', 'ascendco.sterilize_method sterilize_method_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''sterilize_method_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'sterilize_method_id_pkey', '', 'ascendco.sterilize_method sterilize_method_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''sterilize_method_id_pkey'';', 'CREATE UNIQUE INDEX sterilize_method_id_pkey ON ascendco.sterilize_method USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:sterilize_params_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.sterilize_params sterilize_params_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'sterilize_params_id_pkey', '', 'ascendco.sterilize_params sterilize_params_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''sterilize_params_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'sterilize_params_id_pkey', '', 'ascendco.sterilize_params sterilize_params_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''sterilize_params_id_pkey'';', 'CREATE UNIQUE INDEX sterilize_params_id_pkey ON ascendco.sterilize_params USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:sterilizer_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.sterilizer sterilizer_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'sterilizer_id_pkey', '', 'ascendco.sterilizer sterilizer_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''sterilizer_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'sterilizer_id_pkey', '', 'ascendco.sterilizer sterilizer_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''sterilizer_id_pkey'';', 'CREATE UNIQUE INDEX sterilizer_id_pkey ON ascendco.sterilizer USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:sterilizer_load_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.sterilizer_load sterilizer_load_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'sterilizer_load_id_pkey', '', 'ascendco.sterilizer_load sterilizer_load_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''sterilizer_load_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'sterilizer_load_id_pkey', '', 'ascendco.sterilizer_load sterilizer_load_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''sterilizer_load_id_pkey'';', 'CREATE UNIQUE INDEX sterilizer_load_id_pkey ON ascendco.sterilizer_load USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:sterilizer_log_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.sterilizer_log sterilizer_log_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'sterilizer_log_id_pkey', '', 'ascendco.sterilizer_log sterilizer_log_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''sterilizer_log_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'sterilizer_log_id_pkey', '', 'ascendco.sterilizer_log sterilizer_log_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''sterilizer_log_id_pkey'';', 'CREATE UNIQUE INDEX sterilizer_log_id_pkey ON ascendco.sterilizer_log USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:sup_parent_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.sup_parent sup_parent_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'sup_parent_pkey', '', 'ascendco.sup_parent sup_parent_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''sup_parent_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'sup_parent_pkey', '', 'ascendco.sup_parent sup_parent_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''sup_parent_pkey'';', 'CREATE UNIQUE INDEX sup_parent_pkey ON ascendco.sup_parent USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:sup_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.sup sup_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'sup_pkey', '', 'ascendco.sup sup_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''sup_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'sup_pkey', '', 'ascendco.sup sup_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''sup_pkey'';', 'CREATE UNIQUE INDEX sup_pkey ON ascendco.sup USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:target_count_pk.tests.sql------------------------------------------------------------------------------------- Checks for dba.target_count target_count_pk index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'dba', 'target_count_pk', '', 'dba.target_count target_count_pk existence check', 'select count(*) from pg_indexes where schemaname = ''dba'' and indexname = ''target_count_pk'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'dba', 'target_count_pk', '', 'dba.target_count target_count_pk definition check', 'select indexdef from pg_indexes where schemaname = ''dba'' and indexname = ''target_count_pk'';', 'CREATE UNIQUE INDEX target_count_pk ON dba.target_count USING btree (hsys_id, qualified_name, count_date)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:test_case_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for dba.test_case test_case_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'dba', 'test_case_id_pkey', '', 'dba.test_case test_case_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''dba'' and indexname = ''test_case_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'dba', 'test_case_id_pkey', '', 'dba.test_case test_case_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''dba'' and indexname = ''test_case_id_pkey'';', 'CREATE UNIQUE INDEX test_case_id_pkey ON dba.test_case USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:test_case_unique_signature.tests.sql------------------------------------------------------------------------------------- Checks for dba.test_case test_case_unique_signature index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'dba', 'test_case_unique_signature', '', 'dba.test_case test_case_unique_signature existence check', 'select count(*) from pg_indexes where schemaname = ''dba'' and indexname = ''test_case_unique_signature'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'dba', 'test_case_unique_signature', '', 'dba.test_case test_case_unique_signature definition check', 'select indexdef from pg_indexes where schemaname = ''dba'' and indexname = ''test_case_unique_signature'';', 'CREATE UNIQUE INDEX test_case_unique_signature ON dba.test_case USING btree (object_class, object_schema, object_name, function_signature, test_name)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:test_result_case_and_user_unique.tests.sql------------------------------------------------------------------------------------- Checks for dba.test_result test_result_case_and_user_unique index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'dba', 'test_result_case_and_user_unique', '', 'dba.test_result test_result_case_and_user_unique existence check', 'select count(*) from pg_indexes where schemaname = ''dba'' and indexname = ''test_result_case_and_user_unique'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'dba', 'test_result_case_and_user_unique', '', 'dba.test_result test_result_case_and_user_unique definition check', 'select indexdef from pg_indexes where schemaname = ''dba'' and indexname = ''test_result_case_and_user_unique'';', 'CREATE UNIQUE INDEX test_result_case_and_user_unique ON dba.test_result USING btree (test_case_id, user_name)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:test_result_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for dba.test_result test_result_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'dba', 'test_result_id_pkey', '', 'dba.test_result test_result_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''dba'' and indexname = ''test_result_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'dba', 'test_result_id_pkey', '', 'dba.test_result test_result_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''dba'' and indexname = ''test_result_id_pkey'';', 'CREATE UNIQUE INDEX test_result_id_pkey ON dba.test_result USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:text_collection_item_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.text_collection_item text_collection_item_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'text_collection_item_pkey', '', 'ascendco.text_collection_item text_collection_item_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''text_collection_item_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'text_collection_item_pkey', '', 'ascendco.text_collection_item text_collection_item_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''text_collection_item_pkey'';', 'CREATE UNIQUE INDEX text_collection_item_pkey ON ascendco.text_collection_item USING btree (collection_id, text)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:text_collection_item_text_ix_tgrm_gist.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.text_collection_item text_collection_item_text_ix_tgrm_gist index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'text_collection_item_text_ix_tgrm_gist', '', 'ascendco.text_collection_item text_collection_item_text_ix_tgrm_gist existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''text_collection_item_text_ix_tgrm_gist'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'text_collection_item_text_ix_tgrm_gist', '', 'ascendco.text_collection_item text_collection_item_text_ix_tgrm_gist definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''text_collection_item_text_ix_tgrm_gist'';', 'CREATE INDEX text_collection_item_text_ix_tgrm_gist ON ascendco.text_collection_item USING gist (text gist_trgm_ops (siglen=''64''))', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:text_collection_name_idx.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.text_collection text_collection_name_idx index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'text_collection_name_idx', '', 'ascendco.text_collection text_collection_name_idx existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''text_collection_name_idx'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'text_collection_name_idx', '', 'ascendco.text_collection text_collection_name_idx definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''text_collection_name_idx'';', 'CREATE UNIQUE INDEX text_collection_name_idx ON ascendco.text_collection USING btree (collection_name) WHERE (collection_name <> ''''::citext)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:text_collection_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.text_collection text_collection_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'text_collection_pkey', '', 'ascendco.text_collection text_collection_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''text_collection_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'text_collection_pkey', '', 'ascendco.text_collection text_collection_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''text_collection_pkey'';', 'CREATE UNIQUE INDEX text_collection_pkey ON ascendco.text_collection USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:view_catalog_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for dba.view_catalog view_catalog_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'dba', 'view_catalog_id_pkey', '', 'dba.view_catalog view_catalog_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''dba'' and indexname = ''view_catalog_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'dba', 'view_catalog_id_pkey', '', 'dba.view_catalog view_catalog_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''dba'' and indexname = ''view_catalog_id_pkey'';', 'CREATE UNIQUE INDEX view_catalog_id_pkey ON dba.view_catalog USING btree (schema_name, view_name)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:indexes:web_user_id_pkey.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.web_user web_user_id_pkey index------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Index', 'ascendco', 'web_user_id_pkey', '', 'ascendco.web_user web_user_id_pkey existence check', 'select count(*) from pg_indexes where schemaname = ''ascendco'' and indexname = ''web_user_id_pkey'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Index', 'ascendco', 'web_user_id_pkey', '', 'ascendco.web_user web_user_id_pkey definition check', 'select indexdef from pg_indexes where schemaname = ''ascendco'' and indexname = ''web_user_id_pkey'';', 'CREATE UNIQUE INDEX web_user_id_pkey ON ascendco.web_user USING btree (id)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:procedures:cleanup_fuzzy_text.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.cleanup_fuzzy_text () procedure------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Procedure', 'ascendco', 'cleanup_fuzzy_text ()', '', 'ascendco.cleanup_fuzzy_text  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''cleanup_fuzzy_text''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Procedure', 'ascendco', 'cleanup_fuzzy_text ()', '', 'ascendco.cleanup_fuzzy_text  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''cleanup_fuzzy_text''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE PROCEDURE ascendco.cleanup_fuzzy_text() LANGUAGE sqlAS $procedure$DELETE FROM ascendco.text_collection      WHERE added_dts < NOW() - INTERVAL ''1 day''        AND retain = false;ANALYZE ascendco.text_collection;$procedure$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:procedures:count_targets.tests.sql------------------------------------------------------------------------------------- Checks for dba.count_targets () procedure------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Procedure', 'dba', 'count_targets ()', '', 'dba.count_targets  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''count_targets''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Procedure', 'dba', 'count_targets ()', '', 'dba.count_targets  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''count_targets''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE PROCEDURE dba.count_targets() LANGUAGE sqlAS $procedure$/*Capture daily row counts for targets of interest by hsys and target into dba.target_count:ascendco.analytic_productivityascendco.analytic_scanascendco.analytic_sterilizer_loadinvascendco.analytic_sterilizer_loadNote: This is a stored PROCEDURE, not a FUNCTION. CALL count_targets(), not SELECT count_targets().*/WITHraw_counts AS (---------------------------------------------------- ascendco.analytic_productivity--------------------------------------------------   select hsys_id,          count(*)                             as records_count,          ''ascendco''                           as schema_name,          ''analytic_productivity''              as target_name      from ascendco.analytic_productivity  group by 1 union all---------------------------------------------------- ascendco.analytic_scan--------------------------------------------------    select hsys_id,           count(*)                            as records_count,          ''ascendco''                           as schema_name,          ''analytic_scan''                      as target_name      from ascendco.analytic_scan  group by 1 union all---------------------------------------------------- ascendco.ascendco.analytic_sterilizer_loadinv--------------------------------------------------    select hsys_id,           count(*)                            as records_count,          ''ascendco''                           as schema_name,          ''analytic_sterilizer_loadinv''        as target_name      from ascendco.analytic_sterilizer_loadinv  group by 1 union all---------------------------------------------------- ascendco.ascendco.analytic_sterilizer_load---------------------------------------------------- ascendco.analytic_sterilizer_load doesn''t have hsys_id. D''oh!-- Look it up through facility_id, which is present.    select facility.hsys_id,           count(*)                            as records_count,           ''ascendco''                          as schema_name,           ''analytic_sterilizer_load''          as target_name       from ascendco.analytic_sterilizer_load left join facility on facility.id = analytic_sterilizer_load.facility_id  group by 1),---------------------------------------------------- Clear out bogus results--------------------------------------------------cleaned_counts AS (    select *     from raw_counts    where hsys_id IS NOT NULL      and hsys_id <> ''00000000-0000-0000-0000-000000000000'')---------------------------------------------------- Put it all together-------------------------------------------------- INSERT INTO dba.target_count (               hsys_id,               qualified_name,               records_count,               count_date,               count_dts)        SELECT hsys_id,               concat (schema_name, ''.'', target_name),               records_count,               current_date,               now()         FROM cleaned_counts  ON CONFLICT ON CONSTRAINT target_count_pk  DO UPDATE SET               records_count = EXCLUDED.records_count,               count_date    = EXCLUDED.count_date,               count_dts     = EXCLUDED.count_dts;$procedure$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:procedures:procedure_list.test.sqlselect * from test_case_setup('Procedure', 'Global', 'procedure_list', '', 'Procedure list comparison', 'select string_agg(oid::regprocedure::text, '','' order by oid::regprocedure::text) as procedure_list  from pg_proc where prokind = ''p''   and pronamespace::regnamespace::text NOT IN (''information_schema'',''pg_catalog'',''extensions'');', 'cleanup_fuzzy_text(),count_targets(),system_delete_marked_and_log_sp(),view_register(citext,citext,citext,citext)', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:procedures:system_delete_marked_and_log_sp.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.system_delete_marked_and_log_sp () procedure------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Procedure', 'ascendco', 'system_delete_marked_and_log_sp ()', '', 'ascendco.system_delete_marked_and_log_sp  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''system_delete_marked_and_log_sp''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Procedure', 'ascendco', 'system_delete_marked_and_log_sp ()', '', 'ascendco.system_delete_marked_and_log_sp  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''system_delete_marked_and_log_sp''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE PROCEDURE ascendco.system_delete_marked_and_log_sp() LANGUAGE plpgsqlAS $procedure$BEGIN-- Execute configured auto-deletes and save results in a CTE.with deletion_results as (    SELECT *      FROM system_delete_marked()    )-- Take the results from the CTE where something actually got deleted and push them into deletion_log.INSERT INTO deletion_log (                  schema_name,                  table_name,                  operation_name,                  deleted_count)         SELECT  schema,                 table_name,                 ''DELETE'',                 count            FROM deletion_results           WHERE count > 0;-- ANALYZE modified tables.-- Note: We''re in a stored procedure, there is no result returned. Use PERFORM on this function instead of SELECT.PERFORM system_analyze_after_deletions();END;$procedure$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:procedures:view_register.tests.sql------------------------------------------------------------------------------------- Checks for dba.view_register (schema_name_in citext, view_name_in citext, description_in citext, domo_dataset_in citext) procedure------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Procedure', 'dba', 'view_register (schema_name_in citext, view_name_in citext, description_in citext, domo_dataset_in citext)', '', 'dba.view_register schema_name_in citext, view_name_in citext, description_in citext, domo_dataset_in citext existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''view_register''   and pg_get_function_identity_arguments(oid) = ''schema_name_in citext, view_name_in citext, description_in citext, domo_dataset_in citext'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Procedure', 'dba', 'view_register (schema_name_in citext, view_name_in citext, description_in citext, domo_dataset_in citext)', '', 'dba.view_register schema_name_in citext, view_name_in citext, description_in citext, domo_dataset_in citext definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''view_register''   and pg_get_function_identity_arguments(oid) = ''schema_name_in citext, view_name_in citext, description_in citext, domo_dataset_in citext'';', 'CREATE OR REPLACE PROCEDURE dba.view_register(schema_name_in citext, view_name_in citext, description_in citext, domo_dataset_in citext DEFAULT ''''::citext) LANGUAGE sqlAS $procedure$INSERT INTO dba.view_catalog (               schema_name,               view_name,               description,               domo_dataset)       VALUES (               schema_name_in,               view_name_in,               description_in,               domo_dataset_in)	ON CONFLICT ON CONSTRAINT view_catalog_id_pkey			DO UPDATE SET			   description   = description_in,			   domo_dataset  = domo_dataset_in$procedure$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_productivity_dependencies_facility_hsys.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_productivity analytic_productivity_dependencies_facility_hsys statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_productivity_dependencies_facility_hsys', '', 'dba.analytic_productivity analytic_productivity_dependencies_facility_hsys existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_productivity''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_productivity_dependencies_facility_hsys''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_productivity_dependencies_facility_hsys', '', 'dba.analytic_productivity analytic_productivity_dependencies_facility_hsys definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_productivity''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_productivity_dependencies_facility_hsys''', 'CREATE STATISTICS dba.analytic_productivity_dependencies_facility_hsys (dependencies) ON hsys_id, facility_id FROM analytic_productivity', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_productivity_dependencies_facility_location_facility.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_productivity analytic_productivity_dependencies_facility_location_facility statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_productivity_dependencies_facility_location_facility', '', 'dba.analytic_productivity analytic_productivity_dependencies_facility_location_facility existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_productivity''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_productivity_dependencies_facility_location_facility''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_productivity_dependencies_facility_location_facility', '', 'dba.analytic_productivity analytic_productivity_dependencies_facility_location_facility definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_productivity''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_productivity_dependencies_facility_location_facility''', 'CREATE STATISTICS dba.analytic_productivity_dependencies_facility_location_facility (dependencies) ON facility_id, facility_location_id FROM analytic_productivity', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_productivity_dependencies_facility_location_hsys.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_productivity analytic_productivity_dependencies_facility_location_hsys statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_productivity_dependencies_facility_location_hsys', '', 'dba.analytic_productivity analytic_productivity_dependencies_facility_location_hsys existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_productivity''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_productivity_dependencies_facility_location_hsys''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_productivity_dependencies_facility_location_hsys', '', 'dba.analytic_productivity analytic_productivity_dependencies_facility_location_hsys definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_productivity''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_productivity_dependencies_facility_location_hsys''', 'CREATE STATISTICS dba.analytic_productivity_dependencies_facility_location_hsys (dependencies) ON hsys_id, facility_location_id FROM analytic_productivity', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_productivity_dependencies_hsys_facility_facility_locat.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_productivity analytic_productivity_dependencies_hsys_facility_facility_locat statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_productivity_dependencies_hsys_facility_facility_locat', '', 'dba.analytic_productivity analytic_productivity_dependencies_hsys_facility_facility_locat existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_productivity''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_productivity_dependencies_hsys_facility_facility_locat''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_productivity_dependencies_hsys_facility_facility_locat', '', 'dba.analytic_productivity analytic_productivity_dependencies_hsys_facility_facility_locat definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_productivity''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_productivity_dependencies_hsys_facility_facility_locat''', 'CREATE STATISTICS dba.analytic_productivity_dependencies_hsys_facility_facility_locat (dependencies) ON hsys_id, facility_id, facility_location_id FROM analytic_productivity', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_productivity_dependencies_user_name_facility.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_productivity analytic_productivity_dependencies_user_name_facility statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_productivity_dependencies_user_name_facility', '', 'dba.analytic_productivity analytic_productivity_dependencies_user_name_facility existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_productivity''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_productivity_dependencies_user_name_facility''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_productivity_dependencies_user_name_facility', '', 'dba.analytic_productivity analytic_productivity_dependencies_user_name_facility definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_productivity''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_productivity_dependencies_user_name_facility''', 'CREATE STATISTICS dba.analytic_productivity_dependencies_user_name_facility (dependencies) ON facility_id, user_name FROM analytic_productivity', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_productivity_dependencies_user_name_hsys.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_productivity analytic_productivity_dependencies_user_name_hsys statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_productivity_dependencies_user_name_hsys', '', 'dba.analytic_productivity analytic_productivity_dependencies_user_name_hsys existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_productivity''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_productivity_dependencies_user_name_hsys''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_productivity_dependencies_user_name_hsys', '', 'dba.analytic_productivity analytic_productivity_dependencies_user_name_hsys definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_productivity''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_productivity_dependencies_user_name_hsys''', 'CREATE STATISTICS dba.analytic_productivity_dependencies_user_name_hsys (dependencies) ON hsys_id, user_name FROM analytic_productivity', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_scan_dependencies_associated_to_facilty.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_scan analytic_scan_dependencies_associated_to_facilty statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_scan_dependencies_associated_to_facilty', '', 'dba.analytic_scan analytic_scan_dependencies_associated_to_facilty existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_scan''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_scan_dependencies_associated_to_facilty''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_scan_dependencies_associated_to_facilty', '', 'dba.analytic_scan analytic_scan_dependencies_associated_to_facilty definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_scan''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_scan_dependencies_associated_to_facilty''', 'CREATE STATISTICS dba.analytic_scan_dependencies_associated_to_facilty (dependencies) ON facility_id, associated_to FROM analytic_scan', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_scan_dependencies_associated_to_hsys.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_scan analytic_scan_dependencies_associated_to_hsys statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_scan_dependencies_associated_to_hsys', '', 'dba.analytic_scan analytic_scan_dependencies_associated_to_hsys existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_scan''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_scan_dependencies_associated_to_hsys''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_scan_dependencies_associated_to_hsys', '', 'dba.analytic_scan analytic_scan_dependencies_associated_to_hsys definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_scan''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_scan_dependencies_associated_to_hsys''', 'CREATE STATISTICS dba.analytic_scan_dependencies_associated_to_hsys (dependencies) ON hsys_id, associated_to FROM analytic_scan', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_scan_dependencies_facility_hsys.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_scan analytic_scan_dependencies_facility_hsys statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_scan_dependencies_facility_hsys', '', 'dba.analytic_scan analytic_scan_dependencies_facility_hsys existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_scan''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_scan_dependencies_facility_hsys''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_scan_dependencies_facility_hsys', '', 'dba.analytic_scan analytic_scan_dependencies_facility_hsys definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_scan''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_scan_dependencies_facility_hsys''', 'CREATE STATISTICS dba.analytic_scan_dependencies_facility_hsys (dependencies) ON hsys_id, facility_id FROM analytic_scan', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_scan_dependencies_facility_location_facility.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_scan analytic_scan_dependencies_facility_location_facility statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_scan_dependencies_facility_location_facility', '', 'dba.analytic_scan analytic_scan_dependencies_facility_location_facility existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_scan''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_scan_dependencies_facility_location_facility''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_scan_dependencies_facility_location_facility', '', 'dba.analytic_scan analytic_scan_dependencies_facility_location_facility definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_scan''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_scan_dependencies_facility_location_facility''', 'CREATE STATISTICS dba.analytic_scan_dependencies_facility_location_facility (dependencies) ON facility_id, facility_location_id FROM analytic_scan', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_scan_dependencies_facility_location_hsys.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_scan analytic_scan_dependencies_facility_location_hsys statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_scan_dependencies_facility_location_hsys', '', 'dba.analytic_scan analytic_scan_dependencies_facility_location_hsys existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_scan''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_scan_dependencies_facility_location_hsys''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_scan_dependencies_facility_location_hsys', '', 'dba.analytic_scan analytic_scan_dependencies_facility_location_hsys definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_scan''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_scan_dependencies_facility_location_hsys''', 'CREATE STATISTICS dba.analytic_scan_dependencies_facility_location_hsys (dependencies) ON hsys_id, facility_location_id FROM analytic_scan', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_scan_dependencies_hsys_facility_facility_location.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_scan analytic_scan_dependencies_hsys_facility_facility_location statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_scan_dependencies_hsys_facility_facility_location', '', 'dba.analytic_scan analytic_scan_dependencies_hsys_facility_facility_location existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_scan''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_scan_dependencies_hsys_facility_facility_location''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_scan_dependencies_hsys_facility_facility_location', '', 'dba.analytic_scan analytic_scan_dependencies_hsys_facility_facility_location definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_scan''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_scan_dependencies_hsys_facility_facility_location''', 'CREATE STATISTICS dba.analytic_scan_dependencies_hsys_facility_facility_location (dependencies) ON hsys_id, facility_id, facility_location_id FROM analytic_scan', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_scan_dependencies_user_name_facility.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_scan analytic_scan_dependencies_user_name_facility statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_scan_dependencies_user_name_facility', '', 'dba.analytic_scan analytic_scan_dependencies_user_name_facility existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_scan''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_scan_dependencies_user_name_facility''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_scan_dependencies_user_name_facility', '', 'dba.analytic_scan analytic_scan_dependencies_user_name_facility definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_scan''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_scan_dependencies_user_name_facility''', 'CREATE STATISTICS dba.analytic_scan_dependencies_user_name_facility (dependencies) ON facility_id, user_name FROM analytic_scan', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_scan_dependencies_user_name_hsys.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_scan analytic_scan_dependencies_user_name_hsys statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_scan_dependencies_user_name_hsys', '', 'dba.analytic_scan analytic_scan_dependencies_user_name_hsys existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_scan''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_scan_dependencies_user_name_hsys''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_scan_dependencies_user_name_hsys', '', 'dba.analytic_scan analytic_scan_dependencies_user_name_hsys definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_scan''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_scan_dependencies_user_name_hsys''', 'CREATE STATISTICS dba.analytic_scan_dependencies_user_name_hsys (dependencies) ON hsys_id, user_name FROM analytic_scan', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_scan_ndistinct_facility_hsys.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_scan analytic_scan_ndistinct_facility_hsys statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_scan_ndistinct_facility_hsys', '', 'dba.analytic_scan analytic_scan_ndistinct_facility_hsys existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_scan''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_scan_ndistinct_facility_hsys''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_scan_ndistinct_facility_hsys', '', 'dba.analytic_scan analytic_scan_ndistinct_facility_hsys definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_scan''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_scan_ndistinct_facility_hsys''', 'CREATE STATISTICS dba.analytic_scan_ndistinct_facility_hsys (ndistinct) ON hsys_id, facility_id FROM analytic_scan', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_scan_ndistinct_hsys.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_scan analytic_scan_ndistinct_hsys statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_scan_ndistinct_hsys', '', 'dba.analytic_scan analytic_scan_ndistinct_hsys existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_scan''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_scan_ndistinct_hsys''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_scan_ndistinct_hsys', '', 'dba.analytic_scan analytic_scan_ndistinct_hsys definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_scan''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_scan_ndistinct_hsys''', 'CREATE STATISTICS dba.analytic_scan_ndistinct_hsys (ndistinct) ON hsys_id, facility_id FROM analytic_scan', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_sterilizer_load_dependencies_sterilize_params_facility.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_sterilizer_load analytic_sterilizer_load_dependencies_sterilize_params_facility statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_sterilizer_load_dependencies_sterilize_params_facility', '', 'dba.analytic_sterilizer_load analytic_sterilizer_load_dependencies_sterilize_params_facility existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_sterilizer_load''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_sterilizer_load_dependencies_sterilize_params_facility''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_sterilizer_load_dependencies_sterilize_params_facility', '', 'dba.analytic_sterilizer_load analytic_sterilizer_load_dependencies_sterilize_params_facility definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_sterilizer_load''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_sterilizer_load_dependencies_sterilize_params_facility''', 'CREATE STATISTICS dba.analytic_sterilizer_load_dependencies_sterilize_params_facility (dependencies) ON sterilize_params_id, facility_id FROM analytic_sterilizer_load', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_sterilizer_load_dependencies_sterilizer_facility.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_sterilizer_load analytic_sterilizer_load_dependencies_sterilizer_facility statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_sterilizer_load_dependencies_sterilizer_facility', '', 'dba.analytic_sterilizer_load analytic_sterilizer_load_dependencies_sterilizer_facility existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_sterilizer_load''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_sterilizer_load_dependencies_sterilizer_facility''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_sterilizer_load_dependencies_sterilizer_facility', '', 'dba.analytic_sterilizer_load analytic_sterilizer_load_dependencies_sterilizer_facility definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_sterilizer_load''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_sterilizer_load_dependencies_sterilizer_facility''', 'CREATE STATISTICS dba.analytic_sterilizer_load_dependencies_sterilizer_facility (dependencies) ON sterilizer_id, facility_id FROM analytic_sterilizer_load', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_sterilizer_load_dependencies_web_user_facility.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_sterilizer_load analytic_sterilizer_load_dependencies_web_user_facility statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_sterilizer_load_dependencies_web_user_facility', '', 'dba.analytic_sterilizer_load analytic_sterilizer_load_dependencies_web_user_facility existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_sterilizer_load''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_sterilizer_load_dependencies_web_user_facility''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_sterilizer_load_dependencies_web_user_facility', '', 'dba.analytic_sterilizer_load analytic_sterilizer_load_dependencies_web_user_facility definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_sterilizer_load''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_sterilizer_load_dependencies_web_user_facility''', 'CREATE STATISTICS dba.analytic_sterilizer_load_dependencies_web_user_facility (dependencies) ON facility_id, web_user_id FROM analytic_sterilizer_load', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_sterilizer_loadinv_dependencies_facility_hsys.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_dependencies_facility_hsys statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_sterilizer_loadinv_dependencies_facility_hsys', '', 'dba.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_dependencies_facility_hsys existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_sterilizer_loadinv''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_sterilizer_loadinv_dependencies_facility_hsys''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_sterilizer_loadinv_dependencies_facility_hsys', '', 'dba.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_dependencies_facility_hsys definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_sterilizer_loadinv''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_sterilizer_loadinv_dependencies_facility_hsys''', 'CREATE STATISTICS dba.analytic_sterilizer_loadinv_dependencies_facility_hsys (dependencies) ON facility_id, hsys_id FROM analytic_sterilizer_loadinv', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_sterilizer_loadinv_dependencies_sterilize_params_hsys.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_dependencies_sterilize_params_hsys statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_sterilizer_loadinv_dependencies_sterilize_params_hsys', '', 'dba.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_dependencies_sterilize_params_hsys existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_sterilizer_loadinv''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_sterilizer_loadinv_dependencies_sterilize_params_hsys''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_sterilizer_loadinv_dependencies_sterilize_params_hsys', '', 'dba.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_dependencies_sterilize_params_hsys definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_sterilizer_loadinv''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_sterilizer_loadinv_dependencies_sterilize_params_hsys''', 'CREATE STATISTICS dba.analytic_sterilizer_loadinv_dependencies_sterilize_params_hsys (dependencies) ON hsys_id, sterilize_params_id FROM analytic_sterilizer_loadinv', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_sterilizer_loadinv_dependencies_sterilizer_facility.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_dependencies_sterilizer_facility statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_sterilizer_loadinv_dependencies_sterilizer_facility', '', 'dba.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_dependencies_sterilizer_facility existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_sterilizer_loadinv''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_sterilizer_loadinv_dependencies_sterilizer_facility''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_sterilizer_loadinv_dependencies_sterilizer_facility', '', 'dba.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_dependencies_sterilizer_facility definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_sterilizer_loadinv''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_sterilizer_loadinv_dependencies_sterilizer_facility''', 'CREATE STATISTICS dba.analytic_sterilizer_loadinv_dependencies_sterilizer_facility (dependencies) ON facility_id, sterilizer_id FROM analytic_sterilizer_loadinv', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_sterilizer_loadinv_dependencies_sterilizer_hsys.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_dependencies_sterilizer_hsys statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_sterilizer_loadinv_dependencies_sterilizer_hsys', '', 'dba.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_dependencies_sterilizer_hsys existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_sterilizer_loadinv''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_sterilizer_loadinv_dependencies_sterilizer_hsys''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_sterilizer_loadinv_dependencies_sterilizer_hsys', '', 'dba.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_dependencies_sterilizer_hsys definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_sterilizer_loadinv''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_sterilizer_loadinv_dependencies_sterilizer_hsys''', 'CREATE STATISTICS dba.analytic_sterilizer_loadinv_dependencies_sterilizer_hsys (dependencies) ON hsys_id, sterilizer_id FROM analytic_sterilizer_loadinv', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_sterilizer_loadinv_dependencies_web_user_facility.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_dependencies_web_user_facility statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_sterilizer_loadinv_dependencies_web_user_facility', '', 'dba.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_dependencies_web_user_facility existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_sterilizer_loadinv''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_sterilizer_loadinv_dependencies_web_user_facility''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_sterilizer_loadinv_dependencies_web_user_facility', '', 'dba.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_dependencies_web_user_facility definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_sterilizer_loadinv''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_sterilizer_loadinv_dependencies_web_user_facility''', 'CREATE STATISTICS dba.analytic_sterilizer_loadinv_dependencies_web_user_facility (dependencies) ON facility_id, web_user_id FROM analytic_sterilizer_loadinv', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_sterilizer_loadinv_dependencies_web_user_hsys.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_dependencies_web_user_hsys statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_sterilizer_loadinv_dependencies_web_user_hsys', '', 'dba.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_dependencies_web_user_hsys existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_sterilizer_loadinv''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_sterilizer_loadinv_dependencies_web_user_hsys''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_sterilizer_loadinv_dependencies_web_user_hsys', '', 'dba.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_dependencies_web_user_hsys definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_sterilizer_loadinv''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_sterilizer_loadinv_dependencies_web_user_hsys''', 'CREATE STATISTICS dba.analytic_sterilizer_loadinv_dependencies_web_user_hsys (dependencies) ON hsys_id, web_user_id FROM analytic_sterilizer_loadinv', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_sterilizer_loadinv_ndistinct_item_speciality.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_ndistinct_item_speciality statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_sterilizer_loadinv_ndistinct_item_speciality', '', 'dba.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_ndistinct_item_speciality existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_sterilizer_loadinv''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_sterilizer_loadinv_ndistinct_item_speciality''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_sterilizer_loadinv_ndistinct_item_speciality', '', 'dba.analytic_sterilizer_loadinv analytic_sterilizer_loadinv_ndistinct_item_speciality definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_sterilizer_loadinv''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_sterilizer_loadinv_ndistinct_item_speciality''', 'CREATE STATISTICS dba.analytic_sterilizer_loadinv_ndistinct_item_speciality (ndistinct) ON item_id, speciality_id FROM analytic_sterilizer_loadinv', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_work_dependencies_facility_hsys.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_work analytic_work_dependencies_facility_hsys statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_work_dependencies_facility_hsys', '', 'dba.analytic_work analytic_work_dependencies_facility_hsys existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_work''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_work_dependencies_facility_hsys''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_work_dependencies_facility_hsys', '', 'dba.analytic_work analytic_work_dependencies_facility_hsys definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_work''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_work_dependencies_facility_hsys''', 'CREATE STATISTICS dba.analytic_work_dependencies_facility_hsys (dependencies) ON hsys_id, facility_id FROM analytic_work', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_work_dependencies_facility_user.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_work analytic_work_dependencies_facility_user statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_work_dependencies_facility_user', '', 'dba.analytic_work analytic_work_dependencies_facility_user existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_work''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_work_dependencies_facility_user''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_work_dependencies_facility_user', '', 'dba.analytic_work analytic_work_dependencies_facility_user definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_work''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_work_dependencies_facility_user''', 'CREATE STATISTICS dba.analytic_work_dependencies_facility_user (dependencies) ON facility_id, user_id FROM analytic_work', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:analytic_work_dependencies_hsys_user.tests.sql------------------------------------------------------------------------------------- Checks for dba.analytic_work analytic_work_dependencies_hsys_user statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'analytic_work_dependencies_hsys_user', '', 'dba.analytic_work analytic_work_dependencies_hsys_user existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_work''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_work_dependencies_hsys_user''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'analytic_work_dependencies_hsys_user', '', 'dba.analytic_work analytic_work_dependencies_hsys_user definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''analytic_work''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''analytic_work_dependencies_hsys_user''', 'CREATE STATISTICS dba.analytic_work_dependencies_hsys_user (dependencies) ON hsys_id, user_id FROM analytic_work', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:domo_passthrough_dependencies_facility_hsys.tests.sql------------------------------------------------------------------------------------- Checks for dba.domo_passthrough domo_passthrough_dependencies_facility_hsys statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'domo_passthrough_dependencies_facility_hsys', '', 'dba.domo_passthrough domo_passthrough_dependencies_facility_hsys existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''domo_passthrough''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''domo_passthrough_dependencies_facility_hsys''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'domo_passthrough_dependencies_facility_hsys', '', 'dba.domo_passthrough domo_passthrough_dependencies_facility_hsys definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''domo_passthrough''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''domo_passthrough_dependencies_facility_hsys''', 'CREATE STATISTICS dba.domo_passthrough_dependencies_facility_hsys (dependencies) ON hsys_id, facility_id FROM domo_passthrough', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:stat_facility_dependencies_facility_hsys.tests.sql------------------------------------------------------------------------------------- Checks for dba.stat_facility stat_facility_dependencies_facility_hsys statistic------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Statistic', 'dba', 'stat_facility_dependencies_facility_hsys', '', 'dba.stat_facility stat_facility_dependencies_facility_hsys existence check', 'select count(*)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''stat_facility''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''stat_facility_dependencies_facility_hsys''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Statistic', 'dba', 'stat_facility_dependencies_facility_hsys', '', 'dba.stat_facility stat_facility_dependencies_facility_hsys definition check', 'select pg_get_statisticsobjdef(oid)  from pg_catalog.pg_statistic_ext  where stxrelid::regclass::text           = ''stat_facility''    and stxnamespace::regnamespace::text   = ''dba''   and stxname                            = ''stat_facility_dependencies_facility_hsys''', 'CREATE STATISTICS dba.stat_facility_dependencies_facility_hsys (dependencies) ON facility_id, hsys_id FROM stat_facility', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:statistics:statistics_list.test.sqlselect * from test_case_setup('Statistic', 'Global', 'statistics_list', '', 'Statistic list comparison', 'select string_agg(statistics_name, '','' order by statistics_name) as statistics_list from pg_stats_ext;', 'analytic_productivity_dependencies_facility_hsys,analytic_productivity_dependencies_facility_location_facility,analytic_productivity_dependencies_facility_location_hsys,analytic_productivity_dependencies_hsys_facility_facility_locat,analytic_productivity_dependencies_user_name_facility,analytic_productivity_dependencies_user_name_hsys,analytic_scan_dependencies_associated_to_facilty,analytic_scan_dependencies_associated_to_hsys,analytic_scan_dependencies_facility_hsys,analytic_scan_dependencies_facility_location_facility,analytic_scan_dependencies_facility_location_hsys,analytic_scan_dependencies_hsys_facility_facility_location,analytic_scan_dependencies_user_name_facility,analytic_scan_dependencies_user_name_hsys,analytic_scan_ndistinct_facility_hsys,analytic_scan_ndistinct_hsys,analytic_sterilizer_load_dependencies_sterilize_params_facility,analytic_sterilizer_load_dependencies_sterilizer_facility,analytic_sterilizer_load_dependencies_web_user_facility,analytic_sterilizer_loadinv_dependencies_facility_hsys,analytic_sterilizer_loadinv_dependencies_sterilize_params_hsys,analytic_sterilizer_loadinv_dependencies_sterilizer_facility,analytic_sterilizer_loadinv_dependencies_sterilizer_hsys,analytic_sterilizer_loadinv_dependencies_web_user_facility,analytic_sterilizer_loadinv_dependencies_web_user_hsys,analytic_sterilizer_loadinv_ndistinct_item_speciality,analytic_work_dependencies_facility_hsys,analytic_work_dependencies_facility_user,analytic_work_dependencies_hsys_user,domo_passthrough_dependencies_facility_hsys,stat_facility_dependencies_facility_hsys', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:api:hour_bin.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','api','hour_bin','','Table column strict check for api.hour_bin','select * from api.hour_bin limit 0;','id	bin_hour	bin_number	bin_label	bin_group','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','api','hour_bin','','Table column orderless check for api.hour_bin','select * from api.hour_bin limit 0;','bin_group	bin_hour	bin_label	bin_number	id','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:activity.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','activity','','Table column strict check for ascendco.activity','select * from ascendco.activity limit 0;','id	facility_id	facility_activities_id	web_user_id	last_updated_by_data_file_id	start_dts	done_dts	created_dts	updated_dts	duration_seconds	marked_for_deletion	other_desc	created_by	updated_by','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','activity','','Table column orderless check for ascendco.activity','select * from ascendco.activity limit 0;','created_by	created_dts	done_dts	duration_seconds	facility_activities_id	facility_id	id	last_updated_by_data_file_id	marked_for_deletion	other_desc	start_dts	updated_by	updated_dts	web_user_id','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:analytic_productivity.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','analytic_productivity','','Table column strict check for ascendco.analytic_productivity','select * from ascendco.analytic_productivity limit 0;','id	pg_con_id	data_file_id	marked_for_deletion	hsys_id	facility_id	facility_location_id	specialty_id	item_type_id	user_name	inv_name	item_name	tray_or_pack	num_inst	assembly_minutes	pause_minutes	points	points_per_hour	assembly_hour	pause_hour	start_utc	start_local	end_utc	end_local','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','analytic_productivity','','Table column orderless check for ascendco.analytic_productivity','select * from ascendco.analytic_productivity limit 0;','assembly_hour	assembly_minutes	data_file_id	end_local	end_utc	facility_id	facility_location_id	hsys_id	id	inv_name	item_name	item_type_id	marked_for_deletion	num_inst	pause_hour	pause_minutes	pg_con_id	points	points_per_hour	specialty_id	start_local	start_utc	tray_or_pack	user_name','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:analytic_scan.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','analytic_scan','','Table column strict check for ascendco.analytic_scan','select * from ascendco.analytic_scan limit 0;','id	pg_con_id	data_file_id	marked_for_deletion	hsys_id	facility_id	facility_location_id	specialty_id	scanned_type	associated_to	user_name	inv_name	num_inst	tray_or_pack	item_name	location_description	scan_time_utc_dts	scan_time_local_dts','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','analytic_scan','','Table column orderless check for ascendco.analytic_scan','select * from ascendco.analytic_scan limit 0;','associated_to	data_file_id	facility_id	facility_location_id	hsys_id	id	inv_name	item_name	location_description	marked_for_deletion	num_inst	pg_con_id	scan_time_local_dts	scan_time_utc_dts	scanned_type	specialty_id	tray_or_pack	user_name','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:analytic_sterilizer_load.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','analytic_sterilizer_load','','Table column strict check for ascendco.analytic_sterilizer_load','select * from ascendco.analytic_sterilizer_load limit 0;','id	marked_for_deletion	data_file_id	sterilize_method_id	sterilize_params_id	sterilizer_id	facility_id	web_user_id	status_building_dts	status_building_local_dts	status_done_dts	status_done_local_dts	status	is_iuss	instruments_count	packs_count	trays_count','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','analytic_sterilizer_load','','Table column orderless check for ascendco.analytic_sterilizer_load','select * from ascendco.analytic_sterilizer_load limit 0;','data_file_id	facility_id	id	instruments_count	is_iuss	marked_for_deletion	packs_count	status	status_building_dts	status_building_local_dts	status_done_dts	status_done_local_dts	sterilize_method_id	sterilize_params_id	sterilizer_id	trays_count	web_user_id','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:analytic_sterilizer_loadinv.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','analytic_sterilizer_loadinv','','Table column strict check for ascendco.analytic_sterilizer_loadinv','select * from ascendco.analytic_sterilizer_loadinv limit 0;','id	data_file_id	marked_for_deletion	facility_id	hsys_id	inv_id	item_id	item_type_id	speciality_id	sterilize_method_id	sterilize_params_id	sterilizer_id	sterilizerload_id	web_user_id	inv_name_provided	is_iuss	num_inst	qty	category	clinic_dept_name	processing_seconds	done_dts	done_local_dts	status','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','analytic_sterilizer_loadinv','','Table column orderless check for ascendco.analytic_sterilizer_loadinv','select * from ascendco.analytic_sterilizer_loadinv limit 0;','category	clinic_dept_name	data_file_id	done_dts	done_local_dts	facility_id	hsys_id	id	inv_id	inv_name_provided	is_iuss	item_id	item_type_id	marked_for_deletion	num_inst	processing_seconds	qty	speciality_id	status	sterilize_method_id	sterilize_params_id	sterilizer_id	sterilizerload_id	web_user_id','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:analytic_work.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','analytic_work','','Table column strict check for ascendco.analytic_work','select * from ascendco.analytic_work limit 0;','id	hsys_id	facility_id	inv_id	user_id	activity_id	assembly_id	q_event_id	scan_id	scase_id	scase_inv_id	sterilizer_load_id	sterilizer_loadinv_id	start_dts	end_dts	start_local_dts	end_local_dts	duration	missing_inst	num_inst	num_items	points	num_packs	num_trays	marked_for_deletion	activity	description	date_time	key_supplement','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','analytic_work','','Table column orderless check for ascendco.analytic_work','select * from ascendco.analytic_work limit 0;','activity	activity_id	assembly_id	date_time	description	duration	end_dts	end_local_dts	facility_id	hsys_id	id	inv_id	key_supplement	marked_for_deletion	missing_inst	num_inst	num_items	num_packs	num_trays	points	q_event_id	scan_id	scase_id	scase_inv_id	start_dts	start_local_dts	sterilizer_load_id	sterilizer_loadinv_id	user_id','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:assembly_prods.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','assembly_prods','','Table column strict check for ascendco.assembly_prods','select * from ascendco.assembly_prods limit 0;','id	data_file_id	assembly_id	item_prod_id	created_dts	updated_dts	updated_date	target	found_	repair	backup	actual	assembly_pos	prev_actual_for_audit	broken	marked_for_deletion	created_by	updated_by	prod_alert_text_ack	audit_events','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','assembly_prods','','Table column orderless check for ascendco.assembly_prods','select * from ascendco.assembly_prods limit 0;','actual	assembly_id	assembly_pos	audit_events	backup	broken	created_by	created_dts	data_file_id	found_	id	item_prod_id	marked_for_deletion	prev_actual_for_audit	prod_alert_text_ack	repair	target	updated_by	updated_date	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:assembly.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','assembly','','Table column strict check for ascendco.assembly','select * from ascendco.assembly limit 0;','id	data_file_id	created_by_user_id	done_by_user_id	facility_location_id	inv_id	last_updated_by_data_file_id	updated_by_user_id	marked_for_deletion	is_complete	is_quick_turn	con_id	created_by	difficulty	quantity	sequence_no	num_inst	points	done_dts	created_dts	updated_dts	missing_list	priority	production_ref	status	updated_by','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','assembly','','Table column orderless check for ascendco.assembly','select * from ascendco.assembly limit 0;','con_id	created_by	created_by_user_id	created_dts	data_file_id	difficulty	done_by_user_id	done_dts	facility_location_id	id	inv_id	is_complete	is_quick_turn	last_updated_by_data_file_id	marked_for_deletion	missing_list	num_inst	points	priority	production_ref	quantity	sequence_no	status	updated_by	updated_by_user_id	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:calendar_day.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','calendar_day','','Table column strict check for ascendco.calendar_day','select * from ascendco.calendar_day limit 0;','id	calendar_id	calendar_year_id	date_actual	epoch	day_suffix	day_name	day_name_abbreviated	day_of_week_usa	day_of_week_iso	day_of_month_actual	day_of_quarter_iso	day_of_year_actual	day_of_year_fiscal	week_of_month_actual	week_of_year_actual	week_of_year_fiscal_name	week_of_year_fiscal	week_of_year_iso	month_actual	month_actual_name	month_actual_name_abbreviated	month_fiscal	month_fiscal_name	month_fiscal_name_abbreviated	quarter_actual	quarter_actual_name	quarter_fiscal	quarter_fiscal_name	year_actual	first_date_of_week	last_date_of_week	first_date_of_month	last_date_of_month	first_date_of_quarter	last_date_of_quarter	first_date_of_year_actual	last_date_of_year_actual	first_date_of_year_fiscal	last_date_of_year_fiscal	mmyyyyy	mmddyyyy	ddmmyyyyy	weekend','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','calendar_day','','Table column orderless check for ascendco.calendar_day','select * from ascendco.calendar_day limit 0;','calendar_id	calendar_year_id	date_actual	day_name	day_name_abbreviated	day_of_month_actual	day_of_quarter_iso	day_of_week_iso	day_of_week_usa	day_of_year_actual	day_of_year_fiscal	day_suffix	ddmmyyyyy	epoch	first_date_of_month	first_date_of_quarter	first_date_of_week	first_date_of_year_actual	first_date_of_year_fiscal	id	last_date_of_month	last_date_of_quarter	last_date_of_week	last_date_of_year_actual	last_date_of_year_fiscal	mmddyyyy	mmyyyyy	month_actual	month_actual_name	month_actual_name_abbreviated	month_fiscal	month_fiscal_name	month_fiscal_name_abbreviated	quarter_actual	quarter_actual_name	quarter_fiscal	quarter_fiscal_name	week_of_month_actual	week_of_year_actual	week_of_year_fiscal	week_of_year_fiscal_name	week_of_year_iso	weekend	year_actual','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:calendar_year.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','calendar_year','','Table column strict check for ascendco.calendar_year','select * from ascendco.calendar_year limit 0;','id	calendar_id	fiscal_year_name	fiscal_year_abbr	first_date_in_year	last_date_in_year	days_in_year	weeks_in_year	first_day_of_week_usa	first_day_of_week_iso	first_day_of_week_name	week_start_offset','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','calendar_year','','Table column orderless check for ascendco.calendar_year','select * from ascendco.calendar_year limit 0;','calendar_id	days_in_year	first_date_in_year	first_day_of_week_iso	first_day_of_week_name	first_day_of_week_usa	fiscal_year_abbr	fiscal_year_name	id	last_date_in_year	week_start_offset	weeks_in_year','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:calendar.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','calendar','','Table column strict check for ascendco.calendar','select * from ascendco.calendar limit 0;','id	calendar_name	week_starts_on	description','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','calendar','','Table column orderless check for ascendco.calendar','select * from ascendco.calendar limit 0;','calendar_name	description	id	week_starts_on','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:clinic.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','clinic','','Table column strict check for ascendco.clinic','select * from ascendco.clinic limit 0;','id	hsys_id	created_dts	updated_dts	marked_for_deletion	receive_at_clinic	name_	created_by	updated_by','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','clinic','','Table column orderless check for ascendco.clinic','select * from ascendco.clinic limit 0;','created_by	created_dts	hsys_id	id	marked_for_deletion	name_	receive_at_clinic	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:data_file_info.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','data_file_info','','Table column strict check for ascendco.data_file_info','select * from ascendco.data_file_info limit 0;','id	last_updated_dts	server_name_	app_name	app_version	shell_version	sync_version	iam_type	compiled	merged	type_of_4d	version_of_4d	machine_name	platform_description	os_tz_name	iam	table_stats','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','data_file_info','','Table column orderless check for ascendco.data_file_info','select * from ascendco.data_file_info limit 0;','app_name	app_version	compiled	iam	iam_type	id	last_updated_dts	machine_name	merged	os_tz_name	platform_description	server_name_	shell_version	sync_version	table_stats	type_of_4d	version_of_4d','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:deletion_log.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','deletion_log','','Table column strict check for ascendco.deletion_log','select * from ascendco.deletion_log limit 0;','id	deletion_dts	client_address	user_name	schema_name	table_name	operation_name	deleted_count','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','deletion_log','','Table column orderless check for ascendco.deletion_log','select * from ascendco.deletion_log limit 0;','client_address	deleted_count	deletion_dts	id	operation_name	schema_name	table_name	user_name','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:domo_dataset.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','domo_dataset','','Table column strict check for ascendco.domo_dataset','select * from ascendco.domo_dataset limit 0;','id	dataset_name	rows_count	columns_count	created_at_dts	updated_at_dts	late_threshold_minutes','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','domo_dataset','','Table column orderless check for ascendco.domo_dataset','select * from ascendco.domo_dataset limit 0;','columns_count	created_at_dts	dataset_name	id	late_threshold_minutes	rows_count	updated_at_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:domo_passthrough.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','domo_passthrough','','Table column strict check for ascendco.domo_passthrough','select * from ascendco.domo_passthrough limit 0;','id	source_id	hsys_id	facility_id	view_version	dataset_name	key_supplement	data	from_dts	to_dts	created_dts','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','domo_passthrough','','Table column orderless check for ascendco.domo_passthrough','select * from ascendco.domo_passthrough limit 0;','created_dts	data	dataset_name	facility_id	from_dts	hsys_id	id	key_supplement	source_id	to_dts	view_version','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:error_code.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','error_code','','Table column strict check for ascendco.error_code','select * from ascendco.error_code limit 0;','errcode	description','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','error_code','','Table column orderless check for ascendco.error_code','select * from ascendco.error_code limit 0;','description	errcode','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:facility_activities.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','facility_activities','','Table column strict check for ascendco.facility_activities','select * from ascendco.facility_activities limit 0;','id	facility_id	last_updated_by_data_file_id	created_dts	updated_dts	marked_for_deletion	name_	created_by	updated_by','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','facility_activities','','Table column orderless check for ascendco.facility_activities','select * from ascendco.facility_activities limit 0;','created_by	created_dts	facility_id	id	last_updated_by_data_file_id	marked_for_deletion	name_	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:facility_department.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','facility_department','','Table column strict check for ascendco.facility_department','select * from ascendco.facility_department limit 0;','id	facility_id	their_id	created_dts	updated_dts	marked_for_deletion	is_available_in_sonar	receive_at_dept	is_from_emr	name_	created_by	updated_by	label_name	inv_audit','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','facility_department','','Table column orderless check for ascendco.facility_department','select * from ascendco.facility_department limit 0;','created_by	created_dts	facility_id	id	inv_audit	is_available_in_sonar	is_from_emr	label_name	marked_for_deletion	name_	receive_at_dept	their_id	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:facility_location.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','facility_location','','Table column strict check for ascendco.facility_location','select * from ascendco.facility_location limit 0;','id	marked_for_deletion	facility_id	type_	name_','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','facility_location','','Table column orderless check for ascendco.facility_location','select * from ascendco.facility_location limit 0;','facility_id	id	marked_for_deletion	name_	type_','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:facility.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','facility','','Table column strict check for ascendco.facility','select * from ascendco.facility limit 0;','id	hsys_id	calendar_id	production_label_form_id	permanent_label_form_id	missing_inst_label_form_id	facility_location_label_form_id	sterilizer_label_form_id	user_badge_label_form_id	workstation_label_form_id	default_spd_facility_id	created_dts	updated_dts	sonar_auto_logout_minutes	sonar_auto_logout_dialog_minutes	num_ors	sonar_go_live_date	marked_for_deletion	is_count_sheet_source_truth	hide_doc_names_for_stats	is_item_master_live	is_sonar_live	sterilizer_print_at_sterilizing	sterilizer_print_at_cooling	sterilizer_print_at_released	can_set_all_found_in_assembly	name_	their_id	created_by	updated_by	reporting_name	label_name	tz_name	tz_name_pg	sonar_name_full	sonar_count_sheet_form_name	sterilize_alert_level	sonar_scanner_stop_char	emr_location_name	sonar_features	interfaces	needs_scheduling	analytics_prefs','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','facility','','Table column orderless check for ascendco.facility','select * from ascendco.facility limit 0;','analytics_prefs	calendar_id	can_set_all_found_in_assembly	created_by	created_dts	default_spd_facility_id	emr_location_name	facility_location_label_form_id	hide_doc_names_for_stats	hsys_id	id	interfaces	is_count_sheet_source_truth	is_item_master_live	is_sonar_live	label_name	marked_for_deletion	missing_inst_label_form_id	name_	needs_scheduling	num_ors	permanent_label_form_id	production_label_form_id	reporting_name	sonar_auto_logout_dialog_minutes	sonar_auto_logout_minutes	sonar_count_sheet_form_name	sonar_features	sonar_go_live_date	sonar_name_full	sonar_scanner_stop_char	sterilize_alert_level	sterilizer_label_form_id	sterilizer_print_at_cooling	sterilizer_print_at_released	sterilizer_print_at_sterilizing	their_id	tz_name	tz_name_pg	updated_by	updated_dts	user_badge_label_form_id	workstation_label_form_id','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:focus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','focus','','Table column strict check for ascendco.focus','select * from ascendco.focus limit 0;','scase_id	hsys_id	facility_id	sched_dts	facility_name	or_name	case_seq	desc_	status	transport_from	surgeon_name	proc_name	when_','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','focus','','Table column orderless check for ascendco.focus','select * from ascendco.focus limit 0;','case_seq	desc_	facility_id	facility_name	hsys_id	or_name	proc_name	scase_id	sched_dts	status	surgeon_name	transport_from	when_','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:form_template.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','form_template','','Table column strict check for ascendco.form_template','select * from ascendco.form_template limit 0;','id	created_dts	updated_dts	marked_for_deletion	name_	comments_	updated_by	created_by	form_definition','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','form_template','','Table column orderless check for ascendco.form_template','select * from ascendco.form_template limit 0;','comments_	created_by	created_dts	form_definition	id	marked_for_deletion	name_	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:hsys.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','hsys','','Table column strict check for ascendco.hsys','select * from ascendco.hsys limit 0;','id	marked_for_deletion	name_	sonar_client_version	sonar_server_version	sonar_browser_version','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','hsys','','Table column orderless check for ascendco.hsys','select * from ascendco.hsys limit 0;','id	marked_for_deletion	name_	sonar_browser_version	sonar_client_version	sonar_server_version','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:iceberg_table.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','iceberg_table','','Table column strict check for ascendco.iceberg_table','select * from ascendco.iceberg_table limit 0;','table_number	table_name','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','iceberg_table','','Table column orderless check for ascendco.iceberg_table','select * from ascendco.iceberg_table limit 0;','table_name	table_number','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:inv.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','inv','','Table column strict check for ascendco.inv','select * from ascendco.inv limit 0;','id	item_id	item_arch_id	facility_location_id	standard_faclity_id	store_at_facility_id	created_dts	updated_dts	serial_no_as_of_dts	qty	flow	flow_long	par	last_seen_date	their_next_repair_date	last_sterilized_date	repair_last_repair_date	marked_for_deletion	is_found	is_go_live_perm_printed	is_facility_loc_inherited	is_contents_incomplete	is_deactivated	needs_repair	is_searched_but_not_found	is_wrong_loc	is_handwritten_label	is_sleeping	category	their_name	their_id	their_location	created_by	updated_by	their_id_scrubbed	crossing_status	inv_no	their_raw_name	comments_	their_bar_code	loc_rack	loc_row	loc_bin	loc_note	serial_no	data_cleanse_classification	repair_next_due	repair_last_repaired_by	msgs','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','inv','','Table column orderless check for ascendco.inv','select * from ascendco.inv limit 0;','category	comments_	created_by	created_dts	crossing_status	data_cleanse_classification	facility_location_id	flow	flow_long	id	inv_no	is_contents_incomplete	is_deactivated	is_facility_loc_inherited	is_found	is_go_live_perm_printed	is_handwritten_label	is_searched_but_not_found	is_sleeping	is_wrong_loc	item_arch_id	item_id	last_seen_date	last_sterilized_date	loc_bin	loc_note	loc_rack	loc_row	marked_for_deletion	msgs	needs_repair	par	qty	repair_last_repair_date	repair_last_repaired_by	repair_next_due	serial_no	serial_no_as_of_dts	standard_faclity_id	store_at_facility_id	their_bar_code	their_id	their_id_scrubbed	their_location	their_name	their_next_repair_date	their_raw_name	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:item_arch.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','item_arch','','Table column strict check for ascendco.item_arch','select * from ascendco.item_arch limit 0;','id	facility_id	clinic_id	created_dts	updated_dts	previous_as_of	marked_for_deletion	is_current	name_	type_	created_by	updated_by','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','item_arch','','Table column orderless check for ascendco.item_arch','select * from ascendco.item_arch limit 0;','clinic_id	created_by	created_dts	facility_id	id	is_current	marked_for_deletion	name_	previous_as_of	type_	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:item_type.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','item_type','','Table column strict check for ascendco.item_type','select * from ascendco.item_type limit 0;','id	marked_for_deletion	name_','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','item_type','','Table column orderless check for ascendco.item_type','select * from ascendco.item_type limit 0;','id	marked_for_deletion	name_','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:item.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','item','','Table column strict check for ascendco.item','select * from ascendco.item limit 0;','id	item_arch_id	facility_specialty_id	item_uu_id_across_item_archs	inv_responsible_user_id	facility_department_id	specialty_id	sup_id	dr_people_id	item_type_id	item_master_link_id	facility_location_id	clinic_id	hsys_tag_id	name_copied_from_prod_id	created_dts	updated_dts	named_dts	needs_sched_sync_as_of_dts	weight_lb	qty	flow	flow_long	max_processed_one_day	par	assembly_difficulty	num_inst	repair_every_x	their_qty	replace_every_x_cycles	marked_for_deletion	is_name_finalized	ignore_for_optimization	name_needs_review	is_vendor_data	is_deactivated	is_name_copied_from_prod	is_custom_sort	inv_has_implants	sync_to_other_software_systems	has_implants	is_label_abbr	is_in_data_cleanse_scope	hide_specialty_in_name	hide_hsys_tag_in_name	is_small_set	is_conflict_check	dont_print_count_sheet	is_generic_pack	is_flexible_scope	is_robotic	is_imlink_locked	is_not_tracked_by_inv_no	requires_leak_test	is_assembly_critical	their_name	inv_status	opt_status	created_by	updated_by	old_names	their_serial_no	name_desc	name_	their_id	decon_special_instructions	named_by	needs_review_notes	vendor_tray_type	sterilization_method	priority	category	packaging_type	packaging_notes	their_packaging_type	assembly_special_instructions	sterilize_special_instructions	label_name_abbr	their_location	count_sheet_status	requested_by	rack_row_bin_note	standardization_status	repair_every_x_type	their_base_barcode	their_key	stuff','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','item','','Table column orderless check for ascendco.item','select * from ascendco.item limit 0;','assembly_difficulty	assembly_special_instructions	category	clinic_id	count_sheet_status	created_by	created_dts	decon_special_instructions	dont_print_count_sheet	dr_people_id	facility_department_id	facility_location_id	facility_specialty_id	flow	flow_long	has_implants	hide_hsys_tag_in_name	hide_specialty_in_name	hsys_tag_id	id	ignore_for_optimization	inv_has_implants	inv_responsible_user_id	inv_status	is_assembly_critical	is_conflict_check	is_custom_sort	is_deactivated	is_flexible_scope	is_generic_pack	is_imlink_locked	is_in_data_cleanse_scope	is_label_abbr	is_name_copied_from_prod	is_name_finalized	is_not_tracked_by_inv_no	is_robotic	is_small_set	is_vendor_data	item_arch_id	item_master_link_id	item_type_id	item_uu_id_across_item_archs	label_name_abbr	marked_for_deletion	max_processed_one_day	name_	name_copied_from_prod_id	name_desc	name_needs_review	named_by	named_dts	needs_review_notes	needs_sched_sync_as_of_dts	num_inst	old_names	opt_status	packaging_notes	packaging_type	par	priority	qty	rack_row_bin_note	repair_every_x	repair_every_x_type	replace_every_x_cycles	requested_by	requires_leak_test	specialty_id	standardization_status	sterilization_method	sterilize_special_instructions	stuff	sup_id	sync_to_other_software_systems	their_base_barcode	their_id	their_key	their_location	their_name	their_packaging_type	their_qty	their_serial_no	updated_by	updated_dts	vendor_tray_type	weight_lb','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:loaner_case.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','loaner_case','','Table column strict check for ascendco.loaner_case','select * from ascendco.loaner_case limit 0;','id	loaner_id	last_updated_by_data_file_id	case_dts	created_dts	updated_dts	marked_for_deletion	surgeon	desc_	created_by	updated_by','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','loaner_case','','Table column orderless check for ascendco.loaner_case','select * from ascendco.loaner_case limit 0;','case_dts	created_by	created_dts	desc_	id	last_updated_by_data_file_id	loaner_id	marked_for_deletion	surgeon	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:loaner_item.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','loaner_item','','Table column strict check for ascendco.loaner_item','select * from ascendco.loaner_item limit 0;','id	loaner_id	item_id	last_updated_by_data_file_id	created_dts	updated_dts	qty	pickup_qty	left_behind_qty	marked_for_deletion	created_by	updated_by','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','loaner_item','','Table column orderless check for ascendco.loaner_item','select * from ascendco.loaner_item limit 0;','created_by	created_dts	id	item_id	last_updated_by_data_file_id	left_behind_qty	loaner_id	marked_for_deletion	pickup_qty	qty	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:loaner_iteminv.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','loaner_iteminv','','Table column strict check for ascendco.loaner_iteminv','select * from ascendco.loaner_iteminv limit 0;','id	loaner_item_id	inv_id	last_updated_by_data_file_id	created_dts	updated_dts	marked_for_deletion	created_by	updated_by','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','loaner_iteminv','','Table column orderless check for ascendco.loaner_iteminv','select * from ascendco.loaner_iteminv limit 0;','created_by	created_dts	id	inv_id	last_updated_by_data_file_id	loaner_item_id	marked_for_deletion	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:loaner.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','loaner','','Table column strict check for ascendco.loaner','select * from ascendco.loaner limit 0;','id	sup_id	rep_id	last_updated_by_data_file_id	facility_id	s_case_id	drop_off_dts	pickup_dts	created_dts	updated_dts	datetime_local	num_items	is_printed	marked_for_deletion	notes	created_by	updated_by	status','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','loaner','','Table column orderless check for ascendco.loaner','select * from ascendco.loaner limit 0;','created_by	created_dts	datetime_local	drop_off_dts	facility_id	id	is_printed	last_updated_by_data_file_id	marked_for_deletion	notes	num_items	pickup_dts	rep_id	s_case_id	status	sup_id	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:need.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','need','','Table column strict check for ascendco.need','select * from ascendco.need limit 0;','id	hsys_id	facility_id	item_id	percent_down	created_dts	next_case_dts	flow	qty_circulation	qty_ready_everywhere	qty_ready_here	qty_sched_everywhere	qty_sched_here	qty_sterile_everywhere	qty_sterile_here	qty_suggest_sterilize	qty_total	ready_vs_need_defecit	sched_sort	sort_rank	suggest_transport	next_needed	or_name	status	status_sort	when_	qty_here','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','need','','Table column orderless check for ascendco.need','select * from ascendco.need limit 0;','created_dts	facility_id	flow	hsys_id	id	item_id	next_case_dts	next_needed	or_name	percent_down	qty_circulation	qty_here	qty_ready_everywhere	qty_ready_here	qty_sched_everywhere	qty_sched_here	qty_sterile_everywhere	qty_sterile_here	qty_suggest_sterilize	qty_total	ready_vs_need_defecit	sched_sort	sort_rank	status	status_sort	suggest_transport	when_','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:outlier_change.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','outlier_change','','Table column strict check for ascendco.outlier_change','select * from ascendco.outlier_change limit 0;','id	outlier_rule_id	value_was	set_to	change_count	last_changed_dts','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','outlier_change','','Table column orderless check for ascendco.outlier_change','select * from ascendco.outlier_change limit 0;','change_count	id	last_changed_dts	outlier_rule_id	set_to	value_was','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:outlier_rule.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','outlier_rule','','Table column strict check for ascendco.outlier_rule','select * from ascendco.outlier_rule limit 0;','id	schema_name	table_name	column_name	threshold	set_to','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','outlier_rule','','Table column orderless check for ascendco.outlier_rule','select * from ascendco.outlier_rule limit 0;','column_name	id	schema_name	set_to	table_name	threshold','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:productivity_detail.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','productivity_detail','','Table column strict check for ascendco.productivity_detail','select * from ascendco.productivity_detail limit 0;','id	data_file_id	user_id	facility_id	start_time_dts	source_record_row_counter	source_table_number	start_date	assembly_inst	assembly_pack	assembly_tray	assembly_points	assembly_seconds_trays	assembly_seconds_overall	pause_seconds	duration_seconds	placeholder_row	description	year_and_month	time_label	duration	pause_time	activity	user_label','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','productivity_detail','','Table column orderless check for ascendco.productivity_detail','select * from ascendco.productivity_detail limit 0;','activity	assembly_inst	assembly_pack	assembly_points	assembly_seconds_overall	assembly_seconds_trays	assembly_tray	data_file_id	description	duration	duration_seconds	facility_id	id	pause_seconds	pause_time	placeholder_row	source_record_row_counter	source_table_number	start_date	start_time_dts	time_label	user_id	user_label	year_and_month','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:push_log.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','push_log','','Table column strict check for ascendco.push_log','select * from ascendco.push_log limit 0;','id	push_dts	pushed_by	data_file_id	ib_table_number	ib_table_name	records_count','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','push_log','','Table column orderless check for ascendco.push_log','select * from ascendco.push_log limit 0;','data_file_id	ib_table_name	ib_table_number	id	push_dts	pushed_by	records_count','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:q_audit_step.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','q_audit_step','','Table column strict check for ascendco.q_audit_step','select * from ascendco.q_audit_step limit 0;','id	hsys_id	last_updated_by_data_file_id	created_dts	updated_dts	sort	marked_for_deletion	qsub_type_id_audit	step	created_by	updated_by	qsub_type_id_event','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','q_audit_step','','Table column orderless check for ascendco.q_audit_step','select * from ascendco.q_audit_step limit 0;','created_by	created_dts	hsys_id	id	last_updated_by_data_file_id	marked_for_deletion	qsub_type_id_audit	qsub_type_id_event	sort	step	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:q_event_audit_step.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','q_event_audit_step','','Table column strict check for ascendco.q_event_audit_step','select * from ascendco.q_event_audit_step limit 0;','id	qevent_id	last_updated_by_data_file_id	qaudit_step_id	created_dts	updated_dts	sort	marked_for_deletion	is_coached	step	status	notes	created_by	updated_by	qsub_type_id_event','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','q_event_audit_step','','Table column orderless check for ascendco.q_event_audit_step','select * from ascendco.q_event_audit_step limit 0;','created_by	created_dts	id	is_coached	last_updated_by_data_file_id	marked_for_deletion	notes	qaudit_step_id	qevent_id	qsub_type_id_event	sort	status	step	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:q_event_person.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','q_event_person','','Table column strict check for ascendco.q_event_person','select * from ascendco.q_event_person limit 0;','id	web_user_id	qevent_id	last_updated_by_data_file_id	created_dts	updated_dts	is_accountable	marked_for_deletion	send_email	created_by	updated_by	role_','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','q_event_person','','Table column orderless check for ascendco.q_event_person','select * from ascendco.q_event_person limit 0;','created_by	created_dts	id	is_accountable	last_updated_by_data_file_id	marked_for_deletion	qevent_id	role_	send_email	updated_by	updated_dts	web_user_id','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:q_event.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','q_event','','Table column strict check for ascendco.q_event','select * from ascendco.q_event limit 0;','id	qtype_id	qsub_type_id	inv_id	scan_id	status_reported_by_user_id	status_investigating_user_id	status_done_user_id	or_surgeon_people_id	last_updated_by_data_file_id	facility_id	status_when_user_id	assembly_id	status_reported_dts	status_investigating_dts	status_done_dts	created_dts	updated_dts	status_when_dts	datetime_local	or_delay_minutes	marked_for_deletion	assembly_audit_prods	is_process_problem	is_data_problem	is_coached	desc_	status	status_reported_by_name	status_investigating_name	status_done_name	or_room	or_delay_type	created_by	updated_by	status_when_name	notes','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','q_event','','Table column orderless check for ascendco.q_event','select * from ascendco.q_event limit 0;','assembly_audit_prods	assembly_id	created_by	created_dts	datetime_local	desc_	facility_id	id	inv_id	is_coached	is_data_problem	is_process_problem	last_updated_by_data_file_id	marked_for_deletion	notes	or_delay_minutes	or_delay_type	or_room	or_surgeon_people_id	qsub_type_id	qtype_id	scan_id	status	status_done_dts	status_done_name	status_done_user_id	status_investigating_dts	status_investigating_name	status_investigating_user_id	status_reported_by_name	status_reported_by_user_id	status_reported_dts	status_when_dts	status_when_name	status_when_user_id	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:q_level.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','q_level','','Table column strict check for ascendco.q_level','select * from ascendco.q_level limit 0;','id	last_updated_by_data_file_id	hsys_id	created_dts	updated_dts	level_	marked_for_deletion	name_	created_by	updated_by	ascendco_name','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','q_level','','Table column orderless check for ascendco.q_level','select * from ascendco.q_level limit 0;','ascendco_name	created_by	created_dts	hsys_id	id	last_updated_by_data_file_id	level_	marked_for_deletion	name_	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:q_subtype.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','q_subtype','','Table column strict check for ascendco.q_subtype','select * from ascendco.q_subtype limit 0;','id	qtype_id	qlevel_id	last_updated_by_data_file_id	hsys_id	facility_id	facility_group_id	created_dts	updated_dts	is_available_in_decon	marked_for_deletion	is_active	is_for_inv	is_available_in_assembly	name_	created_by	updated_by	ascendco_name	type_	available_for	item_type_ids','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','q_subtype','','Table column orderless check for ascendco.q_subtype','select * from ascendco.q_subtype limit 0;','ascendco_name	available_for	created_by	created_dts	facility_group_id	facility_id	hsys_id	id	is_active	is_available_in_assembly	is_available_in_decon	is_for_inv	item_type_ids	last_updated_by_data_file_id	marked_for_deletion	name_	qlevel_id	qtype_id	type_	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:q_type.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','q_type','','Table column strict check for ascendco.q_type','select * from ascendco.q_type limit 0;','id	last_updated_by_data_file_id	hsys_id	created_dts	updated_dts	marked_for_deletion	is_active	name_	created_by	updated_by	ascendco_name	type_','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','q_type','','Table column orderless check for ascendco.q_type','select * from ascendco.q_type limit 0;','ascendco_name	created_by	created_dts	hsys_id	id	is_active	last_updated_by_data_file_id	marked_for_deletion	name_	type_	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:rcl_check.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','rcl_check','','Table column strict check for ascendco.rcl_check','select * from ascendco.rcl_check limit 0;','id	production	leviathan','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','rcl_check','','Table column orderless check for ascendco.rcl_check','select * from ascendco.rcl_check limit 0;','id	leviathan	production','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:rcl_id.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','rcl_id','','Table column strict check for ascendco.rcl_id','select * from ascendco.rcl_id limit 0;','id	source','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','rcl_id','','Table column orderless check for ascendco.rcl_id','select * from ascendco.rcl_id limit 0;','id	source','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:record_changes_log_detail.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','record_changes_log_detail','','Table column strict check for ascendco.record_changes_log_detail','select * from ascendco.record_changes_log_detail limit 0;','id	record_changes_log_id	record_id	field_name	old_value	new_value','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','record_changes_log_detail','','Table column orderless check for ascendco.record_changes_log_detail','select * from ascendco.record_changes_log_detail limit 0;','field_name	id	new_value	old_value	record_changes_log_id	record_id','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:record_changes_log.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','record_changes_log','','Table column strict check for ascendco.record_changes_log','select * from ascendco.record_changes_log limit 0;','id	table_number	record_id	updated_dts	app_type	machine_name	updated_by','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','record_changes_log','','Table column orderless check for ascendco.record_changes_log','select * from ascendco.record_changes_log limit 0;','app_type	id	machine_name	record_id	table_number	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:rep.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','rep','','Table column strict check for ascendco.rep','select * from ascendco.rep limit 0;','id	user_id	hsys_id	sup_id	created_dts	updated_dts	marked_for_deletion	name_	phone	email	created_by	updated_by','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','rep','','Table column orderless check for ascendco.rep','select * from ascendco.rep limit 0;','created_by	created_dts	email	hsys_id	id	marked_for_deletion	name_	phone	sup_id	updated_by	updated_dts	user_id','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:row_compare.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','row_compare','','Table column strict check for ascendco.row_compare','select * from ascendco.row_compare limit 0;','id	hash_1	hash_2	hashes_match	table_name','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','row_compare','','Table column orderless check for ascendco.row_compare','select * from ascendco.row_compare limit 0;','hash_1	hash_2	hashes_match	id	table_name','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:specialty.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','specialty','','Table column strict check for ascendco.specialty','select * from ascendco.specialty limit 0;','id	marked_for_deletion	data_file_id	name_	name_short','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','specialty','','Table column orderless check for ascendco.specialty','select * from ascendco.specialty limit 0;','data_file_id	id	marked_for_deletion	name_	name_short','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:stat_facility.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','stat_facility','','Table column strict check for ascendco.stat_facility','select * from ascendco.stat_facility limit 0;','id	date_	category	item_type	stat_type	is_most_recent	in_data_cleanse_scope	facility_id	hsys_id	items_inactive	items_count	items_qty	items_inventoried	items_to_inventory	items_named	items_to_name	inst_qty	items_has_loc	items_missing_locs	item_prods_count	item_prods_missing_part_nos_thier	item_prods_missing_vendors_thier	item_prods_dr_pref	item_prods_critical	item_prods_not_linked	item_prods_missing_part_nos	item_prods_missing_vendors	item_prods_cant_determine	item_prods_linked	sup_prods_count	sups_count	prods_count	prods_with_pic	prods_without_pic	item_prods_verified	item_prods_expert_linked	item_prods_dup_names_their	item_prods_dup_names	prods_named	part_nos_fixed	invs_inactive	invs_count	invs_found	emr_items_count	emr_items_linked	emr_items_matches_their_name	emr_items_matches_our_name	emr_items_no_match_their_name	emr_items_no_match_our_name	emr_items_dups','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','stat_facility','','Table column orderless check for ascendco.stat_facility','select * from ascendco.stat_facility limit 0;','category	date_	emr_items_count	emr_items_dups	emr_items_linked	emr_items_matches_our_name	emr_items_matches_their_name	emr_items_no_match_our_name	emr_items_no_match_their_name	facility_id	hsys_id	id	in_data_cleanse_scope	inst_qty	invs_count	invs_found	invs_inactive	is_most_recent	item_prods_cant_determine	item_prods_count	item_prods_critical	item_prods_dr_pref	item_prods_dup_names	item_prods_dup_names_their	item_prods_expert_linked	item_prods_linked	item_prods_missing_part_nos	item_prods_missing_part_nos_thier	item_prods_missing_vendors	item_prods_missing_vendors_thier	item_prods_not_linked	item_prods_verified	item_type	items_count	items_has_loc	items_inactive	items_inventoried	items_missing_locs	items_named	items_qty	items_to_inventory	items_to_name	part_nos_fixed	prods_count	prods_named	prods_with_pic	prods_without_pic	stat_type	sup_prods_count	sups_count','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:sterilize_method.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','sterilize_method','','Table column strict check for ascendco.sterilize_method','select * from ascendco.sterilize_method limit 0;','id	marked_for_deletion	data_file_id	name_','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','sterilize_method','','Table column orderless check for ascendco.sterilize_method','select * from ascendco.sterilize_method limit 0;','data_file_id	id	marked_for_deletion	name_','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:sterilize_params.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','sterilize_params','','Table column strict check for ascendco.sterilize_params','select * from ascendco.sterilize_params limit 0;','id	marked_for_deletion	data_file_id	hsys_id	sterilize_method_id	name_','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','sterilize_params','','Table column orderless check for ascendco.sterilize_params','select * from ascendco.sterilize_params limit 0;','data_file_id	hsys_id	id	marked_for_deletion	name_	sterilize_method_id','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:sterilizer_load.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','sterilizer_load','','Table column strict check for ascendco.sterilizer_load','select * from ascendco.sterilizer_load limit 0;','id	data_file_id	sterilize_method_id	sterilize_params_id	sterilizer_id	created_dts	status_building_dts	status_sterilizing_dts	status_cooling_dts	status_done_dts	utcoffset_seconds	marked_for_deletion	load_no	notes	failed_notes','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','sterilizer_load','','Table column orderless check for ascendco.sterilizer_load','select * from ascendco.sterilizer_load limit 0;','created_dts	data_file_id	failed_notes	id	load_no	marked_for_deletion	notes	status_building_dts	status_cooling_dts	status_done_dts	status_sterilizing_dts	sterilize_method_id	sterilize_params_id	sterilizer_id	utcoffset_seconds','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:sterilizer_log.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','sterilizer_log','','Table column strict check for ascendco.sterilizer_log','select * from ascendco.sterilizer_log limit 0;','id	log_type	summary_json	log_xml	data_file_id','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','sterilizer_log','','Table column orderless check for ascendco.sterilizer_log','select * from ascendco.sterilizer_log limit 0;','data_file_id	id	log_type	log_xml	summary_json','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:sterilizer.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','sterilizer','','Table column strict check for ascendco.sterilizer','select * from ascendco.sterilizer limit 0;','id	marked_for_deletion	data_file_id	facility_id	sterilize_method_id	name_','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','sterilizer','','Table column orderless check for ascendco.sterilizer','select * from ascendco.sterilizer limit 0;','data_file_id	facility_id	id	marked_for_deletion	name_	sterilize_method_id','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:sup_parent.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','sup_parent','','Table column strict check for ascendco.sup_parent','select * from ascendco.sup_parent limit 0;','id	created_dts	updated_dts	marked_for_deletion	name_	created_by	updated_by','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','sup_parent','','Table column orderless check for ascendco.sup_parent','select * from ascendco.sup_parent limit 0;','created_by	created_dts	id	marked_for_deletion	name_	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:sup.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','sup','','Table column strict check for ascendco.sup','select * from ascendco.sup limit 0;','id	custom_facility_id	sup_parent_id	created_dts	updated_dts	marked_for_deletion	is_custom_by_facility	is_available_for_loaners	name_	created_by	updated_by	short_name','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','sup','','Table column orderless check for ascendco.sup','select * from ascendco.sup limit 0;','created_by	created_dts	custom_facility_id	id	is_available_for_loaners	is_custom_by_facility	marked_for_deletion	name_	short_name	sup_parent_id	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:text_collection_item.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','text_collection_item','','Table column strict check for ascendco.text_collection_item','select * from ascendco.text_collection_item limit 0;','collection_id	text	source_id','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','text_collection_item','','Table column orderless check for ascendco.text_collection_item','select * from ascendco.text_collection_item limit 0;','collection_id	source_id	text','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:text_collection.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','text_collection','','Table column strict check for ascendco.text_collection','select * from ascendco.text_collection limit 0;','id	collection_name	added_dts	facility_id	retain','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','text_collection','','Table column orderless check for ascendco.text_collection','select * from ascendco.text_collection limit 0;','added_dts	collection_name	facility_id	id	retain','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:ascendco:web_user.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','web_user','','Table column strict check for ascendco.web_user','select * from ascendco.web_user limit 0;','id	marked_for_deletion	is_sonar_ascendco_support	data_file_id	username	role_	name_first	name_last	hsys_id	name_full','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','ascendco','web_user','','Table column orderless check for ascendco.web_user','select * from ascendco.web_user limit 0;','data_file_id	hsys_id	id	is_sonar_ascendco_support	marked_for_deletion	name_first	name_full	name_last	role_	username','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:dba:ddl_event_log.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','dba','ddl_event_log','','Table column strict check for dba.ddl_event_log','select * from dba.ddl_event_log limit 0;','id	event_timestamp	classid	objid	objsubid	command_tag	is_temporary	normal	original	in_extension	object_identity	object_name	object_type	schema_name	address_args	address_names	trigger_event','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','dba','ddl_event_log','','Table column orderless check for dba.ddl_event_log','select * from dba.ddl_event_log limit 0;','address_args	address_names	classid	command_tag	event_timestamp	id	in_extension	is_temporary	normal	object_identity	object_name	object_type	objid	objsubid	original	schema_name	trigger_event','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:dba:patch_log.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','dba','patch_log','','Table column strict check for dba.patch_log','select * from dba.patch_log limit 0;','id	patch_dts	server_address	database_name	pg_version	user_name	patch_name	description	patch_hash','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','dba','patch_log','','Table column orderless check for dba.patch_log','select * from dba.patch_log limit 0;','database_name	description	id	patch_dts	patch_hash	patch_name	pg_version	server_address	user_name','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:dba:push_audit.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','dba','push_audit','','Table column strict check for dba.push_audit','select * from dba.push_audit limit 0;','data_file_id	start_local_dts	end_local_dts	end_utc_dts	inserted_utc_dts	id	duration_seconds	records_count	target_id	version_number	error_occurred	client_user_name	inserted_by	push_method_name	error_text','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','dba','push_audit','','Table column orderless check for dba.push_audit','select * from dba.push_audit limit 0;','client_user_name	data_file_id	duration_seconds	end_local_dts	end_utc_dts	error_occurred	error_text	id	inserted_by	inserted_utc_dts	push_method_name	records_count	start_local_dts	target_id	version_number','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:dba:push_target.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','dba','push_target','','Table column strict check for dba.push_target','select * from dba.push_target limit 0;','id	unique_path	schema_name	target_name	qualified_name	target_type','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','dba','push_target','','Table column orderless check for dba.push_target','select * from dba.push_target limit 0;','id	qualified_name	schema_name	target_name	target_type	unique_path','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:dba:target_count.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','dba','target_count','','Table column strict check for dba.target_count','select * from dba.target_count limit 0;','hsys_id	records_count	count_date	count_dts	qualified_name','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','dba','target_count','','Table column orderless check for dba.target_count','select * from dba.target_count limit 0;','count_date	count_dts	hsys_id	qualified_name	records_count','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:dba:test_case.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','dba','test_case','','Table column strict check for dba.test_case','select * from dba.test_case limit 0;','id	added_dts	object_class	object_schema	object_name	function_signature	test_name	test_code	setup_code	teardown_code	expected_response	expected_error	expected_outcome	response_type	comparison_options	run_as	modifies_data	rds_only','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','dba','test_case','','Table column orderless check for dba.test_case','select * from dba.test_case limit 0;','added_dts	comparison_options	expected_error	expected_outcome	expected_response	function_signature	id	modifies_data	object_class	object_name	object_schema	rds_only	response_type	run_as	setup_code	teardown_code	test_code	test_name','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:dba:test_result.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','dba','test_result','','Table column strict check for dba.test_result','select * from dba.test_result limit 0;','id	test_case_id	patch_log_id	result_dts	test_passed	server_address	database_name	pg_version	user_name	actual_response	actual_error	actual_outcome	diagnostics	summary	results_json','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','dba','test_result','','Table column orderless check for dba.test_result','select * from dba.test_result limit 0;','actual_error	actual_outcome	actual_response	database_name	diagnostics	id	patch_log_id	pg_version	result_dts	results_json	server_address	summary	test_case_id	test_passed	user_name','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:tables:dba:view_catalog.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('Table','dba','view_catalog','','Table column strict check for dba.view_catalog','select * from dba.view_catalog limit 0;','schema_name	view_name	description	domo_dataset','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('Table','dba','view_catalog','','Table column orderless check for dba.view_catalog','select * from dba.view_catalog limit 0;','description	domo_dataset	schema_name	view_name','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:calendar_day_before_insert.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.calendar_day calendar_day_before_insert trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'calendar_day_before_insert', '', 'ascendco.calendar_day calendar_day_before_insert existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''calendar_day''      and trigger_schema            = ''ascendco''      and trigger_name              = ''calendar_day_before_insert''     and action_timing             = ''BEFORE''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_calendar_day_before_insert()''     and definition                = ''CREATE TRIGGER calendar_day_before_insert BEFORE INSERT ON ascendco.calendar_day FOR EACH ROW EXECUTE FUNCTION trigger_function_calendar_day_before_insert()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'calendar_day_before_insert', '', 'ascendco.calendar_day calendar_day_before_insert definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''calendar_day''   and trigger_schema       = ''ascendco''   and trigger_name         = ''calendar_day_before_insert''', 'CREATE TRIGGER calendar_day_before_insert BEFORE INSERT ON ascendco.calendar_day FOR EACH ROW EXECUTE FUNCTION trigger_function_calendar_day_before_insert()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:calendar_year_before_upsert.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.calendar_year calendar_year_before_upsert trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'calendar_year_before_upsert', '', 'ascendco.calendar_year calendar_year_before_upsert existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''calendar_year''      and trigger_schema            = ''ascendco''      and trigger_name              = ''calendar_year_before_upsert''     and action_timing             = ''BEFORE''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_calendar_year_before_upsert()''     and definition                = ''CREATE TRIGGER calendar_year_before_upsert BEFORE INSERT OR UPDATE ON ascendco.calendar_year FOR EACH ROW EXECUTE FUNCTION trigger_function_calendar_year_before_upsert()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'calendar_year_before_upsert', '', 'ascendco.calendar_year calendar_year_before_upsert definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''calendar_year''   and trigger_schema       = ''ascendco''   and trigger_name         = ''calendar_year_before_upsert''', 'CREATE TRIGGER calendar_year_before_upsert BEFORE INSERT OR UPDATE ON ascendco.calendar_year FOR EACH ROW EXECUTE FUNCTION trigger_function_calendar_year_before_upsert()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_activity_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.activity trigger_activity_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_activity_after_delete', '', 'ascendco.activity trigger_activity_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''activity''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_activity_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_activity_after_delete AFTER DELETE ON ascendco.activity REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_activity_after_delete', '', 'ascendco.activity trigger_activity_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''activity''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_activity_after_delete''', 'CREATE TRIGGER trigger_activity_after_delete AFTER DELETE ON ascendco.activity REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_analytic_productivity_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_productivity trigger_analytic_productivity_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_analytic_productivity_after_delete', '', 'ascendco.analytic_productivity trigger_analytic_productivity_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''analytic_productivity''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_analytic_productivity_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_analytic_productivity_after_delete AFTER DELETE ON ascendco.analytic_productivity REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_analytic_productivity_after_delete', '', 'ascendco.analytic_productivity trigger_analytic_productivity_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''analytic_productivity''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_analytic_productivity_after_delete''', 'CREATE TRIGGER trigger_analytic_productivity_after_delete AFTER DELETE ON ascendco.analytic_productivity REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_analytic_scan_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_scan trigger_analytic_scan_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_analytic_scan_after_delete', '', 'ascendco.analytic_scan trigger_analytic_scan_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''analytic_scan''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_analytic_scan_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_analytic_scan_after_delete AFTER DELETE ON ascendco.analytic_scan REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_analytic_scan_after_delete', '', 'ascendco.analytic_scan trigger_analytic_scan_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''analytic_scan''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_analytic_scan_after_delete''', 'CREATE TRIGGER trigger_analytic_scan_after_delete AFTER DELETE ON ascendco.analytic_scan REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_analytic_sterilizer_load_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_sterilizer_load trigger_analytic_sterilizer_load_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_analytic_sterilizer_load_after_delete', '', 'ascendco.analytic_sterilizer_load trigger_analytic_sterilizer_load_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''analytic_sterilizer_load''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_analytic_sterilizer_load_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_analytic_sterilizer_load_after_delete AFTER DELETE ON ascendco.analytic_sterilizer_load REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_analytic_sterilizer_load_after_delete', '', 'ascendco.analytic_sterilizer_load trigger_analytic_sterilizer_load_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''analytic_sterilizer_load''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_analytic_sterilizer_load_after_delete''', 'CREATE TRIGGER trigger_analytic_sterilizer_load_after_delete AFTER DELETE ON ascendco.analytic_sterilizer_load REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_analytic_sterilizer_loadinv_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_sterilizer_loadinv trigger_analytic_sterilizer_loadinv_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_analytic_sterilizer_loadinv_after_delete', '', 'ascendco.analytic_sterilizer_loadinv trigger_analytic_sterilizer_loadinv_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''analytic_sterilizer_loadinv''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_analytic_sterilizer_loadinv_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_analytic_sterilizer_loadinv_after_delete AFTER DELETE ON ascendco.analytic_sterilizer_loadinv REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_analytic_sterilizer_loadinv_after_delete', '', 'ascendco.analytic_sterilizer_loadinv trigger_analytic_sterilizer_loadinv_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''analytic_sterilizer_loadinv''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_analytic_sterilizer_loadinv_after_delete''', 'CREATE TRIGGER trigger_analytic_sterilizer_loadinv_after_delete AFTER DELETE ON ascendco.analytic_sterilizer_loadinv REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_analytic_work_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.analytic_work trigger_analytic_work_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_analytic_work_after_delete', '', 'ascendco.analytic_work trigger_analytic_work_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''analytic_work''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_analytic_work_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_analytic_work_after_delete AFTER DELETE ON ascendco.analytic_work REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_analytic_work_after_delete', '', 'ascendco.analytic_work trigger_analytic_work_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''analytic_work''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_analytic_work_after_delete''', 'CREATE TRIGGER trigger_analytic_work_after_delete AFTER DELETE ON ascendco.analytic_work REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_assembly_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.assembly trigger_assembly_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_assembly_after_delete', '', 'ascendco.assembly trigger_assembly_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''assembly''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_assembly_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_assembly_after_delete AFTER DELETE ON ascendco.assembly REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_assembly_after_delete', '', 'ascendco.assembly trigger_assembly_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''assembly''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_assembly_after_delete''', 'CREATE TRIGGER trigger_assembly_after_delete AFTER DELETE ON ascendco.assembly REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_assembly_prods_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.assembly_prods trigger_assembly_prods_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_assembly_prods_after_delete', '', 'ascendco.assembly_prods trigger_assembly_prods_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''assembly_prods''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_assembly_prods_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_assembly_prods_after_delete AFTER DELETE ON ascendco.assembly_prods REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_assembly_prods_after_delete', '', 'ascendco.assembly_prods trigger_assembly_prods_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''assembly_prods''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_assembly_prods_after_delete''', 'CREATE TRIGGER trigger_assembly_prods_after_delete AFTER DELETE ON ascendco.assembly_prods REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_clinic_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.clinic trigger_clinic_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_clinic_after_delete', '', 'ascendco.clinic trigger_clinic_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''clinic''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_clinic_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_clinic_after_delete AFTER DELETE ON ascendco.clinic REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_clinic_after_delete', '', 'ascendco.clinic trigger_clinic_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''clinic''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_clinic_after_delete''', 'CREATE TRIGGER trigger_clinic_after_delete AFTER DELETE ON ascendco.clinic REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_data_file_info_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.data_file_info trigger_data_file_info_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_data_file_info_after_delete', '', 'ascendco.data_file_info trigger_data_file_info_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''data_file_info''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_data_file_info_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_data_file_info_after_delete AFTER DELETE ON ascendco.data_file_info REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_data_file_info_after_delete', '', 'ascendco.data_file_info trigger_data_file_info_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''data_file_info''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_data_file_info_after_delete''', 'CREATE TRIGGER trigger_data_file_info_after_delete AFTER DELETE ON ascendco.data_file_info REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_data_file_info_before_update.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.data_file_info trigger_data_file_info_before_update trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_data_file_info_before_update', '', 'ascendco.data_file_info trigger_data_file_info_before_update existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''data_file_info''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_data_file_info_before_update''     and action_timing             = ''BEFORE''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_update_last_updated_dts()''     and definition                = ''CREATE TRIGGER trigger_data_file_info_before_update BEFORE UPDATE ON ascendco.data_file_info FOR EACH ROW EXECUTE FUNCTION trigger_function_update_last_updated_dts()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_data_file_info_before_update', '', 'ascendco.data_file_info trigger_data_file_info_before_update definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''data_file_info''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_data_file_info_before_update''', 'CREATE TRIGGER trigger_data_file_info_before_update BEFORE UPDATE ON ascendco.data_file_info FOR EACH ROW EXECUTE FUNCTION trigger_function_update_last_updated_dts()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_domo_dataset_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.domo_dataset trigger_domo_dataset_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_domo_dataset_after_delete', '', 'ascendco.domo_dataset trigger_domo_dataset_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''domo_dataset''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_domo_dataset_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_domo_dataset_after_delete AFTER DELETE ON ascendco.domo_dataset REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_domo_dataset_after_delete', '', 'ascendco.domo_dataset trigger_domo_dataset_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''domo_dataset''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_domo_dataset_after_delete''', 'CREATE TRIGGER trigger_domo_dataset_after_delete AFTER DELETE ON ascendco.domo_dataset REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_domo_passthrough_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.domo_passthrough trigger_domo_passthrough_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_domo_passthrough_after_delete', '', 'ascendco.domo_passthrough trigger_domo_passthrough_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''domo_passthrough''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_domo_passthrough_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_domo_passthrough_after_delete AFTER DELETE ON ascendco.domo_passthrough REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_domo_passthrough_after_delete', '', 'ascendco.domo_passthrough trigger_domo_passthrough_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''domo_passthrough''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_domo_passthrough_after_delete''', 'CREATE TRIGGER trigger_domo_passthrough_after_delete AFTER DELETE ON ascendco.domo_passthrough REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_facility_activities_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.facility_activities trigger_facility_activities_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_facility_activities_after_delete', '', 'ascendco.facility_activities trigger_facility_activities_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''facility_activities''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_facility_activities_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_facility_activities_after_delete AFTER DELETE ON ascendco.facility_activities REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_facility_activities_after_delete', '', 'ascendco.facility_activities trigger_facility_activities_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''facility_activities''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_facility_activities_after_delete''', 'CREATE TRIGGER trigger_facility_activities_after_delete AFTER DELETE ON ascendco.facility_activities REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_facility_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.facility trigger_facility_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_facility_after_delete', '', 'ascendco.facility trigger_facility_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''facility''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_facility_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_facility_after_delete AFTER DELETE ON ascendco.facility REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_facility_after_delete', '', 'ascendco.facility trigger_facility_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''facility''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_facility_after_delete''', 'CREATE TRIGGER trigger_facility_after_delete AFTER DELETE ON ascendco.facility REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_facility_department_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.facility_department trigger_facility_department_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_facility_department_after_delete', '', 'ascendco.facility_department trigger_facility_department_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''facility_department''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_facility_department_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_facility_department_after_delete AFTER DELETE ON ascendco.facility_department REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_facility_department_after_delete', '', 'ascendco.facility_department trigger_facility_department_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''facility_department''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_facility_department_after_delete''', 'CREATE TRIGGER trigger_facility_department_after_delete AFTER DELETE ON ascendco.facility_department REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_facility_location_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.facility_location trigger_facility_location_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_facility_location_after_delete', '', 'ascendco.facility_location trigger_facility_location_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''facility_location''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_facility_location_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_facility_location_after_delete AFTER DELETE ON ascendco.facility_location REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_facility_location_after_delete', '', 'ascendco.facility_location trigger_facility_location_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''facility_location''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_facility_location_after_delete''', 'CREATE TRIGGER trigger_facility_location_after_delete AFTER DELETE ON ascendco.facility_location REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_form_template_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.form_template trigger_form_template_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_form_template_after_delete', '', 'ascendco.form_template trigger_form_template_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''form_template''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_form_template_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_form_template_after_delete AFTER DELETE ON ascendco.form_template REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_form_template_after_delete', '', 'ascendco.form_template trigger_form_template_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''form_template''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_form_template_after_delete''', 'CREATE TRIGGER trigger_form_template_after_delete AFTER DELETE ON ascendco.form_template REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_hsys_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.hsys trigger_hsys_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_hsys_after_delete', '', 'ascendco.hsys trigger_hsys_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''hsys''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_hsys_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_hsys_after_delete AFTER DELETE ON ascendco.hsys REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_hsys_after_delete', '', 'ascendco.hsys trigger_hsys_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''hsys''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_hsys_after_delete''', 'CREATE TRIGGER trigger_hsys_after_delete AFTER DELETE ON ascendco.hsys REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_inv_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.inv trigger_inv_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_inv_after_delete', '', 'ascendco.inv trigger_inv_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''inv''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_inv_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_inv_after_delete AFTER DELETE ON ascendco.inv REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_inv_after_delete', '', 'ascendco.inv trigger_inv_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''inv''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_inv_after_delete''', 'CREATE TRIGGER trigger_inv_after_delete AFTER DELETE ON ascendco.inv REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_item_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.item trigger_item_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_item_after_delete', '', 'ascendco.item trigger_item_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''item''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_item_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_item_after_delete AFTER DELETE ON ascendco.item REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_item_after_delete', '', 'ascendco.item trigger_item_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''item''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_item_after_delete''', 'CREATE TRIGGER trigger_item_after_delete AFTER DELETE ON ascendco.item REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_item_arch_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.item_arch trigger_item_arch_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_item_arch_after_delete', '', 'ascendco.item_arch trigger_item_arch_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''item_arch''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_item_arch_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_item_arch_after_delete AFTER DELETE ON ascendco.item_arch REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_item_arch_after_delete', '', 'ascendco.item_arch trigger_item_arch_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''item_arch''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_item_arch_after_delete''', 'CREATE TRIGGER trigger_item_arch_after_delete AFTER DELETE ON ascendco.item_arch REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_item_type_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.item_type trigger_item_type_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_item_type_after_delete', '', 'ascendco.item_type trigger_item_type_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''item_type''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_item_type_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_item_type_after_delete AFTER DELETE ON ascendco.item_type REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_item_type_after_delete', '', 'ascendco.item_type trigger_item_type_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''item_type''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_item_type_after_delete''', 'CREATE TRIGGER trigger_item_type_after_delete AFTER DELETE ON ascendco.item_type REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_loaner_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.loaner trigger_loaner_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_loaner_after_delete', '', 'ascendco.loaner trigger_loaner_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''loaner''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_loaner_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_loaner_after_delete AFTER DELETE ON ascendco.loaner REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_loaner_after_delete', '', 'ascendco.loaner trigger_loaner_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''loaner''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_loaner_after_delete''', 'CREATE TRIGGER trigger_loaner_after_delete AFTER DELETE ON ascendco.loaner REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_loaner_case_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.loaner_case trigger_loaner_case_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_loaner_case_after_delete', '', 'ascendco.loaner_case trigger_loaner_case_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''loaner_case''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_loaner_case_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_loaner_case_after_delete AFTER DELETE ON ascendco.loaner_case REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_loaner_case_after_delete', '', 'ascendco.loaner_case trigger_loaner_case_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''loaner_case''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_loaner_case_after_delete''', 'CREATE TRIGGER trigger_loaner_case_after_delete AFTER DELETE ON ascendco.loaner_case REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_loaner_item_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.loaner_item trigger_loaner_item_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_loaner_item_after_delete', '', 'ascendco.loaner_item trigger_loaner_item_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''loaner_item''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_loaner_item_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_loaner_item_after_delete AFTER DELETE ON ascendco.loaner_item REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_loaner_item_after_delete', '', 'ascendco.loaner_item trigger_loaner_item_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''loaner_item''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_loaner_item_after_delete''', 'CREATE TRIGGER trigger_loaner_item_after_delete AFTER DELETE ON ascendco.loaner_item REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_loaner_iteminv_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.loaner_iteminv trigger_loaner_iteminv_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_loaner_iteminv_after_delete', '', 'ascendco.loaner_iteminv trigger_loaner_iteminv_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''loaner_iteminv''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_loaner_iteminv_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_loaner_iteminv_after_delete AFTER DELETE ON ascendco.loaner_iteminv REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_loaner_iteminv_after_delete', '', 'ascendco.loaner_iteminv trigger_loaner_iteminv_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''loaner_iteminv''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_loaner_iteminv_after_delete''', 'CREATE TRIGGER trigger_loaner_iteminv_after_delete AFTER DELETE ON ascendco.loaner_iteminv REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_outlier_change_before_upsert.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.outlier_change trigger_outlier_change_before_upsert trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_outlier_change_before_upsert', '', 'ascendco.outlier_change trigger_outlier_change_before_upsert existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''outlier_change''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_outlier_change_before_upsert''     and action_timing             = ''BEFORE''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_outlier_upsert()''     and definition                = ''CREATE TRIGGER trigger_outlier_change_before_upsert BEFORE INSERT OR UPDATE ON ascendco.outlier_change FOR EACH ROW EXECUTE FUNCTION trigger_function_outlier_upsert()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_outlier_change_before_upsert', '', 'ascendco.outlier_change trigger_outlier_change_before_upsert definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''outlier_change''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_outlier_change_before_upsert''', 'CREATE TRIGGER trigger_outlier_change_before_upsert BEFORE INSERT OR UPDATE ON ascendco.outlier_change FOR EACH ROW EXECUTE FUNCTION trigger_function_outlier_upsert()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_outlier_rule_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.outlier_rule trigger_outlier_rule_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_outlier_rule_after_delete', '', 'ascendco.outlier_rule trigger_outlier_rule_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''outlier_rule''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_outlier_rule_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_outlier_rule_after_delete AFTER DELETE ON ascendco.outlier_rule REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_outlier_rule_after_delete', '', 'ascendco.outlier_rule trigger_outlier_rule_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''outlier_rule''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_outlier_rule_after_delete''', 'CREATE TRIGGER trigger_outlier_rule_after_delete AFTER DELETE ON ascendco.outlier_rule REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_push_audit_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for dba.push_audit trigger_push_audit_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'dba', 'trigger_push_audit_after_delete', '', 'dba.push_audit trigger_push_audit_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''dba''      and table_name                = ''push_audit''      and trigger_schema            = ''dba''      and trigger_name              = ''trigger_push_audit_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_push_audit_after_delete AFTER DELETE ON dba.push_audit REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'dba', 'trigger_push_audit_after_delete', '', 'dba.push_audit trigger_push_audit_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''dba''   and table_name           = ''push_audit''   and trigger_schema       = ''dba''   and trigger_name         = ''trigger_push_audit_after_delete''', 'CREATE TRIGGER trigger_push_audit_after_delete AFTER DELETE ON dba.push_audit REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_push_log_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.push_log trigger_push_log_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_push_log_after_delete', '', 'ascendco.push_log trigger_push_log_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''push_log''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_push_log_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_push_log_after_delete AFTER DELETE ON ascendco.push_log REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_push_log_after_delete', '', 'ascendco.push_log trigger_push_log_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''push_log''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_push_log_after_delete''', 'CREATE TRIGGER trigger_push_log_after_delete AFTER DELETE ON ascendco.push_log REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_push_target_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for dba.push_target trigger_push_target_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'dba', 'trigger_push_target_after_delete', '', 'dba.push_target trigger_push_target_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''dba''      and table_name                = ''push_target''      and trigger_schema            = ''dba''      and trigger_name              = ''trigger_push_target_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_push_target_after_delete AFTER DELETE ON dba.push_target REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'dba', 'trigger_push_target_after_delete', '', 'dba.push_target trigger_push_target_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''dba''   and table_name           = ''push_target''   and trigger_schema       = ''dba''   and trigger_name         = ''trigger_push_target_after_delete''', 'CREATE TRIGGER trigger_push_target_after_delete AFTER DELETE ON dba.push_target REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_q_audit_step_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.q_audit_step trigger_q_audit_step_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_q_audit_step_after_delete', '', 'ascendco.q_audit_step trigger_q_audit_step_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''q_audit_step''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_q_audit_step_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_q_audit_step_after_delete AFTER DELETE ON ascendco.q_audit_step REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_q_audit_step_after_delete', '', 'ascendco.q_audit_step trigger_q_audit_step_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''q_audit_step''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_q_audit_step_after_delete''', 'CREATE TRIGGER trigger_q_audit_step_after_delete AFTER DELETE ON ascendco.q_audit_step REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_q_event_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.q_event trigger_q_event_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_q_event_after_delete', '', 'ascendco.q_event trigger_q_event_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''q_event''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_q_event_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_q_event_after_delete AFTER DELETE ON ascendco.q_event REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_q_event_after_delete', '', 'ascendco.q_event trigger_q_event_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''q_event''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_q_event_after_delete''', 'CREATE TRIGGER trigger_q_event_after_delete AFTER DELETE ON ascendco.q_event REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_q_event_audit_step_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.q_event_audit_step trigger_q_event_audit_step_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_q_event_audit_step_after_delete', '', 'ascendco.q_event_audit_step trigger_q_event_audit_step_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''q_event_audit_step''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_q_event_audit_step_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_q_event_audit_step_after_delete AFTER DELETE ON ascendco.q_event_audit_step REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_q_event_audit_step_after_delete', '', 'ascendco.q_event_audit_step trigger_q_event_audit_step_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''q_event_audit_step''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_q_event_audit_step_after_delete''', 'CREATE TRIGGER trigger_q_event_audit_step_after_delete AFTER DELETE ON ascendco.q_event_audit_step REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_q_event_person_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.q_event_person trigger_q_event_person_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_q_event_person_after_delete', '', 'ascendco.q_event_person trigger_q_event_person_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''q_event_person''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_q_event_person_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_q_event_person_after_delete AFTER DELETE ON ascendco.q_event_person REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_q_event_person_after_delete', '', 'ascendco.q_event_person trigger_q_event_person_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''q_event_person''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_q_event_person_after_delete''', 'CREATE TRIGGER trigger_q_event_person_after_delete AFTER DELETE ON ascendco.q_event_person REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_q_level_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.q_level trigger_q_level_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_q_level_after_delete', '', 'ascendco.q_level trigger_q_level_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''q_level''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_q_level_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_q_level_after_delete AFTER DELETE ON ascendco.q_level REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_q_level_after_delete', '', 'ascendco.q_level trigger_q_level_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''q_level''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_q_level_after_delete''', 'CREATE TRIGGER trigger_q_level_after_delete AFTER DELETE ON ascendco.q_level REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_q_subtype_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.q_subtype trigger_q_subtype_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_q_subtype_after_delete', '', 'ascendco.q_subtype trigger_q_subtype_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''q_subtype''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_q_subtype_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_q_subtype_after_delete AFTER DELETE ON ascendco.q_subtype REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_q_subtype_after_delete', '', 'ascendco.q_subtype trigger_q_subtype_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''q_subtype''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_q_subtype_after_delete''', 'CREATE TRIGGER trigger_q_subtype_after_delete AFTER DELETE ON ascendco.q_subtype REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_q_type_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.q_type trigger_q_type_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_q_type_after_delete', '', 'ascendco.q_type trigger_q_type_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''q_type''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_q_type_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_q_type_after_delete AFTER DELETE ON ascendco.q_type REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_q_type_after_delete', '', 'ascendco.q_type trigger_q_type_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''q_type''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_q_type_after_delete''', 'CREATE TRIGGER trigger_q_type_after_delete AFTER DELETE ON ascendco.q_type REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_record_changes_log_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.record_changes_log trigger_record_changes_log_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_record_changes_log_after_delete', '', 'ascendco.record_changes_log trigger_record_changes_log_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''record_changes_log''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_record_changes_log_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_record_changes_log_after_delete AFTER DELETE ON ascendco.record_changes_log REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_record_changes_log_after_delete', '', 'ascendco.record_changes_log trigger_record_changes_log_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''record_changes_log''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_record_changes_log_after_delete''', 'CREATE TRIGGER trigger_record_changes_log_after_delete AFTER DELETE ON ascendco.record_changes_log REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_record_changes_log_detail_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.record_changes_log_detail trigger_record_changes_log_detail_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_record_changes_log_detail_after_delete', '', 'ascendco.record_changes_log_detail trigger_record_changes_log_detail_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''record_changes_log_detail''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_record_changes_log_detail_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_record_changes_log_detail_after_delete AFTER DELETE ON ascendco.record_changes_log_detail REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_record_changes_log_detail_after_delete', '', 'ascendco.record_changes_log_detail trigger_record_changes_log_detail_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''record_changes_log_detail''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_record_changes_log_detail_after_delete''', 'CREATE TRIGGER trigger_record_changes_log_detail_after_delete AFTER DELETE ON ascendco.record_changes_log_detail REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_record_changes_log_detail_after_insert.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.record_changes_log_detail trigger_record_changes_log_detail_after_insert trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_record_changes_log_detail_after_insert', '', 'ascendco.record_changes_log_detail trigger_record_changes_log_detail_after_insert existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''record_changes_log_detail''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_record_changes_log_detail_after_insert''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_record_changes_log_detail_after_insert()''     and definition                = ''CREATE TRIGGER trigger_record_changes_log_detail_after_insert AFTER INSERT ON ascendco.record_changes_log_detail FOR EACH ROW EXECUTE FUNCTION trigger_function_record_changes_log_detail_after_insert()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_record_changes_log_detail_after_insert', '', 'ascendco.record_changes_log_detail trigger_record_changes_log_detail_after_insert definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''record_changes_log_detail''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_record_changes_log_detail_after_insert''', 'CREATE TRIGGER trigger_record_changes_log_detail_after_insert AFTER INSERT ON ascendco.record_changes_log_detail FOR EACH ROW EXECUTE FUNCTION trigger_function_record_changes_log_detail_after_insert()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_record_changes_log_detail_before_insert.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.record_changes_log_detail trigger_record_changes_log_detail_before_insert trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_record_changes_log_detail_before_insert', '', 'ascendco.record_changes_log_detail trigger_record_changes_log_detail_before_insert existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''record_changes_log_detail''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_record_changes_log_detail_before_insert''     and action_timing             = ''BEFORE''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_record_changes_log_detail_before_insert()''     and definition                = ''CREATE TRIGGER trigger_record_changes_log_detail_before_insert BEFORE INSERT ON ascendco.record_changes_log_detail FOR EACH ROW EXECUTE FUNCTION trigger_function_record_changes_log_detail_before_insert()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_record_changes_log_detail_before_insert', '', 'ascendco.record_changes_log_detail trigger_record_changes_log_detail_before_insert definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''record_changes_log_detail''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_record_changes_log_detail_before_insert''', 'CREATE TRIGGER trigger_record_changes_log_detail_before_insert BEFORE INSERT ON ascendco.record_changes_log_detail FOR EACH ROW EXECUTE FUNCTION trigger_function_record_changes_log_detail_before_insert()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_record_changes_log_detail_before_upsert.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.record_changes_log_detail trigger_record_changes_log_detail_before_upsert trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_record_changes_log_detail_before_upsert', '', 'ascendco.record_changes_log_detail trigger_record_changes_log_detail_before_upsert existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''record_changes_log_detail''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_record_changes_log_detail_before_upsert''     and action_timing             = ''BEFORE''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_record_changes_log_detail_stop_duplicates()''     and definition                = ''CREATE TRIGGER trigger_record_changes_log_detail_before_upsert BEFORE INSERT OR UPDATE ON ascendco.record_changes_log_detail FOR EACH ROW EXECUTE FUNCTION trigger_function_record_changes_log_detail_stop_duplicates()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_record_changes_log_detail_before_upsert', '', 'ascendco.record_changes_log_detail trigger_record_changes_log_detail_before_upsert definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''record_changes_log_detail''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_record_changes_log_detail_before_upsert''', 'CREATE TRIGGER trigger_record_changes_log_detail_before_upsert BEFORE INSERT OR UPDATE ON ascendco.record_changes_log_detail FOR EACH ROW EXECUTE FUNCTION trigger_function_record_changes_log_detail_stop_duplicates()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_rep_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.rep trigger_rep_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_rep_after_delete', '', 'ascendco.rep trigger_rep_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''rep''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_rep_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_rep_after_delete AFTER DELETE ON ascendco.rep REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_rep_after_delete', '', 'ascendco.rep trigger_rep_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''rep''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_rep_after_delete''', 'CREATE TRIGGER trigger_rep_after_delete AFTER DELETE ON ascendco.rep REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_row_compare_before_upsert.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.row_compare trigger_row_compare_before_upsert trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_row_compare_before_upsert', '', 'ascendco.row_compare trigger_row_compare_before_upsert existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''row_compare''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_row_compare_before_upsert''     and action_timing             = ''BEFORE''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_row_compare_upsert()''     and definition                = ''CREATE TRIGGER trigger_row_compare_before_upsert BEFORE INSERT OR UPDATE ON ascendco.row_compare FOR EACH ROW EXECUTE FUNCTION trigger_function_row_compare_upsert()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_row_compare_before_upsert', '', 'ascendco.row_compare trigger_row_compare_before_upsert definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''row_compare''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_row_compare_before_upsert''', 'CREATE TRIGGER trigger_row_compare_before_upsert BEFORE INSERT OR UPDATE ON ascendco.row_compare FOR EACH ROW EXECUTE FUNCTION trigger_function_row_compare_upsert()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_specialty_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.specialty trigger_specialty_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_specialty_after_delete', '', 'ascendco.specialty trigger_specialty_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''specialty''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_specialty_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_specialty_after_delete AFTER DELETE ON ascendco.specialty REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_specialty_after_delete', '', 'ascendco.specialty trigger_specialty_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''specialty''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_specialty_after_delete''', 'CREATE TRIGGER trigger_specialty_after_delete AFTER DELETE ON ascendco.specialty REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_sterilize_method_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.sterilize_method trigger_sterilize_method_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_sterilize_method_after_delete', '', 'ascendco.sterilize_method trigger_sterilize_method_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''sterilize_method''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_sterilize_method_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_sterilize_method_after_delete AFTER DELETE ON ascendco.sterilize_method REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_sterilize_method_after_delete', '', 'ascendco.sterilize_method trigger_sterilize_method_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''sterilize_method''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_sterilize_method_after_delete''', 'CREATE TRIGGER trigger_sterilize_method_after_delete AFTER DELETE ON ascendco.sterilize_method REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_sterilize_params_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.sterilize_params trigger_sterilize_params_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_sterilize_params_after_delete', '', 'ascendco.sterilize_params trigger_sterilize_params_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''sterilize_params''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_sterilize_params_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_sterilize_params_after_delete AFTER DELETE ON ascendco.sterilize_params REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_sterilize_params_after_delete', '', 'ascendco.sterilize_params trigger_sterilize_params_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''sterilize_params''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_sterilize_params_after_delete''', 'CREATE TRIGGER trigger_sterilize_params_after_delete AFTER DELETE ON ascendco.sterilize_params REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_sterilizer_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.sterilizer trigger_sterilizer_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_sterilizer_after_delete', '', 'ascendco.sterilizer trigger_sterilizer_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''sterilizer''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_sterilizer_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_sterilizer_after_delete AFTER DELETE ON ascendco.sterilizer REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_sterilizer_after_delete', '', 'ascendco.sterilizer trigger_sterilizer_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''sterilizer''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_sterilizer_after_delete''', 'CREATE TRIGGER trigger_sterilizer_after_delete AFTER DELETE ON ascendco.sterilizer REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_sterilizer_load_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.sterilizer_load trigger_sterilizer_load_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_sterilizer_load_after_delete', '', 'ascendco.sterilizer_load trigger_sterilizer_load_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''sterilizer_load''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_sterilizer_load_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_sterilizer_load_after_delete AFTER DELETE ON ascendco.sterilizer_load REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_sterilizer_load_after_delete', '', 'ascendco.sterilizer_load trigger_sterilizer_load_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''sterilizer_load''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_sterilizer_load_after_delete''', 'CREATE TRIGGER trigger_sterilizer_load_after_delete AFTER DELETE ON ascendco.sterilizer_load REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_sterilizer_log_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.sterilizer_log trigger_sterilizer_log_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_sterilizer_log_after_delete', '', 'ascendco.sterilizer_log trigger_sterilizer_log_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''sterilizer_log''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_sterilizer_log_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_sterilizer_log_after_delete AFTER DELETE ON ascendco.sterilizer_log REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_sterilizer_log_after_delete', '', 'ascendco.sterilizer_log trigger_sterilizer_log_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''sterilizer_log''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_sterilizer_log_after_delete''', 'CREATE TRIGGER trigger_sterilizer_log_after_delete AFTER DELETE ON ascendco.sterilizer_log REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_sup_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.sup trigger_sup_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_sup_after_delete', '', 'ascendco.sup trigger_sup_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''sup''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_sup_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_sup_after_delete AFTER DELETE ON ascendco.sup REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_sup_after_delete', '', 'ascendco.sup trigger_sup_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''sup''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_sup_after_delete''', 'CREATE TRIGGER trigger_sup_after_delete AFTER DELETE ON ascendco.sup REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_sup_parent_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.sup_parent trigger_sup_parent_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_sup_parent_after_delete', '', 'ascendco.sup_parent trigger_sup_parent_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''sup_parent''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_sup_parent_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_sup_parent_after_delete AFTER DELETE ON ascendco.sup_parent REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_sup_parent_after_delete', '', 'ascendco.sup_parent trigger_sup_parent_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''sup_parent''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_sup_parent_after_delete''', 'CREATE TRIGGER trigger_sup_parent_after_delete AFTER DELETE ON ascendco.sup_parent REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:trigger_web_user_after_delete.tests.sql------------------------------------------------------------------------------------- Checks for ascendco.web_user trigger_web_user_after_delete trigger------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_web_user_after_delete', '', 'ascendco.web_user trigger_web_user_after_delete existence check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce(action_condition,'''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name)) as definition from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select count(*)   from trigger_grouping_search  where table_schema              = ''ascendco''      and table_name                = ''web_user''      and trigger_schema            = ''ascendco''      and trigger_name              = ''trigger_web_user_after_delete''     and action_timing             = ''AFTER''     and action_condition          = ''''     and action_statement          = ''EXECUTE FUNCTION trigger_function_log_deletion_count()''     and definition                = ''CREATE TRIGGER trigger_web_user_after_delete AFTER DELETE ON ascendco.web_user REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()''   and trigger_name       not like ''RI_ConstraintTrigger_%''', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Trigger', 'ascendco', 'trigger_web_user_after_delete', '', 'ascendco.web_user trigger_web_user_after_delete definition check', 'WITH trigger_grouping_search AS (select event_object_schema as table_schema,       event_object_table as table_name,       trigger_name,       ''Trigger'' as resource_type_name,       trigger_schema as trigger_schema,       string_agg(event_manipulation, '','' order by event_manipulation) as event,       action_timing,       coalesce (action_condition, '''') as action_condition,       action_statement,       pg_get_triggerdef((select oid from pg_trigger where tgname = trigger_name))  as definition       from information_schema.triggersgroup by table_schema, table_name, trigger_schema, trigger_name,  action_timing, action_condition, action_statementorder by table_schema,         table_name)select definition  from trigger_grouping_search  where table_schema         = ''ascendco''   and table_name           = ''web_user''   and trigger_schema       = ''ascendco''   and trigger_name         = ''trigger_web_user_after_delete''', 'CREATE TRIGGER trigger_web_user_after_delete AFTER DELETE ON ascendco.web_user REFERENCING OLD TABLE AS deleted_rows FOR EACH STATEMENT EXECUTE FUNCTION trigger_function_log_deletion_count()', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:triggers:triggers_list.test.sqlselect * from test_case_setup('Trigger', 'Global', 'triggers_list', '', 'Trigger list comparison', 'select string_agg(tgname, '','' order by tgname) as trigger_list from pg_trigger where tgname not like ''RI_ConstraintTrigger_%'';', 'calendar_day_before_insert,calendar_year_before_upsert,trigger_activity_after_delete,trigger_activity_before_truncate,trigger_analytic_productivity_after_delete,trigger_analytic_productivity_before_truncate,trigger_analytic_scan_after_delete,trigger_analytic_scan_before_truncate,trigger_analytic_sterilizer_load_after_delete,trigger_analytic_sterilizer_load_before_truncate,trigger_analytic_sterilizer_loadinv_after_delete,trigger_analytic_sterilizer_loadinv_before_truncate,trigger_analytic_work_after_delete,trigger_analytic_work_before_truncate,trigger_assembly_after_delete,trigger_assembly_before_truncate,trigger_assembly_prods_after_delete,trigger_assembly_prods_before_truncate,trigger_clinic_after_delete,trigger_clinic_before_truncate,trigger_data_file_info_after_delete,trigger_data_file_info_before_truncate,trigger_data_file_info_before_update,trigger_domo_dataset_after_delete,trigger_domo_dataset_before_truncate,trigger_domo_passthrough_after_delete,trigger_domo_passthrough_before_truncate,trigger_facility_activities_after_delete,trigger_facility_activities_before_truncate,trigger_facility_after_delete,trigger_facility_before_truncate,trigger_facility_department_after_delete,trigger_facility_department_before_truncate,trigger_facility_location_after_delete,trigger_facility_location_before_truncate,trigger_form_template_after_delete,trigger_form_template_before_truncate,trigger_hsys_after_delete,trigger_hsys_before_truncate,trigger_inv_after_delete,trigger_inv_before_truncate,trigger_item_after_delete,trigger_item_arch_after_delete,trigger_item_arch_before_truncate,trigger_item_before_truncate,trigger_item_type_after_delete,trigger_item_type_before_truncate,trigger_loaner_after_delete,trigger_loaner_before_truncate,trigger_loaner_case_after_delete,trigger_loaner_case_before_truncate,trigger_loaner_item_after_delete,trigger_loaner_item_before_truncate,trigger_loaner_iteminv_after_delete,trigger_loaner_iteminv_before_truncate,trigger_outlier_change_before_upsert,trigger_outlier_rule_after_delete,trigger_outlier_rule_before_truncate,trigger_push_audit_after_delete,trigger_push_audit_before_truncate,trigger_push_log_after_delete,trigger_push_log_before_truncate,trigger_push_target_after_delete,trigger_push_target_before_truncate,trigger_q_audit_step_after_delete,trigger_q_audit_step_before_truncate,trigger_q_event_after_delete,trigger_q_event_audit_step_after_delete,trigger_q_event_audit_step_before_truncate,trigger_q_event_before_truncate,trigger_q_event_person_after_delete,trigger_q_event_person_before_truncate,trigger_q_level_after_delete,trigger_q_level_before_truncate,trigger_q_subtype_after_delete,trigger_q_subtype_before_truncate,trigger_q_type_after_delete,trigger_q_type_before_truncate,trigger_record_changes_log_after_delete,trigger_record_changes_log_before_truncate,trigger_record_changes_log_detail_after_delete,trigger_record_changes_log_detail_after_insert,trigger_record_changes_log_detail_before_insert,trigger_record_changes_log_detail_before_truncate,trigger_record_changes_log_detail_before_upsert,trigger_rep_after_delete,trigger_rep_before_truncate,trigger_row_compare_before_upsert,trigger_specialty_after_delete,trigger_specialty_before_truncate,trigger_sterilize_method_after_delete,trigger_sterilize_method_before_truncate,trigger_sterilize_params_after_delete,trigger_sterilize_params_before_truncate,trigger_sterilizer_after_delete,trigger_sterilizer_before_truncate,trigger_sterilizer_load_after_delete,trigger_sterilizer_load_before_truncate,trigger_sterilizer_log_after_delete,trigger_sterilizer_log_before_truncate,trigger_sup_after_delete,trigger_sup_before_truncate,trigger_sup_parent_after_delete,trigger_sup_parent_before_truncate,trigger_web_user_after_delete,trigger_web_user_before_truncate', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:activity_domo.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','activity_domo','','View column strict check for api.activity_domo','select * from api.activity_domo limit 0;','id	FacilityName	HsysName	UserName	ActivityName	ActivitiesID	OtherActivityName	StartTime_DTS	StartTime_Local_DTS	DoneTime_DTS	Duration_Seconds	Duration_Mins	Duration_Hours	ActivityTime_Date	ActivityTime_DayOfWeek	ActivityTime_DayName	ActivityTime_FiscalWeek	ActivityTime_FiscalWeekNo	ActivityTime_MonthNo	ActivityTime_MonthName	ActivityTime_FiscalMonthNo	ActivityTime_FiscalMonthName	ActivityTime_Year	ActivityTime_YearNo	ActivityTime_FiscalYearNo	ActivityTime_HourOfDay	ActivityTime_HourBin	ActivityTime_HourBinName','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','activity_domo','','View column orderless check for api.activity_domo','select * from api.activity_domo limit 0;','ActivitiesID	ActivityName	ActivityTime_Date	ActivityTime_DayName	ActivityTime_DayOfWeek	ActivityTime_FiscalMonthName	ActivityTime_FiscalMonthNo	ActivityTime_FiscalWeek	ActivityTime_FiscalWeekNo	ActivityTime_FiscalYearNo	ActivityTime_HourBin	ActivityTime_HourBinName	ActivityTime_HourOfDay	ActivityTime_MonthName	ActivityTime_MonthNo	ActivityTime_Year	ActivityTime_YearNo	DoneTime_DTS	Duration_Hours	Duration_Mins	Duration_Seconds	FacilityName	HsysName	id	OtherActivityName	StartTime_DTS	StartTime_Local_DTS	UserName','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:analytic_productivity_domo.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','analytic_productivity_domo','','View column strict check for api.analytic_productivity_domo','select * from api.analytic_productivity_domo limit 0;','HsysName	FacilityName	LocationName	UserName	InvName	NumInst	AssemblyMinute	PauseMinute	AssemblyHour	PauseHour	Specialty	TrayOrPack	ItemType	ItemName	Points	PointsPerHour	Start_UTC	Start_Local	Start_Date	StartDate	Start_DayOfWeek	Start_DayName	Start_FiscalWeek	Start_FiscalWeekNo	Start_MonthNo	Start_MonthName	Start_FiscalMonthNo	Start_FiscalMonthName	Start_Year	Start_YearNo	Start_FiscalYear	Start_FiscalYearNo	Start_HourOfDay	Start_HourBin	Start_HourBinName	End_UTC	End_Local	DateTime_Local	End_Date	End_DayOfWeek	End_DayName	End_FiscalWeek	End_FiscalWeekNo	End_MonthNo	End_MonthName	End_FiscalMonthNo	End_FiscalMonthName	End_Year	End_YearNo	End_FiscalYear	End_FiscalYearNo	End_HourOfDay	End_HourBin	End_HourBinName	NumInstValuePercentile	AssemblyMinuteValuePercentile	PauseMinuteValuePercentile	PointsValuePercentile	PointsPerHourValuePercentile','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','analytic_productivity_domo','','View column orderless check for api.analytic_productivity_domo','select * from api.analytic_productivity_domo limit 0;','AssemblyHour	AssemblyMinute	AssemblyMinuteValuePercentile	DateTime_Local	End_Date	End_DayName	End_DayOfWeek	End_FiscalMonthName	End_FiscalMonthNo	End_FiscalWeek	End_FiscalWeekNo	End_FiscalYear	End_FiscalYearNo	End_HourBin	End_HourBinName	End_HourOfDay	End_Local	End_MonthName	End_MonthNo	End_UTC	End_Year	End_YearNo	FacilityName	HsysName	InvName	ItemName	ItemType	LocationName	NumInst	NumInstValuePercentile	PauseHour	PauseMinute	PauseMinuteValuePercentile	Points	PointsPerHour	PointsPerHourValuePercentile	PointsValuePercentile	Specialty	Start_Date	Start_DayName	Start_DayOfWeek	Start_FiscalMonthName	Start_FiscalMonthNo	Start_FiscalWeek	Start_FiscalWeekNo	Start_FiscalYear	Start_FiscalYearNo	Start_HourBin	Start_HourBinName	Start_HourOfDay	Start_Local	Start_MonthName	Start_MonthNo	Start_UTC	Start_Year	Start_YearNo	StartDate	TrayOrPack	UserName','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:analytic_productivity_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','analytic_productivity_plus','','View column strict check for api.analytic_productivity_plus','select * from api.analytic_productivity_plus limit 0;','id	pg_con_id	data_file_id	marked_for_deletion	hsys_id	facility_id	facility_location_id	specialty_id	item_type_id	user_name	inv_name	item_name	tray_or_pack	num_inst	assembly_minutes	pause_minutes	points	points_per_hour	assembly_hour	pause_hour	start_utc	start_local	end_utc	end_local	hsys_name	facility_name	tz_name	location_name	specialty_name	item_type_name	server_name_','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','analytic_productivity_plus','','View column orderless check for api.analytic_productivity_plus','select * from api.analytic_productivity_plus limit 0;','assembly_hour	assembly_minutes	data_file_id	end_local	end_utc	facility_id	facility_location_id	facility_name	hsys_id	hsys_name	id	inv_name	item_name	item_type_id	item_type_name	location_name	marked_for_deletion	num_inst	pause_hour	pause_minutes	pg_con_id	points	points_per_hour	server_name_	specialty_id	specialty_name	start_local	start_utc	tray_or_pack	tz_name	user_name','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:analytic_scan_domo.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','analytic_scan_domo','','View column strict check for api.analytic_scan_domo','select * from api.analytic_scan_domo limit 0;','ScannedType	AssociatedTo	UserName	InvName	LocationDesc	NumInst	TrayOrPack	ItemName	ScanTime_UTC	ScanTime_Local	DateTime_Local	HsysName	FacilityName	Specialty	ScanTime_Date	ScanTime_DayOfWeek	ScanTime_DayName	ScanTime_FiscalWeek	ScanTime_FiscalWeekNo	ScanTime_HourOfDay	ScanTime_HourBin	ScanTime_HourBinName	NumInstPercentile','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','analytic_scan_domo','','View column orderless check for api.analytic_scan_domo','select * from api.analytic_scan_domo limit 0;','AssociatedTo	DateTime_Local	FacilityName	HsysName	InvName	ItemName	LocationDesc	NumInst	NumInstPercentile	ScannedType	ScanTime_Date	ScanTime_DayName	ScanTime_DayOfWeek	ScanTime_FiscalWeek	ScanTime_FiscalWeekNo	ScanTime_HourBin	ScanTime_HourBinName	ScanTime_HourOfDay	ScanTime_Local	ScanTime_UTC	Specialty	TrayOrPack	UserName','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:analytic_scan_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','analytic_scan_plus','','View column strict check for api.analytic_scan_plus','select * from api.analytic_scan_plus limit 0;','id	pg_con_id	marked_for_deletion	hsys_id	facility_id	facility_location_id	location_description	specialty_id	scanned_type	associated_to	user_name	inv_name	num_inst	tray_or_pack	item_name	scan_time_utc_dts	scan_time_local_dts	hsys_name	facility_name	tz_name	location_name	specialty_name	server_name_','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','analytic_scan_plus','','View column orderless check for api.analytic_scan_plus','select * from api.analytic_scan_plus limit 0;','associated_to	facility_id	facility_location_id	facility_name	hsys_id	hsys_name	id	inv_name	item_name	location_description	location_name	marked_for_deletion	num_inst	pg_con_id	scan_time_local_dts	scan_time_utc_dts	scanned_type	server_name_	specialty_id	specialty_name	tray_or_pack	tz_name	user_name','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:analytic_sterilizer_load_domo.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','analytic_sterilizer_load_domo','','View column strict check for api.analytic_sterilizer_load_domo','select * from api.analytic_sterilizer_load_domo limit 0;','HsysName	FacilityName	UserName	Status	Sterilizer	Method	Params	isIUSS	NumTrays	NumPacks	NumInst	Built_UTC	BuiltDTS	Built_Local	Built_Date	Built_DayOfWeek	Built_DayName	Built_FiscalWeek	Built_FiscalWeekNo	Built_HourOfDay	Built_HourBin	Built_HourBinName	Done_UTC	DoneDTS	Done_Local	DateTime_Local	Done_Date	Done_DayOfWeek	Done_DayName	Done_FiscalWeek	Done_FiscalWeekNo	Done_HourOfDay	Done_HourBin	Done_HourBinName	NumInstValuePercentile	NumPacksValuePercentile	NumTraysValuePercentile	sterilizer_load_id','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','analytic_sterilizer_load_domo','','View column orderless check for api.analytic_sterilizer_load_domo','select * from api.analytic_sterilizer_load_domo limit 0;','Built_Date	Built_DayName	Built_DayOfWeek	Built_FiscalWeek	Built_FiscalWeekNo	Built_HourBin	Built_HourBinName	Built_HourOfDay	Built_Local	Built_UTC	BuiltDTS	DateTime_Local	Done_Date	Done_DayName	Done_DayOfWeek	Done_FiscalWeek	Done_FiscalWeekNo	Done_HourBin	Done_HourBinName	Done_HourOfDay	Done_Local	Done_UTC	DoneDTS	FacilityName	HsysName	isIUSS	Method	NumInst	NumInstValuePercentile	NumPacks	NumPacksValuePercentile	NumTrays	NumTraysValuePercentile	Params	Status	Sterilizer	sterilizer_load_id	UserName','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:analytic_sterilizer_load_percentiles_domo.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','analytic_sterilizer_load_percentiles_domo','','View column strict check for api.analytic_sterilizer_load_percentiles_domo','select * from api.analytic_sterilizer_load_percentiles_domo limit 0;','HsysName	FacilityName	NumTrays	NumPacks	NumInst	NumTraysFrequency	NumTraysValuePercentile	NumTraysFrequencyPercentile	NumPacksFrequency	NumPacksValuePercentile	NumPacksFrequencyPercentile	NumInstFrequency	NumInstValuePercentile	NumInstFrequencyPercentile','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','analytic_sterilizer_load_percentiles_domo','','View column orderless check for api.analytic_sterilizer_load_percentiles_domo','select * from api.analytic_sterilizer_load_percentiles_domo limit 0;','FacilityName	HsysName	NumInst	NumInstFrequency	NumInstFrequencyPercentile	NumInstValuePercentile	NumPacks	NumPacksFrequency	NumPacksFrequencyPercentile	NumPacksValuePercentile	NumTrays	NumTraysFrequency	NumTraysFrequencyPercentile	NumTraysValuePercentile','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:analytic_sterilizer_load_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','analytic_sterilizer_load_plus','','View column strict check for api.analytic_sterilizer_load_plus','select * from api.analytic_sterilizer_load_plus limit 0;','id	sterilize_method_id	sterilize_params_id	sterilizer_id	facility_id	web_user_id	status_building_dts	status_building_local_dts	status_done_dts	status_done_local_dts	status	is_iuss	instruments_count	packs_count	trays_count	method_name	params_name	sterilizer_name	facility_name	tz_name	server_name_	name_full	building_hour_gin	hsys_name','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','analytic_sterilizer_load_plus','','View column orderless check for api.analytic_sterilizer_load_plus','select * from api.analytic_sterilizer_load_plus limit 0;','building_hour_gin	facility_id	facility_name	hsys_name	id	instruments_count	is_iuss	method_name	name_full	packs_count	params_name	server_name_	status	status_building_dts	status_building_local_dts	status_done_dts	status_done_local_dts	sterilize_method_id	sterilize_params_id	sterilizer_id	sterilizer_name	trays_count	tz_name	web_user_id','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:analytic_sterilizer_loadinv_domo.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','analytic_sterilizer_loadinv_domo','','View column strict check for api.analytic_sterilizer_loadinv_domo','select * from api.analytic_sterilizer_loadinv_domo limit 0;','AnalyticSterilizerLoadinvID	HsysName	FacilityName	UserName	Specialty	ItemType	ItemName	InvName	InvName_TheirName	NumInst	Sterilizer	Method	Params	isIUSS	Qty	Category	ClinicDeptName	Status	DoneDTS	Done_Local	DateTime_Local	Done_Date	Done_DayOfWeek	Done_DayName	Done_FiscalWeek	Done_FiscalWeekNo	Done_MonthNo	Done_MonthName	Done_FiscalMonthNo	Done_FiscalMonthName	Done_Year	Done_YearNo	Done_FiscalYear	Done_FiscalYearNo	Done_HourOfDay	Done_HourBin	Done_HourBinName	Processing_Seconds	sterilizer_load_id	NumInstPercentile	QtyPercentile','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','analytic_sterilizer_loadinv_domo','','View column orderless check for api.analytic_sterilizer_loadinv_domo','select * from api.analytic_sterilizer_loadinv_domo limit 0;','AnalyticSterilizerLoadinvID	Category	ClinicDeptName	DateTime_Local	Done_Date	Done_DayName	Done_DayOfWeek	Done_FiscalMonthName	Done_FiscalMonthNo	Done_FiscalWeek	Done_FiscalWeekNo	Done_FiscalYear	Done_FiscalYearNo	Done_HourBin	Done_HourBinName	Done_HourOfDay	Done_Local	Done_MonthName	Done_MonthNo	Done_Year	Done_YearNo	DoneDTS	FacilityName	HsysName	InvName	InvName_TheirName	isIUSS	ItemName	ItemType	Method	NumInst	NumInstPercentile	Params	Processing_Seconds	Qty	QtyPercentile	Specialty	Status	Sterilizer	sterilizer_load_id	UserName','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:analytic_sterilizer_loadinv_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','analytic_sterilizer_loadinv_plus','','View column strict check for api.analytic_sterilizer_loadinv_plus','select * from api.analytic_sterilizer_loadinv_plus limit 0;','id	item_id	data_file_id	marked_for_deletion	facility_id	hsys_id	item_type_id	speciality_id	sterilize_method_id	sterilize_params_id	sterilizer_id	web_user_id	inv_name_provided	is_iuss	num_inst	num_inst_extended	qty	category	clinic_dept_name	status	done_dts	done_local_dts	processing_seconds	method_name	params_name	sterilizer_name	facility_name	tz_name	server_name_	name_full	hsys_name	inv_their_name	item_name	specialty_name	item_type_name','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','analytic_sterilizer_loadinv_plus','','View column orderless check for api.analytic_sterilizer_loadinv_plus','select * from api.analytic_sterilizer_loadinv_plus limit 0;','category	clinic_dept_name	data_file_id	done_dts	done_local_dts	facility_id	facility_name	hsys_id	hsys_name	id	inv_name_provided	inv_their_name	is_iuss	item_id	item_name	item_type_id	item_type_name	marked_for_deletion	method_name	name_full	num_inst	num_inst_extended	params_name	processing_seconds	qty	server_name_	speciality_id	specialty_name	status	sterilize_method_id	sterilize_params_id	sterilizer_id	sterilizer_name	tz_name	web_user_id','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:analytic_work_domo.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','analytic_work_domo','','View column strict check for api.analytic_work_domo','select * from api.analytic_work_domo limit 0;','HsysName	FacilityName	UserName	InvName	NumItems	NumInst	MissingInst	Points	Specialty	TrayOrPack	NumPacks	NumTrays	ItemType	ItemName	Activity	Description	Duration	DateTime	Start_UTC	Start_Local	Start_Date	StartDate	Start_DayOfWeek	Start_DayName	Start_FiscalWeek	Start_FiscalWeekNo	Start_MonthNo	Start_MonthName	Start_FiscalMonthNo	Start_FiscalMonthName	Start_Year	Start_YearNo	Start_FiscalYear	Start_FiscalYearNo	Start_HourOfDay	Start_HourBin	Start_HourBinName	End_UTC	End_Local	End_Date	EndDate	End_DayOfWeek	End_DayName	End_FiscalWeek	End_FiscalWeekNo	End_MonthNo	End_MonthName	End_FiscalMonthNo	End_FiscalMonthName	End_Year	End_YearNo	End_FiscalYear	End_FiscalYearNo	End_HourOfDay	End_HourBin	End_HourBinName	activity_id	assembly_id	inv_id	scan_id	sterilizer_load_id	sterilizer_loadinv_id	key_supplement','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','analytic_work_domo','','View column orderless check for api.analytic_work_domo','select * from api.analytic_work_domo limit 0;','Activity	activity_id	assembly_id	DateTime	Description	Duration	End_Date	End_DayName	End_DayOfWeek	End_FiscalMonthName	End_FiscalMonthNo	End_FiscalWeek	End_FiscalWeekNo	End_FiscalYear	End_FiscalYearNo	End_HourBin	End_HourBinName	End_HourOfDay	End_Local	End_MonthName	End_MonthNo	End_UTC	End_Year	End_YearNo	EndDate	FacilityName	HsysName	inv_id	InvName	ItemName	ItemType	key_supplement	MissingInst	NumInst	NumItems	NumPacks	NumTrays	Points	scan_id	Specialty	Start_Date	Start_DayName	Start_DayOfWeek	Start_FiscalMonthName	Start_FiscalMonthNo	Start_FiscalWeek	Start_FiscalWeekNo	Start_FiscalYear	Start_FiscalYearNo	Start_HourBin	Start_HourBinName	Start_HourOfDay	Start_Local	Start_MonthName	Start_MonthNo	Start_UTC	Start_Year	Start_YearNo	StartDate	sterilizer_load_id	sterilizer_loadinv_id	TrayOrPack	UserName','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:assembly_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','assembly_plus','','View column strict check for api.assembly_plus','select * from api.assembly_plus limit 0;','id	data_file_id	server_name_	created_by_user_id	created_by_lookup	created_by	done_by_user_id	done_by	facility_location_id	faciility_location	inv_id	last_updated_by_data_file_id	updated_by_user_id	marked_for_deletion	is_complete	is_quick_turn	con_id	difficulty	quantity	sequence_no	num_inst	points	done_dts	created_dts	updated_dts	missing_list	priority	status	updated_by','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','assembly_plus','','View column orderless check for api.assembly_plus','select * from api.assembly_plus limit 0;','con_id	created_by	created_by_lookup	created_by_user_id	created_dts	data_file_id	difficulty	done_by	done_by_user_id	done_dts	faciility_location	facility_location_id	id	inv_id	is_complete	is_quick_turn	last_updated_by_data_file_id	marked_for_deletion	missing_list	num_inst	points	priority	quantity	sequence_no	server_name_	status	updated_by	updated_by_user_id	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:calendar_day_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','calendar_day_plus','','View column strict check for api.calendar_day_plus','select * from api.calendar_day_plus limit 0;','calendar_name	week_starts_on	fiscal_year_name	fiscal_year_abbr	fiscal_year_number	days_in_year	weeks_in_year	first_day_of_week_usa	first_day_of_week_iso	first_day_of_week_name	week_start_offset	id	calendar_id	calendar_year_id	date_actual	epoch	day_suffix	day_name	day_name_abbreviated	day_of_week_usa	day_of_week_iso	day_of_month_actual	day_of_quarter_iso	day_of_year_actual	day_of_year_fiscal	week_of_month_actual	week_of_year_actual	week_of_year_fiscal_name	week_of_year_fiscal	week_of_year_iso	month_actual	month_actual_name	month_actual_name_abbreviated	month_fiscal	month_fiscal_name	month_fiscal_name_abbreviated	quarter_actual	quarter_actual_name	quarter_fiscal	quarter_fiscal_name	year_actual	first_date_of_week	last_date_of_week	first_date_of_month	last_date_of_month	first_date_of_quarter	last_date_of_quarter	first_date_of_year_actual	last_date_of_year_actual	first_date_of_year_fiscal	last_date_of_year_fiscal	mmyyyyy	mmddyyyy	ddmmyyyyy	weekend','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','calendar_day_plus','','View column orderless check for api.calendar_day_plus','select * from api.calendar_day_plus limit 0;','calendar_id	calendar_name	calendar_year_id	date_actual	day_name	day_name_abbreviated	day_of_month_actual	day_of_quarter_iso	day_of_week_iso	day_of_week_usa	day_of_year_actual	day_of_year_fiscal	day_suffix	days_in_year	ddmmyyyyy	epoch	first_date_of_month	first_date_of_quarter	first_date_of_week	first_date_of_year_actual	first_date_of_year_fiscal	first_day_of_week_iso	first_day_of_week_name	first_day_of_week_usa	fiscal_year_abbr	fiscal_year_name	fiscal_year_number	id	last_date_of_month	last_date_of_quarter	last_date_of_week	last_date_of_year_actual	last_date_of_year_fiscal	mmddyyyy	mmyyyyy	month_actual	month_actual_name	month_actual_name_abbreviated	month_fiscal	month_fiscal_name	month_fiscal_name_abbreviated	quarter_actual	quarter_actual_name	quarter_fiscal	quarter_fiscal_name	week_of_month_actual	week_of_year_actual	week_of_year_fiscal	week_of_year_fiscal_name	week_of_year_iso	week_start_offset	week_starts_on	weekend	weeks_in_year	year_actual','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:decon_demand_flow.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','decon_demand_flow','','View column strict check for api.decon_demand_flow','select * from api.decon_demand_flow limit 0;','HsysName	FacilityName	ScanTime_Date	ScanTime_DayOfWeek	ScanTime_DayName	ScanTime_HourOfDay	AssociatedTo	AvgInstFlow	AvgTrayFlow','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','decon_demand_flow','','View column orderless check for api.decon_demand_flow','select * from api.decon_demand_flow limit 0;','AssociatedTo	AvgInstFlow	AvgTrayFlow	FacilityName	HsysName	ScanTime_Date	ScanTime_DayName	ScanTime_DayOfWeek	ScanTime_HourOfDay','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:domo_dataset_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','domo_dataset_plus','','View column strict check for api.domo_dataset_plus','select * from api.domo_dataset_plus limit 0;','id	dataset_name	columns_count	rows_count	created_at_dts	updated_at_dts	monitor_this	late_threshold_minutes	minutes_since_update	minutes_late	dataset_status	is_late	is_late_number','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','domo_dataset_plus','','View column orderless check for api.domo_dataset_plus','select * from api.domo_dataset_plus limit 0;','columns_count	created_at_dts	dataset_name	dataset_status	id	is_late	is_late_number	late_threshold_minutes	minutes_late	minutes_since_update	monitor_this	rows_count	updated_at_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:inv_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','inv_plus','','View column strict check for api.inv_plus','select * from api.inv_plus limit 0;','id	marked_for_deletion	item_id	inv_no	their_name	item_name	description	facility_location	standard_facility	store_at_facility	created_dts	updated_dts	serial_no_as_of_dts	qty	flow	flow_long	par	last_seen_date	their_next_repair_date	last_sterilized_date	repair_last_repair_date	is_found	is_go_live_perm_printed	is_facility_loc_inherited	is_contents_incomplete	is_deactivated	needs_repair	is_searched_but_not_found	is_wrong_loc	is_handwritten_label	is_sleeping	category	their_id	their_location	created_by	updated_by	their_id_scrubbed	crossing_status	their_raw_name	comments_	their_bar_code	loc_rack	loc_row	loc_bin	loc_note	serial_no	data_cleanse_classification	repair_next_due	repair_last_repaired_by	msgs','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','inv_plus','','View column orderless check for api.inv_plus','select * from api.inv_plus limit 0;','category	comments_	created_by	created_dts	crossing_status	data_cleanse_classification	description	facility_location	flow	flow_long	id	inv_no	is_contents_incomplete	is_deactivated	is_facility_loc_inherited	is_found	is_go_live_perm_printed	is_handwritten_label	is_searched_but_not_found	is_sleeping	is_wrong_loc	item_id	item_name	last_seen_date	last_sterilized_date	loc_bin	loc_note	loc_rack	loc_row	marked_for_deletion	msgs	needs_repair	par	qty	repair_last_repair_date	repair_last_repaired_by	repair_next_due	serial_no	serial_no_as_of_dts	standard_facility	store_at_facility	their_bar_code	their_id	their_id_scrubbed	their_location	their_name	their_next_repair_date	their_raw_name	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:push_audit_latest.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','push_audit_latest','','View column strict check for api.push_audit_latest','select * from api.push_audit_latest limit 0;','server_name	unique_path	minutes_old	records_count	duration_seconds	schema_name	target_name	target_type	start_local_dts	end_local_dts	end_utc_dts	inserted_utc_dts	age	client_user_name	inserted_by	version_number	error_occurred	push_method_name	error_text','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','push_audit_latest','','View column orderless check for api.push_audit_latest','select * from api.push_audit_latest limit 0;','age	client_user_name	duration_seconds	end_local_dts	end_utc_dts	error_occurred	error_text	inserted_by	inserted_utc_dts	minutes_old	push_method_name	records_count	schema_name	server_name	start_local_dts	target_name	target_type	unique_path	version_number','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:push_audit_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','push_audit_plus','','View column strict check for api.push_audit_plus','select * from api.push_audit_plus limit 0;','schema_name	target_name	unique_path	target_type	server_name_	start_local_dts	end_local_dts	end_utc_dts	inserted_utc_dts	age	minutes_old	client_user_name	inserted_by	duration_seconds	records_count	version_number	error_occurred	push_method_name	error_text','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','push_audit_plus','','View column orderless check for api.push_audit_plus','select * from api.push_audit_plus limit 0;','age	client_user_name	duration_seconds	end_local_dts	end_utc_dts	error_occurred	error_text	inserted_by	inserted_utc_dts	minutes_old	push_method_name	records_count	schema_name	server_name_	start_local_dts	target_name	target_type	unique_path	version_number','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:push_log_domo.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','push_log_domo','','View column strict check for api.push_log_domo','select * from api.push_log_domo limit 0;','id	data_file_id	server_name_	ib_table_name	ib_table_number	records_count	push_dts	age	minutes_old	app_name	app_version	shell_version	sync_version	iam_type	compiled	merged	type_of_4d	version_of_4d	machine_name	platform_description	os_tz_name','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','push_log_domo','','View column orderless check for api.push_log_domo','select * from api.push_log_domo limit 0;','age	app_name	app_version	compiled	data_file_id	iam_type	ib_table_name	ib_table_number	id	machine_name	merged	minutes_old	os_tz_name	platform_description	push_dts	records_count	server_name_	shell_version	sync_version	type_of_4d	version_of_4d','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:push_log_latest.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','push_log_latest','','View column strict check for api.push_log_latest','select * from api.push_log_latest limit 0;','id	data_file_id	server_name_	ib_table_name	ib_table_number	records_count	push_dts	age	minutes_old	app_name	app_version	shell_version	sync_version	iam_type	compiled	merged	type_of_4d	version_of_4d	machine_name	platform_description	os_tz_name	dts	push_log_minutes_old','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','push_log_latest','','View column orderless check for api.push_log_latest','select * from api.push_log_latest limit 0;','age	app_name	app_version	compiled	data_file_id	dts	iam_type	ib_table_name	ib_table_number	id	machine_name	merged	minutes_old	os_tz_name	platform_description	push_dts	push_log_minutes_old	records_count	server_name_	shell_version	sync_version	type_of_4d	version_of_4d','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:push_log_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','push_log_plus','','View column strict check for api.push_log_plus','select * from api.push_log_plus limit 0;','id	data_file_id	server_name_	ib_table_name	ib_table_number	records_count	push_dts	age	minutes_old	app_name	app_version	shell_version	sync_version	iam_type	compiled	merged	type_of_4d	version_of_4d	machine_name	platform_description	os_tz_name','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','push_log_plus','','View column orderless check for api.push_log_plus','select * from api.push_log_plus limit 0;','age	app_name	app_version	compiled	data_file_id	iam_type	ib_table_name	ib_table_number	id	machine_name	merged	minutes_old	os_tz_name	platform_description	push_dts	records_count	server_name_	shell_version	sync_version	type_of_4d	version_of_4d','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:quality_domo.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','quality_domo','','View column strict check for api.quality_domo','select * from api.quality_domo limit 0;','id	CreatedDTS	DateTime_Local	EventType	Level	TheirSubType	AscendcoSubType	status	UserName	InvNo	ItemName	ItemType	Specialty	Department	FacilityName	HsysName	datetime_local	Quality_Date	Quality_DayOfWeek	Quality_DayName	Quality_FiscalWeek	Quality_FiscalWeekNo	Quality_MonthNo	Quality_MonthName	Quality_FiscalMonthNo	Quality_FiscalMonthName	Quality_Year	Quality_YearNo	Quality_FiscalYearNo	Quality_HourOfDay	Quality_HourBin	Quality_HourBinName','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','quality_domo','','View column orderless check for api.quality_domo','select * from api.quality_domo limit 0;','AscendcoSubType	CreatedDTS	datetime_local	DateTime_Local	Department	EventType	FacilityName	HsysName	id	InvNo	ItemName	ItemType	Level	Quality_Date	Quality_DayName	Quality_DayOfWeek	Quality_FiscalMonthName	Quality_FiscalMonthNo	Quality_FiscalWeek	Quality_FiscalWeekNo	Quality_FiscalYearNo	Quality_HourBin	Quality_HourBinName	Quality_HourOfDay	Quality_MonthName	Quality_MonthNo	Quality_Year	Quality_YearNo	Specialty	status	TheirSubType	UserName','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:rcl_combined.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','rcl_combined','','View column strict check for api.rcl_combined','select * from api.rcl_combined limit 0;','id	record_id	table_number	updated_dts	updated_by	app_type	machine_name	details_id	field_name	old_value	new_value','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','rcl_combined','','View column orderless check for api.rcl_combined','select * from api.rcl_combined limit 0;','app_type	details_id	field_name	id	machine_name	new_value	old_value	record_id	table_number	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:rcl_detail.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','rcl_detail','','View column strict check for api.rcl_detail','select * from api.rcl_detail limit 0;','id	record_changes_log_id	field_name	old_value	new_value	record_id','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','rcl_detail','','View column orderless check for api.rcl_detail','select * from api.rcl_detail limit 0;','field_name	id	new_value	old_value	record_changes_log_id	record_id','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:rcl.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','rcl','','View column strict check for api.rcl','select * from api.rcl limit 0;','id	table_number	record_id	updated_dts	updated_by	app_type	machine_name','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','rcl','','View column orderless check for api.rcl','select * from api.rcl limit 0;','app_type	id	machine_name	record_id	table_number	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:stat_facility_domo.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','stat_facility_domo','','View column strict check for api.stat_facility_domo','select * from api.stat_facility_domo limit 0;','ID	Date	Category	ItemType	StatType	isMostRecent	inDataCleanseScope	HsysName	FacilityName	Items_Inactive	Items_Count	Items_Qty	Items_Inventoried	Items_ToInventory	Items_Named	Items_ToName	Inst_Qty	Items_HasLoc	Items_MissingLocs	ItemProds_Count	ItemProds_MissingPartNosThier	ItemProds_MissingVendorsThier	ItemProds_DrPref	ItemProds_Critical	ItemProds_NotLinked	ItemProds_MissingPartNos	ItemProds_MissingVendors	ItemProds_CantDetermine	ItemProds_Linked	SupProds_Count	Sups_Count	Prods_Count	Prods_WithPic	Prods_WithoutPic	ItemProds_Verified	ItemProds_ExpertLinked	ItemProds_DupNamesTheir	ItemProds_DupNames	Prods_Named	PartNos_Fixed	Invs_Inactive	Invs_Count	Invs_Found	EmrItems_Count	EmrItems_Linked	EmrItems_MatchesTheirName	EmrItems_MatchesOurName	EmrItems_NoMatchTheirName	EmrItems_NoMatchOurName	EmrItems_Dups','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','stat_facility_domo','','View column orderless check for api.stat_facility_domo','select * from api.stat_facility_domo limit 0;','Category	Date	EmrItems_Count	EmrItems_Dups	EmrItems_Linked	EmrItems_MatchesOurName	EmrItems_MatchesTheirName	EmrItems_NoMatchOurName	EmrItems_NoMatchTheirName	FacilityName	HsysName	ID	inDataCleanseScope	Inst_Qty	Invs_Count	Invs_Found	Invs_Inactive	isMostRecent	ItemProds_CantDetermine	ItemProds_Count	ItemProds_Critical	ItemProds_DrPref	ItemProds_DupNames	ItemProds_DupNamesTheir	ItemProds_ExpertLinked	ItemProds_Linked	ItemProds_MissingPartNos	ItemProds_MissingPartNosThier	ItemProds_MissingVendors	ItemProds_MissingVendorsThier	ItemProds_NotLinked	ItemProds_Verified	Items_Count	Items_HasLoc	Items_Inactive	Items_Inventoried	Items_MissingLocs	Items_Named	Items_Qty	Items_ToInventory	Items_ToName	ItemType	PartNos_Fixed	Prods_Count	Prods_Named	Prods_WithoutPic	Prods_WithPic	StatType	SupProds_Count	Sups_Count','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:target_count_comparison.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','target_count_comparison','','View column strict check for api.target_count_comparison','select * from api.target_count_comparison limit 0;','hsys_name	qualified_name	yesterday	count_date	today	yesterdays_count	todays_count	daily_change	comments','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','target_count_comparison','','View column orderless check for api.target_count_comparison','select * from api.target_count_comparison limit 0;','comments	count_date	daily_change	hsys_name	qualified_name	today	todays_count	yesterday	yesterdays_count','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:api:views.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','api','views','','View column strict check for api.views','select * from api.views limit 0;','schema_name	view_name	domo_dataset	description','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','api','views','','View column orderless check for api.views','select * from api.views limit 0;','description	domo_dataset	schema_name	view_name','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:ascendco:activity_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','activity_plus','','View column strict check for ascendco.activity_plus','select * from ascendco.activity_plus limit 0;','id	hsys_name	facility_id	facility_name	activity_name	server_name	start_dts	done_dts	duration_seconds	updated_dts	marked_for_deletion	other_desc	user_name	created_dts	created_by	updated_by','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','activity_plus','','View column orderless check for ascendco.activity_plus','select * from ascendco.activity_plus limit 0;','activity_name	created_by	created_dts	done_dts	duration_seconds	facility_id	facility_name	hsys_name	id	marked_for_deletion	other_desc	server_name	start_dts	updated_by	updated_dts	user_name','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:ascendco:clinic_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','clinic_plus','','View column strict check for ascendco.clinic_plus','select * from ascendco.clinic_plus limit 0;','id	name_	receive_at_clinic	hsys_name	marked_for_deletion	created_dts	updated_dts	created_by	updated_by','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','clinic_plus','','View column orderless check for ascendco.clinic_plus','select * from ascendco.clinic_plus limit 0;','created_by	created_dts	hsys_name	id	marked_for_deletion	name_	receive_at_clinic	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:ascendco:data_file_info_pg_details.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','data_file_info_pg_details','','View column strict check for ascendco.data_file_info_pg_details','select * from ascendco.data_file_info_pg_details limit 0;','last_updated_dts	age	minutes_old	organization	host_name	database_name	use_ssh	app_type	use_new_config_system	go_full_diagnostic	log_errors_locally	maximum_push_size_kb	display_timing_results	os_tz_name	server_name_	app_name	app_version	shell_version	sync_version	compiled	merged	iam_type	type_of_4d	version_of_4d	machine_name	platform_description	id	iam	table_stats','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','data_file_info_pg_details','','View column orderless check for ascendco.data_file_info_pg_details','select * from ascendco.data_file_info_pg_details limit 0;','age	app_name	app_type	app_version	compiled	database_name	display_timing_results	go_full_diagnostic	host_name	iam	iam_type	id	last_updated_dts	log_errors_locally	machine_name	maximum_push_size_kb	merged	minutes_old	organization	os_tz_name	platform_description	server_name_	shell_version	sync_version	table_stats	type_of_4d	use_new_config_system	use_ssh	version_of_4d','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:ascendco:data_file_info_table_stats.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','data_file_info_table_stats','','View column strict check for ascendco.data_file_info_table_stats','select * from ascendco.data_file_info_table_stats limit 0;','last_updated_dts	age	minutes_old	os_tz_name	server_name_	app_name	app_version	shell_version	sync_version	compiled	merged	iam_type	type_of_4d	version_of_4d	machine_name	platform_description	id	iam	table_stats	table_name	record_count	table_number','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','data_file_info_table_stats','','View column orderless check for ascendco.data_file_info_table_stats','select * from ascendco.data_file_info_table_stats limit 0;','age	app_name	app_version	compiled	iam	iam_type	id	last_updated_dts	machine_name	merged	minutes_old	os_tz_name	platform_description	record_count	server_name_	shell_version	sync_version	table_name	table_number	table_stats	type_of_4d	version_of_4d','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:ascendco:domo_passthrough_counts.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','domo_passthrough_counts','','View column strict check for ascendco.domo_passthrough_counts','select * from ascendco.domo_passthrough_counts limit 0;','hsys_name	facility_name	dataset_name	count','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','domo_passthrough_counts','','View column orderless check for ascendco.domo_passthrough_counts','select * from ascendco.domo_passthrough_counts limit 0;','count	dataset_name	facility_name	hsys_name','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:ascendco:domo_passthrough_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','domo_passthrough_plus','','View column strict check for ascendco.domo_passthrough_plus','select * from ascendco.domo_passthrough_plus limit 0;','id	source_id	key_supplement	hsys_name	facility_name	dataset_name	view_version	created_dts	age	minutes_old	from_dts	to_dts	data','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','domo_passthrough_plus','','View column orderless check for ascendco.domo_passthrough_plus','select * from ascendco.domo_passthrough_plus limit 0;','age	created_dts	data	dataset_name	facility_name	from_dts	hsys_name	id	key_supplement	minutes_old	source_id	to_dts	view_version','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:ascendco:facility_activities_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','facility_activities_plus','','View column strict check for ascendco.facility_activities_plus','select * from ascendco.facility_activities_plus limit 0;','id	name_	hsys_name	facility_name	server_name	created_dts	updated_dts	marked_for_deletion	created_by	updated_by','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','facility_activities_plus','','View column orderless check for ascendco.facility_activities_plus','select * from ascendco.facility_activities_plus limit 0;','created_by	created_dts	facility_name	hsys_name	id	marked_for_deletion	name_	server_name	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:ascendco:facility_department_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','facility_department_plus','','View column strict check for ascendco.facility_department_plus','select * from ascendco.facility_department_plus limit 0;','id	facility_name	name_	label_name	inv_audit	their_id	is_available_in_sonar	receive_at_dept	is_from_emr	created_dts	updated_dts	created_by	updated_by	marked_for_deletion','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','facility_department_plus','','View column orderless check for ascendco.facility_department_plus','select * from ascendco.facility_department_plus limit 0;','created_by	created_dts	facility_name	id	inv_audit	is_available_in_sonar	is_from_emr	label_name	marked_for_deletion	name_	receive_at_dept	their_id	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:ascendco:facility_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','facility_plus','','View column strict check for ascendco.facility_plus','select * from ascendco.facility_plus limit 0;','id	hsys_name	name_	default_spd_facility	tz_name_ib	tz_name_postgres	calendar_name	marked_for_deletion	production_label	permanent_label	missing_inst_label	facility_location_label	sterilizer_label	user_badge_label	workstation_label	created_dts	updated_dts	sonar_auto_logout_minutes	sonar_auto_logout_dialog_minutes	num_ors	sonar_go_live_date	is_count_sheet_source_truth	hide_doc_names_for_stats	is_item_master_live	is_sonar_live	sterilizer_print_at_sterilizing	sterilizer_print_at_cooling	sterilizer_print_at_released	can_set_all_found_in_assembly	their_id	created_by	updated_by	reporting_name	label_name	sonar_name_full	sonar_count_sheet_form_name	sterilize_alert_level	sonar_scanner_stop_char	emr_location_name','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','facility_plus','','View column orderless check for ascendco.facility_plus','select * from ascendco.facility_plus limit 0;','calendar_name	can_set_all_found_in_assembly	created_by	created_dts	default_spd_facility	emr_location_name	facility_location_label	hide_doc_names_for_stats	hsys_name	id	is_count_sheet_source_truth	is_item_master_live	is_sonar_live	label_name	marked_for_deletion	missing_inst_label	name_	num_ors	permanent_label	production_label	reporting_name	sonar_auto_logout_dialog_minutes	sonar_auto_logout_minutes	sonar_count_sheet_form_name	sonar_go_live_date	sonar_name_full	sonar_scanner_stop_char	sterilize_alert_level	sterilizer_label	sterilizer_print_at_cooling	sterilizer_print_at_released	sterilizer_print_at_sterilizing	their_id	tz_name_ib	tz_name_postgres	updated_by	updated_dts	user_badge_label	workstation_label','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:ascendco:focus_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','focus_plus','','View column strict check for ascendco.focus_plus','select * from ascendco.focus_plus limit 0;','scase_id	hsys_id	hsys_name	facility_id	facility_name	sched_dts	or_name	case_seq	desc_	status	transport_from	surgeon_name	proc_name	when_','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','focus_plus','','View column orderless check for ascendco.focus_plus','select * from ascendco.focus_plus limit 0;','case_seq	desc_	facility_id	facility_name	hsys_id	hsys_name	or_name	proc_name	scase_id	sched_dts	status	surgeon_name	transport_from	when_','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:ascendco:item_arch_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','item_arch_plus','','View column strict check for ascendco.item_arch_plus','select * from ascendco.item_arch_plus limit 0;','id	name_	type_	facility_name	created_dts	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','item_arch_plus','','View column orderless check for ascendco.item_arch_plus','select * from ascendco.item_arch_plus limit 0;','created_dts	facility_name	id	name_	type_	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:ascendco:need_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','need_plus','','View column strict check for ascendco.need_plus','select * from ascendco.need_plus limit 0;','id	hsys_id	facility_id	item_id	item_name	facility_name	hsys_name	percent_down	created_dts	next_case_dts	flow	qty_circulation	qty_ready_everywhere	qty_ready_here	qty_sched_everywhere	qty_sched_here	qty_sterile_everywhere	qty_sterile_here	qty_suggest_sterilize	qty_total	qty_here	ready_vs_need_defecit	sched_sort	sort_rank	suggest_transport	next_needed	or_name	status	status_sort	when_','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','need_plus','','View column orderless check for ascendco.need_plus','select * from ascendco.need_plus limit 0;','created_dts	facility_id	facility_name	flow	hsys_id	hsys_name	id	item_id	item_name	next_case_dts	next_needed	or_name	percent_down	qty_circulation	qty_here	qty_ready_everywhere	qty_ready_here	qty_sched_everywhere	qty_sched_here	qty_sterile_everywhere	qty_sterile_here	qty_suggest_sterilize	qty_total	ready_vs_need_defecit	sched_sort	sort_rank	status	status_sort	suggest_transport	when_','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:ascendco:outlier_change_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','outlier_change_plus','','View column strict check for ascendco.outlier_change_plus','select * from ascendco.outlier_change_plus limit 0;','outlier_rule_id	schema_name	table_name	column_name	id	value_was	set_to	change_count	last_changed_dts','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','outlier_change_plus','','View column orderless check for ascendco.outlier_change_plus','select * from ascendco.outlier_change_plus limit 0;','change_count	column_name	id	last_changed_dts	outlier_rule_id	schema_name	set_to	table_name	value_was','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:ascendco:outlier_rule_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','outlier_rule_plus','','View column strict check for ascendco.outlier_rule_plus','select * from ascendco.outlier_rule_plus limit 0;','id	schema_name	table_name	column_name	threshold	set_to	change_rows','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','outlier_rule_plus','','View column orderless check for ascendco.outlier_rule_plus','select * from ascendco.outlier_rule_plus limit 0;','change_rows	column_name	id	schema_name	set_to	table_name	threshold','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:ascendco:productivity_detail_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','productivity_detail_plus','','View column strict check for ascendco.productivity_detail_plus','select * from ascendco.productivity_detail_plus limit 0;','server_name	hsys_name	facility_name	source_table_name	user_label	start_time_dts	start_date	time_label	duration	year_and_month	assembly_inst	assembly_pack	assembly_tray	assembly_points	assembly_seconds_trays	assembly_seconds_overall	pause_seconds	pause_time	duration_seconds	description	activity	facility_id	user_id	data_file_id	source_table_number	source_record_id	source_record_row_counter','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','productivity_detail_plus','','View column orderless check for ascendco.productivity_detail_plus','select * from ascendco.productivity_detail_plus limit 0;','activity	assembly_inst	assembly_pack	assembly_points	assembly_seconds_overall	assembly_seconds_trays	assembly_tray	data_file_id	description	duration	duration_seconds	facility_id	facility_name	hsys_name	pause_seconds	pause_time	server_name	source_record_id	source_record_row_counter	source_table_name	source_table_number	start_date	start_time_dts	time_label	user_id	user_label	year_and_month','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:ascendco:rcl_detail_hash_this.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','rcl_detail_hash_this','','View column strict check for ascendco.rcl_detail_hash_this','select * from ascendco.rcl_detail_hash_this limit 0;','updated_dts	updated_by	id	record_changes_log_id	field_name	old_value	new_value	record_id','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','rcl_detail_hash_this','','View column orderless check for ascendco.rcl_detail_hash_this','select * from ascendco.rcl_detail_hash_this limit 0;','field_name	id	new_value	old_value	record_changes_log_id	record_id	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:ascendco:rep_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','rep_plus','','View column strict check for ascendco.rep_plus','select * from ascendco.rep_plus limit 0;','id	name_	phone	email	hsys_name	sup_name	user_name	marked_for_deletion	created_dts	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','rep_plus','','View column orderless check for ascendco.rep_plus','select * from ascendco.rep_plus limit 0;','created_dts	email	hsys_name	id	marked_for_deletion	name_	phone	sup_name	updated_dts	user_name','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:ascendco:stat_facility_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','stat_facility_plus','','View column strict check for ascendco.stat_facility_plus','select * from ascendco.stat_facility_plus limit 0;','id	date_	category	item_type	stat_type	is_most_recent	in_data_cleanse_scope	facility_id	hsys_id	hsys_name	facility_name	items_inactive	items_count	items_qty	items_inventoried	items_to_inventory	items_named	items_to_name	inst_qty	items_has_loc	items_missing_locs	item_prods_count	item_prods_missing_part_nos_thier	item_prods_missing_vendors_thier	item_prods_dr_pref	item_prods_critical	item_prods_not_linked	item_prods_missing_part_nos	item_prods_missing_vendors	item_prods_cant_determine	item_prods_linked	sup_prods_count	sups_count	prods_count	prods_with_pic	prods_without_pic	item_prods_verified	item_prods_expert_linked	item_prods_dup_names_their	item_prods_dup_names	prods_named	part_nos_fixed	invs_inactive	invs_count	invs_found	emr_items_count	emr_items_linked	emr_items_matches_their_name	emr_items_matches_our_name	emr_items_no_match_their_name	emr_items_no_match_our_name	emr_items_dups','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','stat_facility_plus','','View column orderless check for ascendco.stat_facility_plus','select * from ascendco.stat_facility_plus limit 0;','category	date_	emr_items_count	emr_items_dups	emr_items_linked	emr_items_matches_our_name	emr_items_matches_their_name	emr_items_no_match_our_name	emr_items_no_match_their_name	facility_id	facility_name	hsys_id	hsys_name	id	in_data_cleanse_scope	inst_qty	invs_count	invs_found	invs_inactive	is_most_recent	item_prods_cant_determine	item_prods_count	item_prods_critical	item_prods_dr_pref	item_prods_dup_names	item_prods_dup_names_their	item_prods_expert_linked	item_prods_linked	item_prods_missing_part_nos	item_prods_missing_part_nos_thier	item_prods_missing_vendors	item_prods_missing_vendors_thier	item_prods_not_linked	item_prods_verified	item_type	items_count	items_has_loc	items_inactive	items_inventoried	items_missing_locs	items_named	items_qty	items_to_inventory	items_to_name	part_nos_fixed	prods_count	prods_named	prods_with_pic	prods_without_pic	stat_type	sup_prods_count	sups_count','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:ascendco:sup_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','sup_plus','','View column strict check for ascendco.sup_plus','select * from ascendco.sup_plus limit 0;','id	name_	parent_name	is_custom_by_facility	facility_name	is_available_for_loaners	marked_for_deletion	created_by	updated_by	created_dts	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','sup_plus','','View column orderless check for ascendco.sup_plus','select * from ascendco.sup_plus limit 0;','created_by	created_dts	facility_name	id	is_available_for_loaners	is_custom_by_facility	marked_for_deletion	name_	parent_name	updated_by	updated_dts','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:ascendco:text_collection_item_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','text_collection_item_plus','','View column strict check for ascendco.text_collection_item_plus','select * from ascendco.text_collection_item_plus limit 0;','collection_id	collection_name	text	source_id	facility_name	added_dts	retain','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','text_collection_item_plus','','View column orderless check for ascendco.text_collection_item_plus','select * from ascendco.text_collection_item_plus limit 0;','added_dts	collection_id	collection_name	facility_name	retain	source_id	text','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:ascendco:text_collection_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','text_collection_plus','','View column strict check for ascendco.text_collection_plus','select * from ascendco.text_collection_plus limit 0;','id	collection_name	facility_name	items_count	added_dts	retain','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','ascendco','text_collection_plus','','View column orderless check for ascendco.text_collection_plus','select * from ascendco.text_collection_plus limit 0;','added_dts	collection_name	facility_name	id	items_count	retain','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:dba:count_rows.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','dba','count_rows','','View column strict check for dba.count_rows','select * from dba.count_rows limit 0;','table_schema	table_name	count_rows','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','dba','count_rows','','View column orderless check for dba.count_rows','select * from dba.count_rows limit 0;','count_rows	table_name	table_schema','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:dba:ddl_event_log_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','dba','ddl_event_log_plus','','View column strict check for dba.ddl_event_log_plus','select * from dba.ddl_event_log_plus limit 0;','event_timestamp	age	schema_name	object_class	object_type	object_identity	object_name	command_tag	address_args	address_names	in_extension	trigger_event	id','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','dba','ddl_event_log_plus','','View column orderless check for dba.ddl_event_log_plus','select * from dba.ddl_event_log_plus limit 0;','address_args	address_names	age	command_tag	event_timestamp	id	in_extension	object_class	object_identity	object_name	object_type	schema_name	trigger_event','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:dba:extension_list.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','dba','extension_list','','View column strict check for dba.extension_list','select * from dba.extension_list limit 0;','name	installed_version	default_version	update_hint	comment','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','dba','extension_list','','View column orderless check for dba.extension_list','select * from dba.extension_list limit 0;','comment	default_version	installed_version	name	update_hint','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:dba:function_list.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','dba','function_list','','View column strict check for dba.function_list','select * from dba.function_list limit 0;','schema	function_name	proargtypes	function_oid	lang	return_type	run_as	owner_name	strict	returnset	volatile	paramnames	defaultvalues	configparams	paramalltypes	comment	systable	rettypeschema	parammodes	estimcost	estimrows	definition	acl','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','dba','function_list','','View column orderless check for dba.function_list','select * from dba.function_list limit 0;','acl	comment	configparams	defaultvalues	definition	estimcost	estimrows	function_name	function_oid	lang	owner_name	paramalltypes	parammodes	paramnames	proargtypes	rettypeschema	return_type	returnset	run_as	schema	strict	systable	volatile','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:dba:role_settings_list.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','dba','role_settings_list','','View column strict check for dba.role_settings_list','select * from dba.role_settings_list limit 0;','datname	rolname	setconfig','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','dba','role_settings_list','','View column orderless check for dba.role_settings_list','select * from dba.role_settings_list limit 0;','datname	rolname	setconfig','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:dba:table_grants.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','dba','table_grants','','View column strict check for dba.table_grants','select * from dba.table_grants limit 0;','schema_name	table_name	qualified_name	owner_name	user_name	privilege	setting','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','dba','table_grants','','View column orderless check for dba.table_grants','select * from dba.table_grants limit 0;','owner_name	privilege	qualified_name	schema_name	setting	table_name	user_name','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:dba:test_failed_focus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','dba','test_failed_focus','','View column strict check for dba.test_failed_focus','select * from dba.test_failed_focus limit 0;','test_passed	object_class	object_schema	object_name	function_signature	test_name	comparison_options	diagnostics	summary	test_code	is_an_ib_test	expected_response	actual_response	expected_error	actual_error	expected_outcome	actual_outcome','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','dba','test_failed_focus','','View column orderless check for dba.test_failed_focus','select * from dba.test_failed_focus limit 0;','actual_error	actual_outcome	actual_response	comparison_options	diagnostics	expected_error	expected_outcome	expected_response	function_signature	is_an_ib_test	object_class	object_name	object_schema	summary	test_code	test_name	test_passed','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:dba:test_failed.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','dba','test_failed','','View column strict check for dba.test_failed','select * from dba.test_failed limit 0;','test_passed	object_class	object_schema	object_name	function_signature	test_name	id	result_dts	server_address	database_name	pg_version	user_name	diagnostics	summary	test_code	is_an_ib_test	rds_only	modifies_data	expected_response	actual_response	expected_error	actual_error	expected_outcome	actual_outcome	test_case_id	response_type	comparison_options	setup_code	teardown_code','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','dba','test_failed','','View column orderless check for dba.test_failed','select * from dba.test_failed limit 0;','actual_error	actual_outcome	actual_response	comparison_options	database_name	diagnostics	expected_error	expected_outcome	expected_response	function_signature	id	is_an_ib_test	modifies_data	object_class	object_name	object_schema	pg_version	rds_only	response_type	result_dts	server_address	setup_code	summary	teardown_code	test_case_id	test_code	test_name	test_passed	user_name','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:dba:test_result_plus.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','dba','test_result_plus','','View column strict check for dba.test_result_plus','select * from dba.test_result_plus limit 0;','test_passed	object_class	object_schema	object_name	function_signature	test_name	id	result_dts	server_address	database_name	pg_version	user_name	diagnostics	summary	test_code	is_an_ib_test	rds_only	modifies_data	expected_response	actual_response	expected_error	actual_error	expected_outcome	actual_outcome	test_case_id	response_type	comparison_options	setup_code	teardown_code','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','dba','test_result_plus','','View column orderless check for dba.test_result_plus','select * from dba.test_result_plus limit 0;','actual_error	actual_outcome	actual_response	comparison_options	database_name	diagnostics	expected_error	expected_outcome	expected_response	function_signature	id	is_an_ib_test	modifies_data	object_class	object_name	object_schema	pg_version	rds_only	response_type	result_dts	server_address	setup_code	summary	teardown_code	test_case_id	test_code	test_name	test_passed	user_name','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:dba:view_list.test.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','dba','view_list','','View column strict check for dba.view_list','select * from dba.view_list limit 0;','schema_name	view_name	view_owner','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','dba','view_list','','View column orderless check for dba.view_list','select * from dba.view_list limit 0;','schema_name	view_name	view_owner','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:passthrough:musc_orscansinout_v1.tests.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','passthrough','musc_orscansinout_v1','','View column strict check for passthrough.musc_orscansinout_v1','select * from passthrough.musc_orscansinout_v1 limit 0;','HsysName	FacilityName	Category	ClinicDeptName	Event	InvName	ItemName	ItemType	locationDesc	NumInst	Scan_Date	Scan_DayName	Scan_DayOfWeek	Scan_HourBin	Scan_HourOfDay	Scan_Local	ScanDTS	scanID	scannedAt	scannedBy	scannedDesc	scannedDTS	scannedType	Specialty	state	substate	timezone','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','passthrough','musc_orscansinout_v1','','View column orderless check for passthrough.musc_orscansinout_v1','select * from passthrough.musc_orscansinout_v1 limit 0;','Category	ClinicDeptName	Event	FacilityName	HsysName	InvName	ItemName	ItemType	locationDesc	NumInst	Scan_Date	Scan_DayName	Scan_DayOfWeek	Scan_HourBin	Scan_HourOfDay	Scan_Local	ScanDTS	scanID	scannedAt	scannedBy	scannedDesc	scannedDTS	scannedType	Specialty	state	substate	timezone','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:passthrough:musc_orscansinout.tests.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','passthrough','musc_orscansinout','','View column strict check for passthrough.musc_orscansinout','select * from passthrough.musc_orscansinout limit 0;','HsysName	FacilityName	Category	ClinicDeptName	Event	InvName	ItemName	ItemType	locationDesc	NumInst	Scan_Date	Scan_DayName	Scan_DayOfWeek	Scan_HourBin	Scan_HourOfDay	Scan_Local	ScanDTS	scanID	scannedAt	scannedBy	scannedDesc	scannedDTS	scannedType	Specialty	state	substate	timezone	DateTime_Local','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','passthrough','musc_orscansinout','','View column orderless check for passthrough.musc_orscansinout','select * from passthrough.musc_orscansinout limit 0;','Category	ClinicDeptName	DateTime_Local	Event	FacilityName	HsysName	InvName	ItemName	ItemType	locationDesc	NumInst	Scan_Date	Scan_DayName	Scan_DayOfWeek	Scan_HourBin	Scan_HourOfDay	Scan_Local	ScanDTS	scanID	scannedAt	scannedBy	scannedDesc	scannedDTS	scannedType	Specialty	state	substate	timezone','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:passthrough:musc_orscansinoutraw_v1.tests.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','passthrough','musc_orscansinoutraw_v1','','View column strict check for passthrough.musc_orscansinoutraw_v1','select * from passthrough.musc_orscansinoutraw_v1 limit 0;','HsysName	FacilityName	Category	ClinicDeptName	Event	Event2	InvName	ItemName	ItemType	locationDesc	NumInst	Scan_Date	Scan_DayName	Scan_DayOfWeek	Scan_HourBin	Scan_HourOfDay	Scan_Local	ScanDTS	scanID	scannedAt	scannedBy	scannedDesc	scannedDTS	scannedRecordID	scannedType	SpecialityID	Specialty	state	substate	timezone','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','passthrough','musc_orscansinoutraw_v1','','View column orderless check for passthrough.musc_orscansinoutraw_v1','select * from passthrough.musc_orscansinoutraw_v1 limit 0;','Category	ClinicDeptName	Event	Event2	FacilityName	HsysName	InvName	ItemName	ItemType	locationDesc	NumInst	Scan_Date	Scan_DayName	Scan_DayOfWeek	Scan_HourBin	Scan_HourOfDay	Scan_Local	ScanDTS	scanID	scannedAt	scannedBy	scannedDesc	scannedDTS	scannedRecordID	scannedType	SpecialityID	Specialty	state	substate	timezone','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:passthrough:musc_orscansinoutraw.tests.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','passthrough','musc_orscansinoutraw','','View column strict check for passthrough.musc_orscansinoutraw','select * from passthrough.musc_orscansinoutraw limit 0;','HsysName	FacilityName	Category	ClinicDeptName	Event	Event2	InvName	ItemName	ItemType	locationDesc	NumInst	Scan_Date	Scan_DayName	Scan_DayOfWeek	Scan_HourBin	Scan_HourOfDay	Scan_Local	ScanDTS	scanID	scannedAt	scannedBy	scannedDesc	scannedDTS	scannedRecordID	scannedType	SpecialityID	Specialty	state	substate	timezone	DateTime_Local','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','passthrough','musc_orscansinoutraw','','View column orderless check for passthrough.musc_orscansinoutraw','select * from passthrough.musc_orscansinoutraw limit 0;','Category	ClinicDeptName	DateTime_Local	Event	Event2	FacilityName	HsysName	InvName	ItemName	ItemType	locationDesc	NumInst	Scan_Date	Scan_DayName	Scan_DayOfWeek	Scan_HourBin	Scan_HourOfDay	Scan_Local	ScanDTS	scanID	scannedAt	scannedBy	scannedDesc	scannedDTS	scannedRecordID	scannedType	SpecialityID	Specialty	state	substate	timezone','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:passthrough:sonar_backlog_v3.tests.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','passthrough','sonar_backlog_v3','','View column strict check for passthrough.sonar_backlog_v3','select * from passthrough.sonar_backlog_v3 limit 0;','HsysName	FacilityName	BacklogDTS	OverallBacklog	CleanBacklog	DirtyInstBacklog	Backlog_FiscalWeekNo	Backlog_HourBin	Backlog_DayOfWeek	Backlog_MonthNo	OverallInstBacklog	Backlog_HourOfDay	DirtyBacklog	Backlog_YearNo	CleanInstBacklog	Backlog_Date	Backlog_Year	DateTime	Backlog_Local	Backlog_FiscalWeek	DateHour	Backlog_DayName	Backlog_Month','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','passthrough','sonar_backlog_v3','','View column orderless check for passthrough.sonar_backlog_v3','select * from passthrough.sonar_backlog_v3 limit 0;','Backlog_Date	Backlog_DayName	Backlog_DayOfWeek	Backlog_FiscalWeek	Backlog_FiscalWeekNo	Backlog_HourBin	Backlog_HourOfDay	Backlog_Local	Backlog_Month	Backlog_MonthNo	Backlog_Year	Backlog_YearNo	BacklogDTS	CleanBacklog	CleanInstBacklog	DateHour	DateTime	DirtyBacklog	DirtyInstBacklog	FacilityName	HsysName	OverallBacklog	OverallInstBacklog','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:passthrough:sonar_backlog.tests.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','passthrough','sonar_backlog','','View column strict check for passthrough.sonar_backlog','select * from passthrough.sonar_backlog limit 0;','HsysName	FacilityName	BacklogDTS	OverallBacklog	CleanBacklog	DirtyInstBacklog	Backlog_FiscalWeekNo	Backlog_HourBin	Backlog_DayOfWeek	Backlog_MonthNo	OverallInstBacklog	Backlog_HourOfDay	DirtyBacklog	Backlog_YearNo	CleanInstBacklog	Backlog_Date	Backlog_Year	DateTime	Backlog_Local	Backlog_FiscalWeek	DateHour	Backlog_DayName	Backlog_Month	DateTime_Local','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','passthrough','sonar_backlog','','View column orderless check for passthrough.sonar_backlog','select * from passthrough.sonar_backlog limit 0;','Backlog_Date	Backlog_DayName	Backlog_DayOfWeek	Backlog_FiscalWeek	Backlog_FiscalWeekNo	Backlog_HourBin	Backlog_HourOfDay	Backlog_Local	Backlog_Month	Backlog_MonthNo	Backlog_Year	Backlog_YearNo	BacklogDTS	CleanBacklog	CleanInstBacklog	DateHour	DateTime	DateTime_Local	DirtyBacklog	DirtyInstBacklog	FacilityName	HsysName	OverallBacklog	OverallInstBacklog','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:passthrough:trays_per_hour_pg_v1.tests.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','passthrough','trays_per_hour_pg_v1','','View column strict check for passthrough.trays_per_hour_pg_v1','select * from passthrough.trays_per_hour_pg_v1 limit 0;','HsysName	FacilityName	Assemble_DayName	UserName	Assemble_Date	HoursAssembly	InstPerHour	TraysPerHour	TraysAssembled	Assemble_DayOfWeek	InstAssembled','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','passthrough','trays_per_hour_pg_v1','','View column orderless check for passthrough.trays_per_hour_pg_v1','select * from passthrough.trays_per_hour_pg_v1 limit 0;','Assemble_Date	Assemble_DayName	Assemble_DayOfWeek	FacilityName	HoursAssembly	HsysName	InstAssembled	InstPerHour	TraysAssembled	TraysPerHour	UserName','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);--Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:generated_tests:views:passthrough:trays_per_hour.tests.sql------------------------------------------------------------------- Test that the column list has not changed: Strict.-----------------------------------------------------------------select null from test_case_setup('View','passthrough','trays_per_hour','','View column strict check for passthrough.trays_per_hour','select * from passthrough.trays_per_hour limit 0;','HsysName	FacilityName	Assemble_DayName	UserName	Assemble_Date	HoursAssembly	InstPerHour	TraysPerHour	TraysAssembled	Assemble_DayOfWeek	InstAssembled','','text','{"case_sensitvity":"sensitive","column_order":"strict"}','Pass','{user_change_structure}',false);------------------------------------------------------------------- Test that the column list has not changed: Orderless.-----------------------------------------------------------------select null from test_case_setup('View','passthrough','trays_per_hour','','View column orderless check for passthrough.trays_per_hour','select * from passthrough.trays_per_hour limit 0;','Assemble_Date	Assemble_DayName	Assemble_DayOfWeek	FacilityName	HoursAssembly	HsysName	InstAssembled	InstPerHour	TraysAssembled	TraysPerHour	UserName','','text','{"case_sensitvity":"sensitive","column_order":"orderless"}','Pass','{user_change_structure}',false);COMMIT; -- Complete the transaction bundling all of the INSERTs.
------------------------------------------------------------------------------------- Checks for types_plus.insert_assembly_prods_v1 (data_in assembly_prods_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_assembly_prods_v1 (data_in assembly_prods_v1[])', '()', 'types_plus.insert_assembly_prods_v1 data_in assembly_prods_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_assembly_prods_v1''   and pg_get_function_identity_arguments(oid) = ''data_in assembly_prods_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_assembly_prods_v1 (data_in assembly_prods_v1[])', '()', 'types_plus.insert_assembly_prods_v1 data_in assembly_prods_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_assembly_prods_v1''   and pg_get_function_identity_arguments(oid) = ''data_in assembly_prods_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_assembly_prods_v1(data_in assembly_prods_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- Note: This method is hand-tweaked to populate updated_date with a whole date (4 bytes), like-- !2021-04-15''. This is how the partitions are divided on the table level.-- Why not a generated column instead? Can''t use it for partition keys.-- Why not an expression condition on the partition key? Not allowed, if you also have a PK.-- Why not a trigger? Ugh, bit of hassle & wildly inefficient.-- We already wear the overhead of this insert handler method, so let''s put it to work!-- Kind of a drag, if there''s an INSERT mechanism other than this method. Such as, COPY, import, etc.-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO assembly_prods (			id,			data_file_id,			assembly_id,			item_prod_id,			created_dts,			updated_dts,			target,			found_,			repair,			backup,			actual,			assembly_pos,			marked_for_deletion,			created_by,			updated_by,			prod_alert_text_ack,			audit_events,			updated_date)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.assembly_id,			rows_in.item_prod_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.target,			rows_in.found_,			rows_in.repair,			rows_in.backup,			rows_in.actual,			rows_in.assembly_pos,			rows_in.marked_for_deletion,			rows_in.created_by,			rows_in.updated_by,			rows_in.prod_alert_text_ack,			rows_in.audit_events,			updated_dts::date-- <-- Extract this value in advance for the partition key.        FROM unnest(data_in) as rows_in        ON CONFLICT ON CONSTRAINT assembly_prods_pkey DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			assembly_id = EXCLUDED.assembly_id,			item_prod_id = EXCLUDED.item_prod_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			target = EXCLUDED.target,			found_ = EXCLUDED.found_,			repair = EXCLUDED.repair,			backup = EXCLUDED.backup,			actual = EXCLUDED.actual,			assembly_pos = EXCLUDED.assembly_pos,			marked_for_deletion = EXCLUDED.marked_for_deletion,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			prod_alert_text_ack = EXCLUDED.prod_alert_text_ack,			audit_events = EXCLUDED.audit_events,			updated_date = EXCLUDED.updated_date        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
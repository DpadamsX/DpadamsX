------------------------------------------------------------------------------------- Checks for types_plus.insert_sup_v2 (data_in sup_v2[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_sup_v2 (data_in sup_v2[])', '()', 'types_plus.insert_sup_v2 data_in sup_v2[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_sup_v2''   and pg_get_function_identity_arguments(oid) = ''data_in sup_v2[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_sup_v2 (data_in sup_v2[])', '()', 'types_plus.insert_sup_v2 data_in sup_v2[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_sup_v2''   and pg_get_function_identity_arguments(oid) = ''data_in sup_v2[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_sup_v2(data_in sup_v2[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO sup (			id,			custom_facility_id,			sup_parent_id,			created_dts,			updated_dts,			is_custom_by_facility,			marked_for_deletion,			is_available_for_loaners,			name_,			created_by,			updated_by,			short_name)                  SELECT			rows_in.id,			rows_in.custom_facility_id,			rows_in.sup_parent_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.is_custom_by_facility,			rows_in.marked_for_deletion,			rows_in.is_available_for_loaners,			rows_in.name_,			rows_in.created_by,			rows_in.updated_by,			rows_in.short_name                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			custom_facility_id = EXCLUDED.custom_facility_id,			sup_parent_id = EXCLUDED.sup_parent_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			is_custom_by_facility = EXCLUDED.is_custom_by_facility,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_available_for_loaners = EXCLUDED.is_available_for_loaners,			name_ = EXCLUDED.name_,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			short_name = EXCLUDED.short_name          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
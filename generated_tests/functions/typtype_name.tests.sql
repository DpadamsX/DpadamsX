------------------------------------------------------------------------------------- Checks for tools.typtype_name (typtype text, OUT typtype_name text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'typtype_name (typtype text, OUT typtype_name text)', '()', 'tools.typtype_name typtype text, OUT typtype_name text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''typtype_name''   and pg_get_function_identity_arguments(oid) = ''typtype text, OUT typtype_name text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'typtype_name (typtype text, OUT typtype_name text)', '()', 'tools.typtype_name typtype text, OUT typtype_name text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''typtype_name''   and pg_get_function_identity_arguments(oid) = ''typtype text, OUT typtype_name text'';', 'CREATE OR REPLACE FUNCTION tools.typtype_name(typtype text, OUT typtype_name text) RETURNS text LANGUAGE sqlAS $function$SELECT CASE  WHEN typtype = ''b'' THEN ''base''  WHEN typtype = ''c'' THEN ''composite type''  WHEN typtype = ''d'' THEN ''domain''  WHEN typtype = ''e'' THEN ''enum''  WHEN typtype = ''p'' THEN ''pseudo-type''  WHEN typtype = ''r'' THEN ''range''  ELSE ''Unexpected typtype '' || typtypeEND;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
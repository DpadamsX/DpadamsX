------------------------------------------------------------------------------------- Checks for types_plus.insert_need_v5 (data_in need_v5[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_need_v5 (data_in need_v5[])', '()', 'types_plus.insert_need_v5 data_in need_v5[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_need_v5''   and pg_get_function_identity_arguments(oid) = ''data_in need_v5[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_need_v5 (data_in need_v5[])', '()', 'types_plus.insert_need_v5 data_in need_v5[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_need_v5''   and pg_get_function_identity_arguments(oid) = ''data_in need_v5[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_need_v5(data_in need_v5[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO need (			id,			hsys_id,			facility_id,			item_id,			percent_down,			next_case_dts,			flow,			qty_circulation,			qty_ready_everywhere,			qty_ready_here,			qty_sched_everywhere,			qty_sched_here,			qty_sterile_everywhere,			qty_sterile_here,			qty_suggest_sterilize,			qty_total,			ready_vs_need_defecit,			sched_sort,			sort_rank,			suggest_transport,			next_needed,			or_name,			status,			status_sort,			when_,			qty_here)                  SELECT			rows_in.id,			rows_in.hsys_id,			rows_in.facility_id,			rows_in.item_id,			rows_in.percent_down,			rows_in.next_case_dts,			rows_in.flow,			rows_in.qty_circulation,			rows_in.qty_ready_everywhere,			rows_in.qty_ready_here,			rows_in.qty_sched_everywhere,			rows_in.qty_sched_here,			rows_in.qty_sterile_everywhere,			rows_in.qty_sterile_here,			rows_in.qty_suggest_sterilize,			rows_in.qty_total,			rows_in.ready_vs_need_defecit,			rows_in.sched_sort,			rows_in.sort_rank,			rows_in.suggest_transport,			rows_in.next_needed,			rows_in.or_name,			rows_in.status,			rows_in.status_sort,			rows_in.when_,			rows_in.qty_here                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			hsys_id = EXCLUDED.hsys_id,			facility_id = EXCLUDED.facility_id,			item_id = EXCLUDED.item_id,			percent_down = EXCLUDED.percent_down,			next_case_dts = EXCLUDED.next_case_dts,			flow = EXCLUDED.flow,			qty_circulation = EXCLUDED.qty_circulation,			qty_ready_everywhere = EXCLUDED.qty_ready_everywhere,			qty_ready_here = EXCLUDED.qty_ready_here,			qty_sched_everywhere = EXCLUDED.qty_sched_everywhere,			qty_sched_here = EXCLUDED.qty_sched_here,			qty_sterile_everywhere = EXCLUDED.qty_sterile_everywhere,			qty_sterile_here = EXCLUDED.qty_sterile_here,			qty_suggest_sterilize = EXCLUDED.qty_suggest_sterilize,			qty_total = EXCLUDED.qty_total,			ready_vs_need_defecit = EXCLUDED.ready_vs_need_defecit,			sched_sort = EXCLUDED.sched_sort,			sort_rank = EXCLUDED.sort_rank,			suggest_transport = EXCLUDED.suggest_transport,			next_needed = EXCLUDED.next_needed,			or_name = EXCLUDED.or_name,			status = EXCLUDED.status,			status_sort = EXCLUDED.status_sort,			when_ = EXCLUDED.when_,			qty_here = EXCLUDED.qty_here          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
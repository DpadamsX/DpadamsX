------------------------------------------------------------------------------------- Checks for types_plus.facility_location_to_v1 (facility_location_in facility_location) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'facility_location_to_v1 (facility_location_in facility_location)', '()', 'types_plus.facility_location_to_v1 facility_location_in facility_location existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''facility_location_to_v1''   and pg_get_function_identity_arguments(oid) = ''facility_location_in facility_location'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'facility_location_to_v1 (facility_location_in facility_location)', '()', 'types_plus.facility_location_to_v1 facility_location_in facility_location definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''facility_location_to_v1''   and pg_get_function_identity_arguments(oid) = ''facility_location_in facility_location'';', 'CREATE OR REPLACE FUNCTION types_plus.facility_location_to_v1(facility_location_in facility_location) RETURNS facility_location_v1 LANGUAGE sqlAS $function$        SELECT			facility_location_in.id,			facility_location_in.marked_for_deletion,			facility_location_in.facility_id,			facility_location_in.type_,			facility_location_in.name_$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
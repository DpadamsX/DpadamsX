------------------------------------------------------------------------------------- Checks for tools._stats_agg_accumulator (_stats_agg_accum_type, double precision) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', '_stats_agg_accumulator (_stats_agg_accum_type, double precision)', '()', 'tools._stats_agg_accumulator _stats_agg_accum_type, double precision existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''_stats_agg_accumulator''   and pg_get_function_identity_arguments(oid) = ''_stats_agg_accum_type, double precision'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', '_stats_agg_accumulator (_stats_agg_accum_type, double precision)', '()', 'tools._stats_agg_accumulator _stats_agg_accum_type, double precision definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''_stats_agg_accumulator''   and pg_get_function_identity_arguments(oid) = ''_stats_agg_accum_type, double precision'';', 'CREATE OR REPLACE FUNCTION tools._stats_agg_accumulator(_stats_agg_accum_type, double precision) RETURNS _stats_agg_accum_type LANGUAGE plpgsqlAS $function$DECLARE	a ALIAS FOR $1;	x alias for $2;	n1 bigint;	delta double precision;	delta_n double precision;	delta_n2 double precision;	term1 double precision;BEGIN	n1 = a.n;	a.n = a.n + 1;	delta = x - a.m1;	delta_n = delta / a.n;	delta_n2 = delta_n * delta_n;	term1 = delta * delta_n * n1;	a.m1 = a.m1 + delta_n;	a.m4 = a.m4 + term1 * delta_n2 * (a.n*a.n - 3*a.n + 3) + 6 * delta_n2 * a.m2 - 4 * delta_n * a.m3;	a.m3 = a.m3 + term1 * delta_n * (a.n - 2) - 3 * delta_n * a.m2;	a.m2 = a.m2 + term1;	a.min = least(a.min, x);	a.max = greatest(a.max, x);	RETURN a;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
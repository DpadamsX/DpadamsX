------------------------------------------------------------------------------------- Checks for tools.dts_to_yyyy_mm_int (timestamp without time zone) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'dts_to_yyyy_mm_int (timestamp without time zone)', '()', 'tools.dts_to_yyyy_mm_int timestamp without time zone existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''dts_to_yyyy_mm_int''   and pg_get_function_identity_arguments(oid) = ''timestamp without time zone'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'dts_to_yyyy_mm_int (timestamp without time zone)', '()', 'tools.dts_to_yyyy_mm_int timestamp without time zone definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''dts_to_yyyy_mm_int''   and pg_get_function_identity_arguments(oid) = ''timestamp without time zone'';', 'CREATE OR REPLACE FUNCTION tools.dts_to_yyyy_mm_int(timestamp without time zone) RETURNS integer LANGUAGE sql IMMUTABLE PARALLEL SAFEAS $function$SELECT (EXTRACT(year FROM $1) * 100 + EXTRACT(month FROM $1))::int$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
------------------------------------------------------------------------------------- Checks for types_plus.insert_analytic_scan_v1 (data_in analytic_scan_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_analytic_scan_v1 (data_in analytic_scan_v1[])', '()', 'types_plus.insert_analytic_scan_v1 data_in analytic_scan_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_analytic_scan_v1''   and pg_get_function_identity_arguments(oid) = ''data_in analytic_scan_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_analytic_scan_v1 (data_in analytic_scan_v1[])', '()', 'types_plus.insert_analytic_scan_v1 data_in analytic_scan_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_analytic_scan_v1''   and pg_get_function_identity_arguments(oid) = ''data_in analytic_scan_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_analytic_scan_v1(data_in analytic_scan_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO analytic_scan (			id,			data_file_id,			marked_for_deletion,			hsys_id,			facility_id,			facility_location_id,			specialty_id,			scanned_type,			associated_to,			user_name,			inv_name,			num_inst,			tray_or_pack,			item_name,			scan_time_utc_dts,			scan_time_local_dts,			location_description)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.hsys_id,			rows_in.facility_id,			rows_in.facility_location_id,			rows_in.specialty_id,			rows_in.scanned_type,			rows_in.associated_to,			rows_in.user_name,			rows_in.inv_name,			rows_in.num_inst,			rows_in.tray_or_pack,			rows_in.item_name,			rows_in.scan_time_utc_dts,			rows_in.scan_time_local_dts,			rows_in.location_description        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			hsys_id = EXCLUDED.hsys_id,			facility_id = EXCLUDED.facility_id,			facility_location_id = EXCLUDED.facility_location_id,			specialty_id = EXCLUDED.specialty_id,			scanned_type = EXCLUDED.scanned_type,			associated_to = EXCLUDED.associated_to,			user_name = EXCLUDED.user_name,			inv_name = EXCLUDED.inv_name,			num_inst = EXCLUDED.num_inst,			tray_or_pack = EXCLUDED.tray_or_pack,			item_name = EXCLUDED.item_name,			scan_time_utc_dts = EXCLUDED.scan_time_utc_dts,			scan_time_local_dts = EXCLUDED.scan_time_local_dts,			location_description = EXCLUDED.location_description        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
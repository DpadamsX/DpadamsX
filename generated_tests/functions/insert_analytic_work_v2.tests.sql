------------------------------------------------------------------------------------- Checks for types_plus.insert_analytic_work_v2 (data_in analytic_work_v2[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_analytic_work_v2 (data_in analytic_work_v2[])', '()', 'types_plus.insert_analytic_work_v2 data_in analytic_work_v2[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_analytic_work_v2''   and pg_get_function_identity_arguments(oid) = ''data_in analytic_work_v2[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_analytic_work_v2 (data_in analytic_work_v2[])', '()', 'types_plus.insert_analytic_work_v2 data_in analytic_work_v2[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_analytic_work_v2''   and pg_get_function_identity_arguments(oid) = ''data_in analytic_work_v2[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_analytic_work_v2(data_in analytic_work_v2[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO analytic_work (			id,			key_supplement,			hsys_id,			facility_id,			inv_id,			user_id,			activity_id,			assembly_id,			q_event_id,			scan_id,			scase_id,			scase_inv_id,			sterilizer_load_id,			sterilizer_loadinv_id,			start_dts,			end_dts,			start_local_dts,			end_local_dts,			date_time,			duration,			missing_inst,			num_inst,			num_items,			points,			num_packs,			num_trays,			activity,			description,			marked_for_deletion)        SELECT			rows_in.id,			rows_in.key_supplement,			rows_in.hsys_id,			rows_in.facility_id,			rows_in.inv_id,			rows_in.user_id,			rows_in.activity_id,			rows_in.assembly_id,			rows_in.q_event_id,			rows_in.scan_id,			rows_in.scase_id,			rows_in.scase_inv_id,			rows_in.sterilizer_load_id,			rows_in.sterilizer_loadinv_id,			rows_in.start_dts,			rows_in.end_dts,			rows_in.start_local_dts,			rows_in.end_local_dts,			rows_in.date_time,			rows_in.duration,			rows_in.missing_inst,			rows_in.num_inst,			rows_in.num_items,			rows_in.points,			rows_in.num_packs,			rows_in.num_trays,			rows_in.activity,			rows_in.description,			rows_in.marked_for_deletion        FROM unnest(data_in) as rows_in        ON CONFLICT(id, key_supplement) DO UPDATE SET			key_supplement = EXCLUDED.key_supplement,			hsys_id = EXCLUDED.hsys_id,			facility_id = EXCLUDED.facility_id,			inv_id = EXCLUDED.inv_id,			user_id = EXCLUDED.user_id,			activity_id = EXCLUDED.activity_id,			assembly_id = EXCLUDED.assembly_id,			q_event_id = EXCLUDED.q_event_id,			scan_id = EXCLUDED.scan_id,			scase_id = EXCLUDED.scase_id,			scase_inv_id = EXCLUDED.scase_inv_id,			sterilizer_load_id = EXCLUDED.sterilizer_load_id,			sterilizer_loadinv_id = EXCLUDED.sterilizer_loadinv_id,			start_dts = EXCLUDED.start_dts,			end_dts = EXCLUDED.end_dts,			start_local_dts = EXCLUDED.start_local_dts,			end_local_dts = EXCLUDED.end_local_dts,			date_time = EXCLUDED.date_time,			duration = EXCLUDED.duration,			missing_inst = EXCLUDED.missing_inst,			num_inst = EXCLUDED.num_inst,			num_items = EXCLUDED.num_items,			points = EXCLUDED.points,			num_packs = EXCLUDED.num_packs,			num_trays = EXCLUDED.num_trays,			activity = EXCLUDED.activity,			description = EXCLUDED.description,			marked_for_deletion = EXCLUDED.marked_for_deletion        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
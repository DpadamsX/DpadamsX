------------------------------------------------------------------------------------- Checks for tools.interval_generator (start_ts timestamp with time zone, end_ts timestamp with time zone, round_interval interval) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'interval_generator (start_ts timestamp with time zone, end_ts timestamp with time zone, round_interval interval)', '()', 'tools.interval_generator start_ts timestamp with time zone, end_ts timestamp with time zone, round_interval interval existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''interval_generator''   and pg_get_function_identity_arguments(oid) = ''start_ts timestamp with time zone, end_ts timestamp with time zone, round_interval interval'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'interval_generator (start_ts timestamp with time zone, end_ts timestamp with time zone, round_interval interval)', '()', 'tools.interval_generator start_ts timestamp with time zone, end_ts timestamp with time zone, round_interval interval definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''interval_generator''   and pg_get_function_identity_arguments(oid) = ''start_ts timestamp with time zone, end_ts timestamp with time zone, round_interval interval'';', 'CREATE OR REPLACE FUNCTION tools.interval_generator(start_ts timestamp with time zone, end_ts timestamp with time zone, round_interval interval) RETURNS TABLE(start_time timestamp with time zone, end_time timestamp with time zone) LANGUAGE plpgsqlAS $function$BEGINRETURN QUERY        select            (n)       start_time,            (n + round_interval) end_time        from generate_series(date_trunc(''minute'', start_ts), end_ts, round_interval) n;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
------------------------------------------------------------------------------------- Checks for types_plus.insert_assembly_v1 (data_in assembly_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_assembly_v1 (data_in assembly_v1[])', '()', 'types_plus.insert_assembly_v1 data_in assembly_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_assembly_v1''   and pg_get_function_identity_arguments(oid) = ''data_in assembly_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_assembly_v1 (data_in assembly_v1[])', '()', 'types_plus.insert_assembly_v1 data_in assembly_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_assembly_v1''   and pg_get_function_identity_arguments(oid) = ''data_in assembly_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_assembly_v1(data_in assembly_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO assembly (			id,			data_file_id,			marked_for_deletion,			created_by_user_id,			done_by_user_id,			facility_location_id,			inv_id,			last_updated_by_data_file_id,			updated_by_user_id,			is_complete,			is_quick_turn,			con_id,			created_by,			difficulty,			quantity,			sequence_no,			num_inst,			points,			done_dts,			created_dts,			updated_dts,			missing_list,			priority,			status,			updated_by)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.created_by_user_id,			rows_in.done_by_user_id,			rows_in.facility_location_id,			rows_in.inv_id,			rows_in.last_updated_by_data_file_id,			rows_in.updated_by_user_id,			rows_in.is_complete,			rows_in.is_quick_turn,			rows_in.con_id,			rows_in.created_by,			rows_in.difficulty,			rows_in.quantity,			rows_in.sequence_no,			rows_in.num_inst,			rows_in.points,			rows_in.done_dts,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.missing_list,			rows_in.priority,			rows_in.status,			rows_in.updated_by        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			created_by_user_id = EXCLUDED.created_by_user_id,			done_by_user_id = EXCLUDED.done_by_user_id,			facility_location_id = EXCLUDED.facility_location_id,			inv_id = EXCLUDED.inv_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			updated_by_user_id = EXCLUDED.updated_by_user_id,			is_complete = EXCLUDED.is_complete,			is_quick_turn = EXCLUDED.is_quick_turn,			con_id = EXCLUDED.con_id,			created_by = EXCLUDED.created_by,			difficulty = EXCLUDED.difficulty,			quantity = EXCLUDED.quantity,			sequence_no = EXCLUDED.sequence_no,			num_inst = EXCLUDED.num_inst,			points = EXCLUDED.points,			done_dts = EXCLUDED.done_dts,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			missing_list = EXCLUDED.missing_list,			priority = EXCLUDED.priority,			status = EXCLUDED.status,			updated_by = EXCLUDED.updated_by        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
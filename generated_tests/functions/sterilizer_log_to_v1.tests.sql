------------------------------------------------------------------------------------- Checks for types_plus.sterilizer_log_to_v1 (sterilizer_log_in sterilizer_log) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'sterilizer_log_to_v1 (sterilizer_log_in sterilizer_log)', '()', 'types_plus.sterilizer_log_to_v1 sterilizer_log_in sterilizer_log existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''sterilizer_log_to_v1''   and pg_get_function_identity_arguments(oid) = ''sterilizer_log_in sterilizer_log'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'sterilizer_log_to_v1 (sterilizer_log_in sterilizer_log)', '()', 'types_plus.sterilizer_log_to_v1 sterilizer_log_in sterilizer_log definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''sterilizer_log_to_v1''   and pg_get_function_identity_arguments(oid) = ''sterilizer_log_in sterilizer_log'';', 'CREATE OR REPLACE FUNCTION types_plus.sterilizer_log_to_v1(sterilizer_log_in sterilizer_log) RETURNS sterilizer_log_v1 LANGUAGE sqlAS $function$        SELECT			sterilizer_log_in.id,			sterilizer_log_in.data_file_id,			sterilizer_log_in.log_type,			sterilizer_log_in.summary_json,			sterilizer_log_in.log_xml$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
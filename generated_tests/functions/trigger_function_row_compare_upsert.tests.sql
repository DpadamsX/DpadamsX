------------------------------------------------------------------------------------- Checks for ascendco.trigger_function_row_compare_upsert () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_row_compare_upsert ()', '()', 'ascendco.trigger_function_row_compare_upsert  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_row_compare_upsert''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_row_compare_upsert ()', '()', 'ascendco.trigger_function_row_compare_upsert  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_row_compare_upsert''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION ascendco.trigger_function_row_compare_upsert() RETURNS trigger LANGUAGE plpgsqlAS $function$BEGIN	IF  NEW.hash_1 = NULL OR	    NEW.hash_2 = NULL THEN	    RETURN NEW; -- Don''t do the comparison, hash_1 hasn''t been populated yet.	ELSE-- Do the comparison. The point of this is to avoid constantly thrashing the expression index.	   NEW.hashes_match := NEW.hash_1 = NEW.hash_2;      RETURN NEW;     -- important!   END IF;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
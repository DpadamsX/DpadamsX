------------------------------------------------------------------------------------- Checks for ascendco.trigger_function_outlier_upsert () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_outlier_upsert ()', '()', 'ascendco.trigger_function_outlier_upsert  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_outlier_upsert''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_outlier_upsert ()', '()', 'ascendco.trigger_function_outlier_upsert  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_outlier_upsert''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION ascendco.trigger_function_outlier_upsert() RETURNS trigger LANGUAGE plpgsqlAS $function$BEGIN    NEW.last_changed_dts := NOW();	NEW.change_count     := COALESCE(OLD.change_count,0) + 1;    RETURN NEW;    		 -- important!END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
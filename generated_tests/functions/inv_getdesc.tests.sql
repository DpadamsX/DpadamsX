------------------------------------------------------------------------------------- Checks for ascendco.inv_getdesc (inv_id_in uuid, item_name_in citext) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'inv_getdesc (inv_id_in uuid, item_name_in citext)', '()', 'ascendco.inv_getdesc inv_id_in uuid, item_name_in citext existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''inv_getdesc''   and pg_get_function_identity_arguments(oid) = ''inv_id_in uuid, item_name_in citext'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'inv_getdesc (inv_id_in uuid, item_name_in citext)', '()', 'ascendco.inv_getdesc inv_id_in uuid, item_name_in citext definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''inv_getdesc''   and pg_get_function_identity_arguments(oid) = ''inv_id_in uuid, item_name_in citext'';', 'CREATE OR REPLACE FUNCTION ascendco.inv_getdesc(inv_id_in uuid, item_name_in citext DEFAULT NULL::citext) RETURNS citext LANGUAGE plpgsql STABLEAS $function$---------------------------------------------------------------------------- Set up the variables---------------------------------------------------------------------------DECLARE    final_out citext := '''';    v_inv_id        uuid   := ''00000000-0000-0000-0000-000000000000'';    v_inv_no        citext := '''';    v_item_id       uuid   := ''00000000-0000-0000-0000-000000000000'';    v_their_name    citext := '''';    v_serial_no     citext := '''';    v_item_name     citext := '''';  -- Gets either $2 or lookup value.    v_description   citext := '''';BEGIN    final_out := '''';---------------------------------------------------------------------------- Load the necessary inv and item data, either from params or search----------------------------------------------------------------------------- No matter what, we need some details out of inv. Use COALESCE to avoid NULL checks later in the routine.    SELECT COALESCE (         id, ''00000000-0000-0000-0000-000000000000''),           COALESCE (     inv_no,  ''''),           COALESCE (    item_id, ''00000000-0000-0000-0000-000000000000''),           COALESCE ( their_name, ''''),           COALESCE (  serial_no, '''')      INTO v_inv_id,           v_inv_no,           v_item_id,           v_their_name,           v_serial_no      FROM ascendco.inv      WHERE id = inv_id_in; -- Reminder: It''s impossible to run this routine without a valid-looking UUID in $1. PG won''t even try.-- Three term COALESCE ($2, subquery, '''') to get either a name from $2, a lookup value, or an empty string, if all else fails.-- This may be subtly different from the 4D original, which doesn''t appear to look up on an empty input.v_item_name = COALESCE                (item_name_in,                (SELECT name_ FROM ascendco.item WHERE item.id = v_item_id),                '''');IF (v_item_name = '''') THEN    v_item_name := ''NotLinked '' || v_their_name;END IF;IF (v_inv_no <> '''') THEN    v_description := v_item_name || '' - '' || v_inv_no;ELSE    v_description := v_item_name;END IF;IF (v_serial_no <> '''') THEN    v_description := v_description || '' ('' || v_serial_no || '')'';END IF;-- Eh? For some reason, I could *not* get serial number to concatenate into final_out directly...had to go with intermediate variable.  ¬Ø\_(„ÉÑ)_/¬Øfinal_out := v_description;-- Bit of console-like reporting for debugging./*RAISE NOTICE ''value of inv_id_in :       %'', inv_id_in;RAISE NOTICE ''value item_name_in :       %'', item_name_in;RAISE NOTICE ''value of v_inv_id :        %'', v_inv_id;RAISE NOTICE ''value of v_inv_no :        %'', v_inv_no;RAISE NOTICE ''value of v_item_id :       %'', v_item_id;RAISE NOTICE ''value of v_their_name :    %'', v_their_name;RAISE NOTICE ''value of v_item_name :     %'', v_item_name;RAISE NOTICE ''value of v_serial_no :     %'', v_serial_no;RAISE NOTICE ''value of v_description :   %'', v_description;RAISE NOTICE ''value of final_out :       %'', final_out;*/RETURN final_out;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
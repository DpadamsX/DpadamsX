------------------------------------------------------------------------------------- Checks for api.domo_passthrough_expand (type_name text, packed_data jsonb) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'api', 'domo_passthrough_expand (type_name text, packed_data jsonb)', '()', 'api.domo_passthrough_expand type_name text, packed_data jsonb existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''domo_passthrough_expand''   and pg_get_function_identity_arguments(oid) = ''type_name text, packed_data jsonb'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'api', 'domo_passthrough_expand (type_name text, packed_data jsonb)', '()', 'api.domo_passthrough_expand type_name text, packed_data jsonb definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''domo_passthrough_expand''   and pg_get_function_identity_arguments(oid) = ''type_name text, packed_data jsonb'';', 'CREATE OR REPLACE FUNCTION api.domo_passthrough_expand(type_name text, packed_data jsonb) RETURNS SETOF record LANGUAGE plpgsql STABLEAS $function$BEGIN    RETURN QUERY EXECUTE FORMAT   ''select *      from jsonb_populate_recordset(null::%1$I, %2$I) as expanded_data;'',           type_name,           packed_data;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
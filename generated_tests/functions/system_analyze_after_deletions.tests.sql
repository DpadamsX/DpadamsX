------------------------------------------------------------------------------------- Checks for ascendco.system_analyze_after_deletions () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'system_analyze_after_deletions ()', '()', 'ascendco.system_analyze_after_deletions  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''system_analyze_after_deletions''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'system_analyze_after_deletions ()', '()', 'ascendco.system_analyze_after_deletions  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''system_analyze_after_deletions''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION ascendco.system_analyze_after_deletions() RETURNS void LANGUAGE plpgsqlAS $function$BEGIN	analyze ascendco.analytic_productivity;	analyze ascendco.analytic_sterilizer_load;	analyze ascendco.analytic_sterilizer_loadinv;	analyze ascendco.item_type;	analyze ascendco.specialty;	analyze ascendco.sterilize_method;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
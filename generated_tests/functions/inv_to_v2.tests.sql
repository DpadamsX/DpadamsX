------------------------------------------------------------------------------------- Checks for types_plus.inv_to_v2 (inv_in inv) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'inv_to_v2 (inv_in inv)', '()', 'types_plus.inv_to_v2 inv_in inv existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''inv_to_v2''   and pg_get_function_identity_arguments(oid) = ''inv_in inv'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'inv_to_v2 (inv_in inv)', '()', 'types_plus.inv_to_v2 inv_in inv definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''inv_to_v2''   and pg_get_function_identity_arguments(oid) = ''inv_in inv'';', 'CREATE OR REPLACE FUNCTION types_plus.inv_to_v2(inv_in inv) RETURNS inv_v2 LANGUAGE sqlAS $function$                   SELECT			inv_in.id,			inv_in.item_id,			inv_in.item_arch_id,			inv_in.facility_location_id,			inv_in.standard_faclity_id,			inv_in.store_at_facility_id,			inv_in.created_dts,			inv_in.updated_dts,			inv_in.serial_no_as_of_dts,			inv_in.qty,			inv_in.flow,			inv_in.flow_long,			inv_in.par,			inv_in.last_seen_date,			inv_in.their_next_repair_date,			inv_in.last_sterilized_date,			inv_in.repair_last_repair_date,			inv_in.is_searched_but_not_found,			inv_in.marked_for_deletion,			inv_in.is_found,			inv_in.is_go_live_perm_printed,			inv_in.is_sleeping,			inv_in.is_handwritten_label,			inv_in.is_wrong_loc,			inv_in.is_facility_loc_inherited,			inv_in.needs_repair,			inv_in.is_deactivated,			inv_in.is_contents_incomplete,			inv_in.their_location,			inv_in.category,			inv_in.their_name,			inv_in.their_id,			inv_in.created_by,			inv_in.updated_by,			inv_in.their_id_scrubbed,			inv_in.crossing_status,			inv_in.inv_no,			inv_in.their_raw_name,			inv_in.comments_,			inv_in.their_bar_code,			inv_in.loc_rack,			inv_in.loc_row,			inv_in.loc_bin,			inv_in.loc_note,			inv_in.serial_no,			inv_in.data_cleanse_classification,			inv_in.repair_next_due,			inv_in.repair_last_repaired_by,			inv_in.msgs               $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
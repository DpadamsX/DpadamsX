------------------------------------------------------------------------------------- Checks for types_plus.sterilize_method_to_v1 (sterilize_method_in sterilize_method) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'sterilize_method_to_v1 (sterilize_method_in sterilize_method)', '()', 'types_plus.sterilize_method_to_v1 sterilize_method_in sterilize_method existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''sterilize_method_to_v1''   and pg_get_function_identity_arguments(oid) = ''sterilize_method_in sterilize_method'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'sterilize_method_to_v1 (sterilize_method_in sterilize_method)', '()', 'types_plus.sterilize_method_to_v1 sterilize_method_in sterilize_method definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''sterilize_method_to_v1''   and pg_get_function_identity_arguments(oid) = ''sterilize_method_in sterilize_method'';', 'CREATE OR REPLACE FUNCTION types_plus.sterilize_method_to_v1(sterilize_method_in sterilize_method) RETURNS sterilize_method_v1 LANGUAGE sqlAS $function$        SELECT			sterilize_method_in.id,			sterilize_method_in.data_file_id,			sterilize_method_in.marked_for_deletion,			sterilize_method_in.name_$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
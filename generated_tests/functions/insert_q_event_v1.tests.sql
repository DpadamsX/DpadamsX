------------------------------------------------------------------------------------- Checks for types_plus.insert_q_event_v1 (data_in q_event_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_q_event_v1 (data_in q_event_v1[])', '()', 'types_plus.insert_q_event_v1 data_in q_event_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_q_event_v1''   and pg_get_function_identity_arguments(oid) = ''data_in q_event_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_q_event_v1 (data_in q_event_v1[])', '()', 'types_plus.insert_q_event_v1 data_in q_event_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_q_event_v1''   and pg_get_function_identity_arguments(oid) = ''data_in q_event_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_q_event_v1(data_in q_event_v1[]) RETURNS integer LANGUAGE sqlAS $function$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO q_event (			or_surgeon_people_id,			id,			qtype_id,			qsub_type_id,			inv_id,			scan_id,			assembly_id,			status_when_user_id,			facility_id,			last_updated_by_data_file_id,			status_reported_by_user_id,			status_done_user_id,			status_investigating_user_id,			datetime_local,			status_done_dts,			status_when_dts,			status_investigating_dts,			status_reported_dts,			updated_dts,			created_dts,			or_delay_minutes,			marked_for_deletion,			is_data_problem,			is_process_problem,			assembly_audit_prods,			is_coached,			updated_by,			or_room,			status_done_name,			status,			status_when_name,			desc_,			status_investigating_name,			or_delay_type,			status_reported_by_name,			notes,			created_by)        SELECT			rows_in.or_surgeon_people_id,			rows_in.id,			rows_in.qtype_id,			rows_in.qsub_type_id,			rows_in.inv_id,			rows_in.scan_id,			rows_in.assembly_id,			rows_in.status_when_user_id,			rows_in.facility_id,			rows_in.last_updated_by_data_file_id,			rows_in.status_reported_by_user_id,			rows_in.status_done_user_id,			rows_in.status_investigating_user_id,			rows_in.datetime_local,			rows_in.status_done_dts,			rows_in.status_when_dts,			rows_in.status_investigating_dts,			rows_in.status_reported_dts,			rows_in.updated_dts,			rows_in.created_dts,			rows_in.or_delay_minutes,			rows_in.marked_for_deletion,			rows_in.is_data_problem,			rows_in.is_process_problem,			rows_in.assembly_audit_prods,			rows_in.is_coached,			rows_in.updated_by,			rows_in.or_room,			rows_in.status_done_name,			rows_in.status,			rows_in.status_when_name,			rows_in.desc_,			rows_in.status_investigating_name,			rows_in.or_delay_type,			rows_in.status_reported_by_name,			rows_in.notes,			rows_in.created_by        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			or_surgeon_people_id = EXCLUDED.or_surgeon_people_id,			qtype_id = EXCLUDED.qtype_id,			qsub_type_id = EXCLUDED.qsub_type_id,			inv_id = EXCLUDED.inv_id,			scan_id = EXCLUDED.scan_id,			assembly_id = EXCLUDED.assembly_id,			status_when_user_id = EXCLUDED.status_when_user_id,			facility_id = EXCLUDED.facility_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			status_reported_by_user_id = EXCLUDED.status_reported_by_user_id,			status_done_user_id = EXCLUDED.status_done_user_id,			status_investigating_user_id = EXCLUDED.status_investigating_user_id,			datetime_local = EXCLUDED.datetime_local,			status_done_dts = EXCLUDED.status_done_dts,			status_when_dts = EXCLUDED.status_when_dts,			status_investigating_dts = EXCLUDED.status_investigating_dts,			status_reported_dts = EXCLUDED.status_reported_dts,			updated_dts = EXCLUDED.updated_dts,			created_dts = EXCLUDED.created_dts,			or_delay_minutes = EXCLUDED.or_delay_minutes,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_data_problem = EXCLUDED.is_data_problem,			is_process_problem = EXCLUDED.is_process_problem,			assembly_audit_prods = EXCLUDED.assembly_audit_prods,			is_coached = EXCLUDED.is_coached,			updated_by = EXCLUDED.updated_by,			or_room = EXCLUDED.or_room,			status_done_name = EXCLUDED.status_done_name,			status = EXCLUDED.status,			status_when_name = EXCLUDED.status_when_name,			desc_ = EXCLUDED.desc_,			status_investigating_name = EXCLUDED.status_investigating_name,			or_delay_type = EXCLUDED.or_delay_type,			status_reported_by_name = EXCLUDED.status_reported_by_name,			notes = EXCLUDED.notes,			created_by = EXCLUDED.created_by        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
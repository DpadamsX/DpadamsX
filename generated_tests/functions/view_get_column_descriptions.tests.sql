------------------------------------------------------------------------------------- Checks for dba.view_get_column_descriptions (view_name_in text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'view_get_column_descriptions (view_name_in text)', '()', 'dba.view_get_column_descriptions view_name_in text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''view_get_column_descriptions''   and pg_get_function_identity_arguments(oid) = ''view_name_in text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'view_get_column_descriptions (view_name_in text)', '()', 'dba.view_get_column_descriptions view_name_in text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''view_get_column_descriptions''   and pg_get_function_identity_arguments(oid) = ''view_name_in text'';', 'CREATE OR REPLACE FUNCTION dba.view_get_column_descriptions(view_name_in text) RETURNS TABLE("Position" smallint, "Name" text, "Type" text) LANGUAGE sql STABLEAS $function$SELECT attnum                  AS "Position",       attname::text           AS "Name",       atttypid::regtype::text AS "Type"FROM   pg_attributeWHERE  attrelid = view_name_in::regclass AND    -- ::regclass is a magic casting and a Very Good Thing. You can       attnum > 0 AND       NOT attisdroppedORDER  BY attnum$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
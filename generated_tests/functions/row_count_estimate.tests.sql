------------------------------------------------------------------------------------- Checks for tools.row_count_estimate (query text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'row_count_estimate (query text)', '()', 'tools.row_count_estimate query text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''row_count_estimate''   and pg_get_function_identity_arguments(oid) = ''query text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'row_count_estimate (query text)', '()', 'tools.row_count_estimate query text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''row_count_estimate''   and pg_get_function_identity_arguments(oid) = ''query text'';', 'CREATE OR REPLACE FUNCTION tools.row_count_estimate(query text) RETURNS bigint LANGUAGE plpgsqlAS $function$DECLARE   plan jsonb;BEGIN   EXECUTE ''EXPLAIN (FORMAT JSON) '' || query INTO plan;   RETURN (plan->0->''Plan''->>''Plan Rows'')::bigint;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
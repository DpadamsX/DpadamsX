------------------------------------------------------------------------------------- Checks for types_plus.insert_focus_v2 (data_in focus_v2[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_focus_v2 (data_in focus_v2[])', '()', 'types_plus.insert_focus_v2 data_in focus_v2[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_focus_v2''   and pg_get_function_identity_arguments(oid) = ''data_in focus_v2[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_focus_v2 (data_in focus_v2[])', '()', 'types_plus.insert_focus_v2 data_in focus_v2[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_focus_v2''   and pg_get_function_identity_arguments(oid) = ''data_in focus_v2[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_focus_v2(data_in focus_v2[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO focus (			scase_id,			hsys_id,			facility_id,			sched_dts,			facility_name,			or_name,			case_seq,			desc_,			status,			transport_from,			surgeon_name,			proc_name,			when_)                  SELECT			rows_in.scase_id,			rows_in.hsys_id,			rows_in.facility_id,			rows_in.sched_dts,			rows_in.facility_name,			rows_in.or_name,			rows_in.case_seq,			rows_in.desc_,			rows_in.status,			rows_in.transport_from,			rows_in.surgeon_name,			rows_in.proc_name,			rows_in.when_                      FROM unnest(data_in) as rows_in                  returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
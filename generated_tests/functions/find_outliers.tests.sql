------------------------------------------------------------------------------------- Checks for ascendco.find_outliers (table_name text, field_name text, frequency_threshold integer, value_threshold integer) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'find_outliers (table_name text, field_name text, frequency_threshold integer, value_threshold integer)', '()', 'ascendco.find_outliers table_name text, field_name text, frequency_threshold integer, value_threshold integer existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''find_outliers''   and pg_get_function_identity_arguments(oid) = ''table_name text, field_name text, frequency_threshold integer, value_threshold integer'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'find_outliers (table_name text, field_name text, frequency_threshold integer, value_threshold integer)', '()', 'ascendco.find_outliers table_name text, field_name text, frequency_threshold integer, value_threshold integer definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''find_outliers''   and pg_get_function_identity_arguments(oid) = ''table_name text, field_name text, frequency_threshold integer, value_threshold integer'';', 'CREATE OR REPLACE FUNCTION ascendco.find_outliers(table_name text, field_name text, frequency_threshold integer, value_threshold integer) RETURNS TABLE(value_ integer, frequency_percentile integer, value_percentile integer) LANGUAGE plpgsqlAS $function$BEGIN	RETURN QUERY EXECUTE ''withfrequency_counts as (   select '' ||  field_name || ''::INT as value_,          count(*) as frequency              from '' || table_name || ''			  where '' ||  field_name || '' > 0	      group by 1	      order by 2),frequency_percentiles as (   select *,         ntile(100) over (order by frequency asc) as frequency_percentile,         ntile(100) over (order by value_ asc) as value_percentile	  from frequency_counts)select value_,       frequency_percentile,       value_percentile  from frequency_percentiles   where frequency_percentile < '' || frequency_threshold || ''  and         value_ >         (select value_          from frequency_counts          where value_percentile > '' || value_threshold || ''          limit 1)order by 1,2,3'';END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
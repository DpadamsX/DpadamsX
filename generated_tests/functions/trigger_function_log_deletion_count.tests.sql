------------------------------------------------------------------------------------- Checks for ascendco.trigger_function_log_deletion_count () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_log_deletion_count ()', '()', 'ascendco.trigger_function_log_deletion_count  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_log_deletion_count''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'trigger_function_log_deletion_count ()', '()', 'ascendco.trigger_function_log_deletion_count  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''trigger_function_log_deletion_count''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION ascendco.trigger_function_log_deletion_count() RETURNS trigger LANGUAGE plpgsqlAS $function$DECLAREdeleted_count int := (select count(*) from deleted_rows);BEGINIF deleted_count > 0 THEN	   insert into ascendco.deletion_log				   (operation_name,				   schema_name,				   table_name,				   deleted_count)			 select TG_OP,					TG_TABLE_SCHEMA,					TG_TABLE_NAME,					deleted_count;END IF;	RETURN NULL;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
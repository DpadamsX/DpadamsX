------------------------------------------------------------------------------------- Checks for api.minutes_old (dts timestamp with time zone) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'api', 'minutes_old (dts timestamp with time zone)', '()', 'api.minutes_old dts timestamp with time zone existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''minutes_old''   and pg_get_function_identity_arguments(oid) = ''dts timestamp with time zone'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'api', 'minutes_old (dts timestamp with time zone)', '()', 'api.minutes_old dts timestamp with time zone definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''minutes_old''   and pg_get_function_identity_arguments(oid) = ''dts timestamp with time zone'';', 'CREATE OR REPLACE FUNCTION api.minutes_old(dts timestamp with time zone) RETURNS integer LANGUAGE sql STABLEAS $function$SELECT ((date_part(''epoch''::text, (now() - dts)))::integer / 60)$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
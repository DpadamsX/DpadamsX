------------------------------------------------------------------------------------- Checks for api.hour_number (dts timestamp with time zone) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'api', 'hour_number (dts timestamp with time zone)', '()', 'api.hour_number dts timestamp with time zone existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''hour_number''   and pg_get_function_identity_arguments(oid) = ''dts timestamp with time zone'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'api', 'hour_number (dts timestamp with time zone)', '()', 'api.hour_number dts timestamp with time zone definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''api''   and proname = ''hour_number''   and pg_get_function_identity_arguments(oid) = ''dts timestamp with time zone'';', 'CREATE OR REPLACE FUNCTION api.hour_number(dts timestamp with time zone) RETURNS smallint LANGUAGE sql STABLEAS $function$/* day numbers are 0-6 and hours are 0-23 in postgres. this function shifts those to 1-7 and 1-24,   and gives you the hour-in-the-week result. so 12:30 am sunday night is 1, 1:00 sunday night is 2	 1:00 monday night is 25, and so on. */select ((extract(dow from dts) + 1) * 24 +	   (extract (hour from dts) + 1)) ::int2$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
------------------------------------------------------------------------------------- Checks for types_plus.insert_item_arch_v1 (data_in item_arch_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_item_arch_v1 (data_in item_arch_v1[])', '()', 'types_plus.insert_item_arch_v1 data_in item_arch_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_item_arch_v1''   and pg_get_function_identity_arguments(oid) = ''data_in item_arch_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_item_arch_v1 (data_in item_arch_v1[])', '()', 'types_plus.insert_item_arch_v1 data_in item_arch_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_item_arch_v1''   and pg_get_function_identity_arguments(oid) = ''data_in item_arch_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_item_arch_v1(data_in item_arch_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO item_arch (			id,			facility_id,			clinic_id,			created_dts,			updated_dts,			previous_as_of,			marked_for_deletion,			is_current,			name_,			type_,			created_by,			updated_by)                  SELECT			rows_in.id,			rows_in.facility_id,			rows_in.clinic_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.previous_as_of,			rows_in.marked_for_deletion,			rows_in.is_current,			rows_in.name_,			rows_in.type_,			rows_in.created_by,			rows_in.updated_by                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			facility_id = EXCLUDED.facility_id,			clinic_id = EXCLUDED.clinic_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			previous_as_of = EXCLUDED.previous_as_of,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_current = EXCLUDED.is_current,			name_ = EXCLUDED.name_,			type_ = EXCLUDED.type_,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
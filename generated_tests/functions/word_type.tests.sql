------------------------------------------------------------------------------------- Checks for tools.word_type (word_in citext) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', 'word_type (word_in citext)', '()', 'tools.word_type word_in citext existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''word_type''   and pg_get_function_identity_arguments(oid) = ''word_in citext'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', 'word_type (word_in citext)', '()', 'tools.word_type word_in citext definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''word_type''   and pg_get_function_identity_arguments(oid) = ''word_in citext'';', 'CREATE OR REPLACE FUNCTION tools.word_type(word_in citext) RETURNS citext LANGUAGE sqlAS $function$select description::citext  from ts_debug(''simple'', word_in)  limit 1 -- only the first word$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
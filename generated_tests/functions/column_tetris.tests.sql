------------------------------------------------------------------------------------- Checks for dba.column_tetris (table_in regclass) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'column_tetris (table_in regclass)', '()', 'dba.column_tetris table_in regclass existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''column_tetris''   and pg_get_function_identity_arguments(oid) = ''table_in regclass'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'column_tetris (table_in regclass)', '()', 'dba.column_tetris table_in regclass definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''column_tetris''   and pg_get_function_identity_arguments(oid) = ''table_in regclass'';', 'CREATE OR REPLACE FUNCTION dba.column_tetris(table_in regclass) RETURNS TABLE(column_name text, type_name text, type_align text, alignment_description text, type_length smallint, suggestioned_position bigint, current_position smallint) LANGUAGE sqlAS $function$   SELECT a.attname::text  AS column_name,          t.typname::text  AS type_name,          t.typalign::text AS type_align,          CASE             WHEN typalign = ''c'' THEN ''char alignment, no alignment needed''             WHEN typalign = ''s'' THEN ''short alignment, 2 bytes on most machines''             WHEN typalign = ''i'' THEN ''int alignment, 4 bytes on most machines''             WHEN typalign = ''d'' THEN ''double alignment, 8 bytes on many machines, but by no means all''             ELSE ''Unexpected typalign '' || typalign			END AS alignment_description,          t.typlen   AS type_length,          ROW_NUMBER () OVER (ORDER BY t.typlen DESC,a.attname) as suggested_position,          a.attnum   AS currrent_position     FROM pg_class c     JOIN pg_attribute a ON (a.attrelid = c.oid)     JOIN pg_type t ON (t.oid = a.atttypid)    WHERE c.relname = table_in::name AND          a.attnum >= 0 ORDER BY t.typlen DESC,a.attname;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
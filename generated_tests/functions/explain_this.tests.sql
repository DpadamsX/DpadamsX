------------------------------------------------------------------------------------- Checks for dba.explain_this (l_query text, OUT explain json) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'explain_this (l_query text, OUT explain json)', '()', 'dba.explain_this l_query text, OUT explain json existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''explain_this''   and pg_get_function_identity_arguments(oid) = ''l_query text, OUT explain json'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'explain_this (l_query text, OUT explain json)', '()', 'dba.explain_this l_query text, OUT explain json definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''explain_this''   and pg_get_function_identity_arguments(oid) = ''l_query text, OUT explain json'';', 'CREATE OR REPLACE FUNCTION dba.explain_this(l_query text, OUT explain json) RETURNS SETOF json LANGUAGE plpgsql STRICT SECURITY DEFINERAS $function$BEGIN  RETURN QUERY EXECUTE ''explain (format json) '' || l_query;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
------------------------------------------------------------------------------------- Checks for ascendco.calendar_year_add (calendar_id_in uuid, fiscal_year_name_in citext, fiscal_year_abbr_in citext, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'calendar_year_add (calendar_id_in uuid, fiscal_year_name_in citext, fiscal_year_abbr_in citext, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer)', '()', 'ascendco.calendar_year_add calendar_id_in uuid, fiscal_year_name_in citext, fiscal_year_abbr_in citext, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''calendar_year_add''   and pg_get_function_identity_arguments(oid) = ''calendar_id_in uuid, fiscal_year_name_in citext, fiscal_year_abbr_in citext, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'calendar_year_add (calendar_id_in uuid, fiscal_year_name_in citext, fiscal_year_abbr_in citext, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer)', '()', 'ascendco.calendar_year_add calendar_id_in uuid, fiscal_year_name_in citext, fiscal_year_abbr_in citext, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''calendar_year_add''   and pg_get_function_identity_arguments(oid) = ''calendar_id_in uuid, fiscal_year_name_in citext, fiscal_year_abbr_in citext, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer'';', 'CREATE OR REPLACE FUNCTION ascendco.calendar_year_add(calendar_id_in uuid, fiscal_year_name_in citext, fiscal_year_abbr_in citext, first_date_in_year_in date, last_date_in_year_in date, week_start_offset integer DEFAULT 1) RETURNS citext LANGUAGE plpgsqlAS $function$DECLARE   calendar_year_id_out                             uuid;   -- Returned by INSERT below.   days_in_year_calculated            int2      :=  last_date_in_year_in - first_date_in_year_in + 1;   weeks_in_year_calculated           int2      :=  days_in_year_calculated/7;   first_day_of_week_usa_calculated   int2      :=  extract (dow from first_date_in_year_in) + 1;  -- 1-7, Sunday-Monday, US convention.   first_day_of_week_iso_calclated    int2      :=  extract (isodow from first_date_in_year_in); -- 1-7, Monday-Saturday, ISO convention.-- Note: TO_CHAR adds a space after the day name, that''s what the regex is about. See-- https://stackoverflow.com/questions/22699535/trim-trailing-spaces-with-postgresql   first_day_of_week_name_calculated  day_name  :=  regexp_replace(to_char (first_date_in_year_in, ''Day'') , ''\s+$'', ''''); -- Sunday-Monday. day_name is a custom domain (type+rules).BEGIN-- The parameter types screen out most bad inputs, but it''s still possible to screw up the start-end range. A few quick checks.IF first_date_in_year_in > last_date_in_year_in THEN  RAISE EXCEPTION USING     message = ''Invalid date range: '' || first_date_in_year_in::text || '' to '' || last_date_in_year_in::text,     hint = ''The first day in the year is later than the last day in the year.'',     errcode = ''KC400''; -- Custom code, see the error_code table.END IF;IF days_in_year_calculated < 364 OR days_in_year_calculated > 371 THEN  RAISE EXCEPTION USING     message = ''Invalid date range: ''  || first_date_in_year_in::text || '' to '' || last_date_in_year_in::text,     hint =  days_in_year_calculated::text || '' days in the fiscal year. fiscal years are expected to have 52 or 53 weeks for 364 or 371 days total.'',     errcode = ''KC401''; -- Custom code, see the error_code table.END IF;DELETE FROM ascendco.calendar_year      WHERE calendar_id = calendar_id_in  -- CASCADE delete flows through to related child tables.        AND fiscal_year_name = fiscal_year_name_in;INSERT INTO calendar_year  (calendar_id,                            fiscal_year_name,                            fiscal_year_abbr,                            first_date_in_year,                            last_date_in_year,                            days_in_year,                            weeks_in_year,                            first_day_of_week_usa,                            first_day_of_week_iso,                            first_day_of_week_name,                            week_start_offset)                    VALUES (calendar_id_in,                            fiscal_year_name_in,                            fiscal_year_abbr_in,                            first_date_in_year_in,                            last_date_in_year_in,                            days_in_year_calculated,                            weeks_in_year_calculated,                            first_day_of_week_usa_calculated,                            first_day_of_week_iso_calclated,                            first_day_of_week_name_calculated,                            week_start_offset)--  The RETURNING clauses is a very cool Postgres extension to SQL. It should be in the standards.--  The ID is set in the table definition on INSERT as a generated UUID.            RETURNING id into calendar_year_id_out;-- PERFORM instead of SELECT to discard the result.-- The records are still created, they''re just not returned by this function.PERFORM calendar_insert_year_of_days(        calendar_id_in,        calendar_year_id_out,        fiscal_year_name_in,        fiscal_year_abbr_in,        first_date_in_year_in,        last_date_in_year_in,        week_start_offset);RETURN calendar_year_id_out;END$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
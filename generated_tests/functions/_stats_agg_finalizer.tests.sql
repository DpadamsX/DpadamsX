------------------------------------------------------------------------------------- Checks for tools._stats_agg_finalizer (_stats_agg_accum_type) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'tools', '_stats_agg_finalizer (_stats_agg_accum_type)', '()', 'tools._stats_agg_finalizer _stats_agg_accum_type existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''_stats_agg_finalizer''   and pg_get_function_identity_arguments(oid) = ''_stats_agg_accum_type'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'tools', '_stats_agg_finalizer (_stats_agg_accum_type)', '()', 'tools._stats_agg_finalizer _stats_agg_accum_type definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''tools''   and proname = ''_stats_agg_finalizer''   and pg_get_function_identity_arguments(oid) = ''_stats_agg_accum_type'';', 'CREATE OR REPLACE FUNCTION tools._stats_agg_finalizer(_stats_agg_accum_type) RETURNS _stats_agg_result_type LANGUAGE plpgsqlAS $function$BEGIN	RETURN row(		$1.n,		$1.min,		$1.max,		$1.m1,		$1.m2 / nullif(($1.n - 1.0), 0),		case when $1.m2 = 0 then null else sqrt($1.n) * $1.m3 / nullif(($1.m2 ^ 1.5), 0) end,		case when $1.m2 = 0 then null else $1.n * $1.m4 / nullif(($1.m2 * $1.m2) - 3.0, 0) end	);END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
------------------------------------------------------------------------------------- Checks for types_plus.insert_q_event_audit_step_v1 (data_in q_event_audit_step_v1[]) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'insert_q_event_audit_step_v1 (data_in q_event_audit_step_v1[])', '()', 'types_plus.insert_q_event_audit_step_v1 data_in q_event_audit_step_v1[] existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_q_event_audit_step_v1''   and pg_get_function_identity_arguments(oid) = ''data_in q_event_audit_step_v1[]'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'insert_q_event_audit_step_v1 (data_in q_event_audit_step_v1[])', '()', 'types_plus.insert_q_event_audit_step_v1 data_in q_event_audit_step_v1[] definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''insert_q_event_audit_step_v1''   and pg_get_function_identity_arguments(oid) = ''data_in q_event_audit_step_v1[]'';', 'CREATE OR REPLACE FUNCTION types_plus.insert_q_event_audit_step_v1(data_in q_event_audit_step_v1[]) RETURNS integer LANGUAGE sqlAS $function$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO q_event_audit_step (			id,			qevent_id,			qaudit_step_id,			last_updated_by_data_file_id,			updated_dts,			created_dts,			sort,			marked_for_deletion,			is_coached,			notes,			created_by,			updated_by,			step,			qsub_type_id_event,			status)                  SELECT			rows_in.id,			rows_in.qevent_id,			rows_in.qaudit_step_id,			rows_in.last_updated_by_data_file_id,			rows_in.updated_dts,			rows_in.created_dts,			rows_in.sort,			rows_in.marked_for_deletion,			rows_in.is_coached,			rows_in.notes,			rows_in.created_by,			rows_in.updated_by,			rows_in.step,			rows_in.qsub_type_id_event,			rows_in.status                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			qevent_id = EXCLUDED.qevent_id,			qaudit_step_id = EXCLUDED.qaudit_step_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			updated_dts = EXCLUDED.updated_dts,			created_dts = EXCLUDED.created_dts,			sort = EXCLUDED.sort,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_coached = EXCLUDED.is_coached,			notes = EXCLUDED.notes,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			step = EXCLUDED.step,			qsub_type_id_event = EXCLUDED.qsub_type_id_event,			status = EXCLUDED.status          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
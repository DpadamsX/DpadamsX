------------------------------------------------------------------------------------- Checks for ascendco.outlier_fix () function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'ascendco', 'outlier_fix ()', '()', 'ascendco.outlier_fix  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''outlier_fix''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'ascendco', 'outlier_fix ()', '()', 'ascendco.outlier_fix  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''ascendco''   and proname = ''outlier_fix''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE FUNCTION ascendco.outlier_fix() RETURNS TABLE(schema_name text, table_name text, column_name text, id uuid, value_was bigint, set_to bigint, change_count bigint) LANGUAGE plpgsqlAS $function$DECLARE    rule record;    now_ timestamptz = NOW();BEGIN	FOR rule IN SELECT * FROM ascendco.outlier_rule LOOP		EXECUTE FORMAT (       ''INSERT INTO outlier_change (						outlier_rule_id,						set_to,						id,						value_was)			   SELECT %6$L,						%5$s,						%2$I.id,						%2$I.%3$I			     FROM %1$I.%2$I			    WHERE %3$I > %4$s				   ON CONFLICT(id,outlier_rule_id) DO UPDATE SET					   value_was = EXCLUDED.value_was,					   set_to    = EXCLUDED.set_to          RETURNING outlier_rule_id,			          id,			          value_was,			          set_to			          change_count;			 UPDATE %1$I.%2$I			    SET %3$I = %5$s			  WHERE %3$I > %4$s;'',				rule.schema_name,				rule.table_name,				rule.column_name,				rule.threshold,				rule.set_to,				rule.id);  END LOOP;  RETURN QUERY EXECUTE (''		SELECT outlier_rule.schema_name,              outlier_rule.table_name,              outlier_rule.column_name,              outlier_change.id,              outlier_change.value_was,              outlier_change.set_to,              outlier_change.change_count		  FROM outlier_change		  JOIN outlier_rule ON (outlier_rule.id = outlier_change.outlier_rule_id)		 WHERE last_changed_dts = $1'')	USING now_;END;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
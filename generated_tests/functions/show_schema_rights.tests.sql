------------------------------------------------------------------------------------- Checks for dba.show_schema_rights (s_name text) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'dba', 'show_schema_rights (s_name text)', '()', 'dba.show_schema_rights s_name text existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''show_schema_rights''   and pg_get_function_identity_arguments(oid) = ''s_name text'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'dba', 'show_schema_rights (s_name text)', '()', 'dba.show_schema_rights s_name text definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''show_schema_rights''   and pg_get_function_identity_arguments(oid) = ''s_name text'';', 'CREATE OR REPLACE FUNCTION dba.show_schema_rights(s_name text) RETURNS TABLE(schema_name text, user_name name, usage text, "create" text) LANGUAGE sql STABLEAS $function$  	select s_name,				 u.usename,	         CASE WHEN has_schema_privilege(u.usename, s_name, ''usage'') = TRUE then ''X'' ELSE '' '' END AS usage,         CASE WHEN has_schema_privilege(u.usename, s_name, ''create'') = TRUE then ''X'' ELSE '' '' END AS create				  	from  pg_user u	order by u.usename;$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
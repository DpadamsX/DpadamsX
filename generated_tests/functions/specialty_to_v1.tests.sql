------------------------------------------------------------------------------------- Checks for types_plus.specialty_to_v1 (specialty_in specialty) function------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Function', 'types_plus', 'specialty_to_v1 (specialty_in specialty)', '()', 'types_plus.specialty_to_v1 specialty_in specialty existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''specialty_to_v1''   and pg_get_function_identity_arguments(oid) = ''specialty_in specialty'';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Function', 'types_plus', 'specialty_to_v1 (specialty_in specialty)', '()', 'types_plus.specialty_to_v1 specialty_in specialty definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''types_plus''   and proname = ''specialty_to_v1''   and pg_get_function_identity_arguments(oid) = ''specialty_in specialty'';', 'CREATE OR REPLACE FUNCTION types_plus.specialty_to_v1(specialty_in specialty) RETURNS specialty_v1 LANGUAGE sqlAS $function$        SELECT			specialty_in.id,			specialty_in.data_file_id,			specialty_in.marked_for_deletion,			specialty_in.name_,			specialty_in.name_short$function$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
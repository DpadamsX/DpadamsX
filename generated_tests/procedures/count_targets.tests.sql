------------------------------------------------------------------------------------- Checks for dba.count_targets () procedure------------------------------------------------------------------------------------- Existence check:select * from test_case_setup('Procedure', 'dba', 'count_targets ()', '', 'dba.count_targets  existence check', 'select count(*) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''count_targets''   and pg_get_function_identity_arguments(oid) = '''';', '1', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');-- Definition check:select * from test_case_setup('Procedure', 'dba', 'count_targets ()', '', 'dba.count_targets  definition check', 'select pg_get_functiondef(oid) from pg_proc where pronamespace::regnamespace::text = ''dba''   and proname = ''count_targets''   and pg_get_function_identity_arguments(oid) = '''';', 'CREATE OR REPLACE PROCEDURE dba.count_targets() LANGUAGE sqlAS $procedure$/*Capture daily row counts for targets of interest by hsys and target into dba.target_count:ascendco.analytic_productivityascendco.analytic_scanascendco.analytic_sterilizer_loadinvascendco.analytic_sterilizer_loadNote: This is a stored PROCEDURE, not a FUNCTION. CALL count_targets(), not SELECT count_targets().*/WITHraw_counts AS (---------------------------------------------------- ascendco.analytic_productivity--------------------------------------------------   select hsys_id,          count(*)                             as records_count,          ''ascendco''                           as schema_name,          ''analytic_productivity''              as target_name      from ascendco.analytic_productivity  group by 1 union all---------------------------------------------------- ascendco.analytic_scan--------------------------------------------------    select hsys_id,           count(*)                            as records_count,          ''ascendco''                           as schema_name,          ''analytic_scan''                      as target_name      from ascendco.analytic_scan  group by 1 union all---------------------------------------------------- ascendco.ascendco.analytic_sterilizer_loadinv--------------------------------------------------    select hsys_id,           count(*)                            as records_count,          ''ascendco''                           as schema_name,          ''analytic_sterilizer_loadinv''        as target_name      from ascendco.analytic_sterilizer_loadinv  group by 1 union all---------------------------------------------------- ascendco.ascendco.analytic_sterilizer_load---------------------------------------------------- ascendco.analytic_sterilizer_load doesn''t have hsys_id. D''oh!-- Look it up through facility_id, which is present.    select facility.hsys_id,           count(*)                            as records_count,           ''ascendco''                          as schema_name,           ''analytic_sterilizer_load''          as target_name       from ascendco.analytic_sterilizer_load left join facility on facility.id = analytic_sterilizer_load.facility_id  group by 1),---------------------------------------------------- Clear out bogus results--------------------------------------------------cleaned_counts AS (    select *     from raw_counts    where hsys_id IS NOT NULL      and hsys_id <> ''00000000-0000-0000-0000-000000000000'')---------------------------------------------------- Put it all together-------------------------------------------------- INSERT INTO dba.target_count (               hsys_id,               qualified_name,               records_count,               count_date,               count_dts)        SELECT hsys_id,               concat (schema_name, ''.'', target_name),               records_count,               current_date,               now()         FROM cleaned_counts  ON CONFLICT ON CONSTRAINT target_count_pk  DO UPDATE SET               records_count = EXCLUDED.records_count,               count_date    = EXCLUDED.count_date,               count_dts     = EXCLUDED.count_dts;$procedure$', '', 'text', '{"comparator":"equals","column_order":"ignore","case_sensitivity":"blind","whitespace_cleaning":"all","normalize_line_endings":true}', 'Pass', '{user_change_structure}', FALSE, FALSE, '', '');
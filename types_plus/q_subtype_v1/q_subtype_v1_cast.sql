-- Create a casting function to convert q_subtype rows into the compound type format q_subtype_v1.-- If q_subtype changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.q_subtype_to_v1 (q_subtype_in q_subtype)  RETURNS q_subtype_v1AS $BODY$        SELECT			q_subtype_in.id,			q_subtype_in.qtype_id,			q_subtype_in.qlevel_id,			q_subtype_in.facility_group_id,			q_subtype_in.facility_id,			q_subtype_in.hsys_id,			q_subtype_in.last_updated_by_data_file_id,			q_subtype_in.created_dts,			q_subtype_in.updated_dts,			q_subtype_in.is_available_in_assembly,			q_subtype_in.is_available_in_decon,			q_subtype_in.marked_for_deletion,			q_subtype_in.is_for_inv,			q_subtype_in.is_active,			q_subtype_in.ascendco_name,			q_subtype_in.updated_by,			q_subtype_in.type_,			q_subtype_in.available_for,			q_subtype_in.created_by,			q_subtype_in.name_,			q_subtype_in.item_type_ids$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.q_subtype_to_v1 (q_subtype_in q_subtype)	OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert q_subtype rows into the q_subtype_v1 compound type format using the following syntax:-- select q_subtype::q_subtype_v1 from q_subtypeDROP CAST IF EXISTS (q_subtype as q_subtype_v1);CREATE CAST (q_subtype as q_subtype_v1) WITH FUNCTION types_plus.q_subtype_to_v1(q_subtype);
-- Create a view onto loaner_item formatted as loaner_item_v1.-- If loaner_item changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_loaner_item_v1.DROP VIEW IF EXISTS types_plus.loaner_item_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.loaner_item_v1 AS select id,        loaner_id,        item_id,        last_updated_by_data_file_id,        updated_dts,        created_dts,        left_behind_qty,        qty,        pickup_qty,        marked_for_deletion,        updated_by,        created_by   from loaner_item;ALTER TABLE types_plus.loaner_item_v1    OWNER TO user_change_structure;-- Create a casting function to convert loaner_item rows into the compound type format loaner_item_v1.-- If loaner_item changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.loaner_item_to_v1 (loaner_item_in loaner_item)  RETURNS loaner_item_v1AS $BODY$                   SELECT			loaner_item_in.id,			loaner_item_in.loaner_id,			loaner_item_in.item_id,			loaner_item_in.last_updated_by_data_file_id,			loaner_item_in.updated_dts,			loaner_item_in.created_dts,			loaner_item_in.left_behind_qty,			loaner_item_in.qty,			loaner_item_in.pickup_qty,			loaner_item_in.marked_for_deletion,			loaner_item_in.updated_by,			loaner_item_in.created_by               $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.loaner_item_to_v1 (loaner_item_in loaner_item)	OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert loaner_item rows into the loaner_item_v1 compound type format using the following syntax:-- select loaner_item::loaner_item_v1 from loaner_itemDROP CAST IF EXISTS (loaner_item as loaner_item_v1);CREATE CAST (loaner_item as loaner_item_v1) WITH FUNCTION types_plus.loaner_item_to_v1(loaner_item);-- Create a function to accept an array of rows formatted as loaner_item_v1 for UPSERT into loaner_item.DROP FUNCTION IF EXISTS types_plus.insert_loaner_item_v1 (types_plus.loaner_item_v1[]);  CREATE OR REPLACE FUNCTION types_plus.insert_loaner_item_v1 (data_in types_plus.loaner_item_v1[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO loaner_item (			id,			loaner_id,			item_id,			last_updated_by_data_file_id,			updated_dts,			created_dts,			left_behind_qty,			qty,			pickup_qty,			marked_for_deletion,			updated_by,			created_by)                  SELECT			rows_in.id,			rows_in.loaner_id,			rows_in.item_id,			rows_in.last_updated_by_data_file_id,			rows_in.updated_dts,			rows_in.created_dts,			rows_in.left_behind_qty,			rows_in.qty,			rows_in.pickup_qty,			rows_in.marked_for_deletion,			rows_in.updated_by,			rows_in.created_by                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			loaner_id = EXCLUDED.loaner_id,			item_id = EXCLUDED.item_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			updated_dts = EXCLUDED.updated_dts,			created_dts = EXCLUDED.created_dts,			left_behind_qty = EXCLUDED.left_behind_qty,			qty = EXCLUDED.qty,			pickup_qty = EXCLUDED.pickup_qty,			marked_for_deletion = EXCLUDED.marked_for_deletion,			updated_by = EXCLUDED.updated_by,			created_by = EXCLUDED.created_by          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_loaner_item_v1(types_plus.loaner_item_v1[])	OWNER TO user_bender;
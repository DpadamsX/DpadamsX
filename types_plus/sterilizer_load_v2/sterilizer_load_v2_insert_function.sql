-- Create a function to accept an array of rows formatted as sterilizer_load_v2 for UPSERT into sterilizer_load.DROP FUNCTION IF EXISTS types_plus.insert_sterilizer_load_v2 (types_plus.sterilizer_load_v2[]);CREATE OR REPLACE FUNCTION types_plus.insert_sterilizer_load_v2 (data_in types_plus.sterilizer_load_v2[])  RETURNS intAS $BODY$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO sterilizer_load (			id,			data_file_id,			marked_for_deletion,			sterilize_method_id,			sterilizer_id,			sterilize_params_id,			created_dts,			load_no,			status_building_dts,			status_sterilizing_dts,			status_cooling_dts,			status_done_dts,			notes,			failed_notes,			utcoffset_seconds)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.sterilize_method_id,			rows_in.sterilizer_id,			rows_in.sterilize_params_id,			rows_in.created_dts,			rows_in.load_no,			rows_in.status_building_dts,			rows_in.status_sterilizing_dts,			rows_in.status_cooling_dts,			rows_in.status_done_dts,			rows_in.notes,			rows_in.failed_notes,			rows_in.utcoffset_seconds        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			sterilize_method_id = EXCLUDED.sterilize_method_id,			sterilizer_id = EXCLUDED.sterilizer_id,			sterilize_params_id = EXCLUDED.sterilize_params_id,			created_dts = EXCLUDED.created_dts,			load_no = EXCLUDED.load_no,			status_building_dts = EXCLUDED.status_building_dts,			status_sterilizing_dts = EXCLUDED.status_sterilizing_dts,			status_cooling_dts = EXCLUDED.status_cooling_dts,			status_done_dts = EXCLUDED.status_done_dts,			notes = EXCLUDED.notes,			failed_notes = EXCLUDED.failed_notes,			utcoffset_seconds = EXCLUDED.utcoffset_seconds        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.insert_sterilizer_load_v2(types_plus.sterilizer_load_v2[]) OWNER TO user_bender;
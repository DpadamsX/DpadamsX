-- Create a view onto q_level formatted as q_level_v1.-- If q_level changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_q_level_v1.DROP VIEW IF EXISTS types_plus.q_level_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.q_level_v1 AS select id,        hsys_id,        last_updated_by_data_file_id,        created_dts,        updated_dts,        level_,        marked_for_deletion,        created_by,        updated_by,        name_,        ascendco_name   from q_level;ALTER TABLE types_plus.q_level_v1    OWNER TO user_change_structure;-- Create a casting function to convert q_level rows into the compound type format q_level_v1.-- If q_level changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.q_level_to_v1 (q_level_in q_level)  RETURNS q_level_v1AS $BODY$                   SELECT			q_level_in.id,			q_level_in.hsys_id,			q_level_in.last_updated_by_data_file_id,			q_level_in.created_dts,			q_level_in.updated_dts,			q_level_in.level_,			q_level_in.marked_for_deletion,			q_level_in.created_by,			q_level_in.updated_by,			q_level_in.name_,			q_level_in.ascendco_name               $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.q_level_to_v1 (q_level_in q_level)	OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert q_level rows into the q_level_v1 compound type format using the following syntax:-- select q_level::q_level_v1 from q_levelDROP CAST IF EXISTS (q_level as q_level_v1);CREATE CAST (q_level as q_level_v1) WITH FUNCTION types_plus.q_level_to_v1(q_level);-- Create a function to accept an array of rows formatted as q_level_v1 for UPSERT into q_level.DROP FUNCTION IF EXISTS types_plus.insert_q_level_v1 (types_plus.q_level_v1[]);  CREATE OR REPLACE FUNCTION types_plus.insert_q_level_v1 (data_in types_plus.q_level_v1[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO q_level (			id,			hsys_id,			last_updated_by_data_file_id,			created_dts,			updated_dts,			level_,			marked_for_deletion,			created_by,			updated_by,			name_,			ascendco_name)                  SELECT			rows_in.id,			rows_in.hsys_id,			rows_in.last_updated_by_data_file_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.level_,			rows_in.marked_for_deletion,			rows_in.created_by,			rows_in.updated_by,			rows_in.name_,			rows_in.ascendco_name                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			hsys_id = EXCLUDED.hsys_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			level_ = EXCLUDED.level_,			marked_for_deletion = EXCLUDED.marked_for_deletion,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			name_ = EXCLUDED.name_,			ascendco_name = EXCLUDED.ascendco_name          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_q_level_v1(types_plus.q_level_v1[])	OWNER TO user_bender;
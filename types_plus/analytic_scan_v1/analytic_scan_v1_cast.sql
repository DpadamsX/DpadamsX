-- Create a casting function to convert analytic_scan rows into the compound type format analytic_scan_v1.-- If analytic_scan changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.analytic_scan_to_v1 (analytic_scan_in analytic_scan)  RETURNS analytic_scan_v1AS $BODY$        SELECT			analytic_scan_in.id,			analytic_scan_in.data_file_id,			analytic_scan_in.marked_for_deletion,			analytic_scan_in.hsys_id,			analytic_scan_in.facility_id,			analytic_scan_in.facility_location_id,			analytic_scan_in.specialty_id,			analytic_scan_in.scanned_type,			analytic_scan_in.associated_to,			analytic_scan_in.user_name,			analytic_scan_in.inv_name,			analytic_scan_in.num_inst,			analytic_scan_in.tray_or_pack,			analytic_scan_in.item_name,			analytic_scan_in.scan_time_utc_dts,			analytic_scan_in.scan_time_local_dts,			analytic_scan_in.location_description$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.analytic_scan_to_v1 (analytic_scan_in analytic_scan) OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert analytic_scan rows into the analytic_scan_v1 compound type format using the following syntax:-- select analytic_scan::analytic_scan_v1 from analytic_scanDROP CAST IF EXISTS (analytic_scan as analytic_scan_v1);CREATE CAST (analytic_scan as analytic_scan_v1) WITH FUNCTION types_plus.analytic_scan_to_v1(analytic_scan);
-- Create a view onto analytic_scan formatted as analytic_scan_v1.-- If analytic_scan changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_analytic_scan_v1.DROP VIEW IF EXISTS types_plus.analytic_scan_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.analytic_scan_v1 AS select id,        data_file_id,        marked_for_deletion,        hsys_id,        facility_id,        facility_location_id,        specialty_id,        scanned_type,        associated_to,        user_name,        inv_name,        num_inst,        tray_or_pack,        item_name,        scan_time_utc_dts,        scan_time_local_dts,        location_description   from analytic_scan;ALTER TABLE types_plus.analytic_scan_v1    OWNER TO user_change_structure;-- Create a casting function to convert analytic_scan rows into the compound type format analytic_scan_v1.-- If analytic_scan changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.analytic_scan_to_v1 (analytic_scan_in analytic_scan)  RETURNS analytic_scan_v1AS $BODY$        SELECT			analytic_scan_in.id,			analytic_scan_in.data_file_id,			analytic_scan_in.marked_for_deletion,			analytic_scan_in.hsys_id,			analytic_scan_in.facility_id,			analytic_scan_in.facility_location_id,			analytic_scan_in.specialty_id,			analytic_scan_in.scanned_type,			analytic_scan_in.associated_to,			analytic_scan_in.user_name,			analytic_scan_in.inv_name,			analytic_scan_in.num_inst,			analytic_scan_in.tray_or_pack,			analytic_scan_in.item_name,			analytic_scan_in.scan_time_utc_dts,			analytic_scan_in.scan_time_local_dts,			analytic_scan_in.location_description$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.analytic_scan_to_v1 (analytic_scan_in analytic_scan) OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert analytic_scan rows into the analytic_scan_v1 compound type format using the following syntax:-- select analytic_scan::analytic_scan_v1 from analytic_scanDROP CAST IF EXISTS (analytic_scan as analytic_scan_v1);CREATE CAST (analytic_scan as analytic_scan_v1) WITH FUNCTION types_plus.analytic_scan_to_v1(analytic_scan);-- Create a function to accept an array of rows formatted as analytic_scan_v1 for UPSERT into analytic_scan.DROP FUNCTION IF EXISTS types_plus.insert_analytic_scan_v1 (types_plus.analytic_scan_v1[]);CREATE OR REPLACE FUNCTION types_plus.insert_analytic_scan_v1 (data_in types_plus.analytic_scan_v1[])  RETURNS intAS $BODY$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO analytic_scan (			id,			data_file_id,			marked_for_deletion,			hsys_id,			facility_id,			facility_location_id,			specialty_id,			scanned_type,			associated_to,			user_name,			inv_name,			num_inst,			tray_or_pack,			item_name,			scan_time_utc_dts,			scan_time_local_dts,			location_description)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.hsys_id,			rows_in.facility_id,			rows_in.facility_location_id,			rows_in.specialty_id,			rows_in.scanned_type,			rows_in.associated_to,			rows_in.user_name,			rows_in.inv_name,			rows_in.num_inst,			rows_in.tray_or_pack,			rows_in.item_name,			rows_in.scan_time_utc_dts,			rows_in.scan_time_local_dts,			rows_in.location_description        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			hsys_id = EXCLUDED.hsys_id,			facility_id = EXCLUDED.facility_id,			facility_location_id = EXCLUDED.facility_location_id,			specialty_id = EXCLUDED.specialty_id,			scanned_type = EXCLUDED.scanned_type,			associated_to = EXCLUDED.associated_to,			user_name = EXCLUDED.user_name,			inv_name = EXCLUDED.inv_name,			num_inst = EXCLUDED.num_inst,			tray_or_pack = EXCLUDED.tray_or_pack,			item_name = EXCLUDED.item_name,			scan_time_utc_dts = EXCLUDED.scan_time_utc_dts,			scan_time_local_dts = EXCLUDED.scan_time_local_dts,			location_description = EXCLUDED.location_description        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.insert_analytic_scan_v1(types_plus.analytic_scan_v1[]) OWNER TO user_bender;
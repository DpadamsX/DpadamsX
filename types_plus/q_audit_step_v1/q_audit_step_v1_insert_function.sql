-- Create a function to accept an array of rows formatted as q_audit_step_v1 for UPSERT into q_audit_step.DROP FUNCTION IF EXISTS types_plus.insert_q_audit_step_v1 (types_plus.q_audit_step_v1[]);  CREATE OR REPLACE FUNCTION types_plus.insert_q_audit_step_v1 (data_in types_plus.q_audit_step_v1[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO q_audit_step (			id,			hsys_id,			qsub_type_id_audit,			step,			marked_for_deletion,			last_updated_by_data_file_id,			created_dts,			updated_dts,			created_by,			updated_by,			sort,			qsub_type_id_event)                  SELECT			rows_in.id,			rows_in.hsys_id,			rows_in.qsub_type_id_audit,			rows_in.step,			rows_in.marked_for_deletion,			rows_in.last_updated_by_data_file_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.created_by,			rows_in.updated_by,			rows_in.sort,			rows_in.qsub_type_id_event                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			hsys_id = EXCLUDED.hsys_id,			qsub_type_id_audit = EXCLUDED.qsub_type_id_audit,			step = EXCLUDED.step,			marked_for_deletion = EXCLUDED.marked_for_deletion,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			sort = EXCLUDED.sort,			qsub_type_id_event = EXCLUDED.qsub_type_id_event          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_q_audit_step_v1(types_plus.q_audit_step_v1[])	OWNER TO user_bender;
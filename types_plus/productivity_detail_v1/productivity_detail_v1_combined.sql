-- Create a view onto productivity_detail formatted as productivity_detail_v1.-- If productivity_detail changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_productivity_detail_v1.DROP VIEW IF EXISTS types_plus.productivity_detail_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.productivity_detail_v1 AS select id,        source_record_row_counter,        start_time_dts,        source_table_number,        data_file_id,        user_id,        facility_id,        assembly_inst,        assembly_pack,        assembly_tray,        assembly_points,        assembly_seconds_trays,        assembly_seconds_overall,        pause_seconds,        duration_seconds,        placeholder_row,        description,        year_and_month,        start_date,        time_label,        duration,        pause_time,        activity,        user_label   from productivity_detail;ALTER TABLE types_plus.productivity_detail_v1    OWNER TO user_change_structure;-- Create a casting function to convert productivity_detail rows into the compound type format productivity_detail_v1.-- If productivity_detail changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.productivity_detail_to_v1 (productivity_detail_in productivity_detail)  RETURNS productivity_detail_v1AS $BODY$        SELECT			productivity_detail_in.id,			productivity_detail_in.source_record_row_counter,			productivity_detail_in.start_time_dts,			productivity_detail_in.source_table_number,			productivity_detail_in.data_file_id,			productivity_detail_in.user_id,			productivity_detail_in.facility_id,			productivity_detail_in.assembly_inst,			productivity_detail_in.assembly_pack,			productivity_detail_in.assembly_tray,			productivity_detail_in.assembly_points,			productivity_detail_in.assembly_seconds_trays,			productivity_detail_in.assembly_seconds_overall,			productivity_detail_in.pause_seconds,			productivity_detail_in.duration_seconds,			productivity_detail_in.placeholder_row,			productivity_detail_in.description,			productivity_detail_in.year_and_month,			productivity_detail_in.start_date,			productivity_detail_in.time_label,			productivity_detail_in.duration,			productivity_detail_in.pause_time,			productivity_detail_in.activity,			productivity_detail_in.user_label$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.productivity_detail_to_v1 (productivity_detail_in productivity_detail)	OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert productivity_detail rows into the productivity_detail_v1 compound type format using the following syntax:-- select productivity_detail::productivity_detail_v1 from productivity_detailDROP CAST IF EXISTS (productivity_detail as productivity_detail_v1);CREATE CAST (productivity_detail as productivity_detail_v1) WITH FUNCTION types_plus.productivity_detail_to_v1(productivity_detail);-- Create a function to accept an array of rows formatted as productivity_detail_v1 for UPSERT into productivity_detail.DROP FUNCTION IF EXISTS types_plus.insert_productivity_detail_v1 (types_plus.productivity_detail_v1[]);CREATE OR REPLACE FUNCTION types_plus.insert_productivity_detail_v1 (data_in types_plus.productivity_detail_v1[])  RETURNS intAS $BODY$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO productivity_detail (			id,			source_record_row_counter,			start_time_dts,			source_table_number,			data_file_id,			user_id,			facility_id,			assembly_inst,			assembly_pack,			assembly_tray,			assembly_points,			assembly_seconds_trays,			assembly_seconds_overall,			pause_seconds,			duration_seconds,			placeholder_row,			description,			year_and_month,			start_date,			time_label,			duration,			pause_time,			activity,			user_label)        SELECT			rows_in.id,			rows_in.source_record_row_counter,			rows_in.start_time_dts,			rows_in.source_table_number,			rows_in.data_file_id,			rows_in.user_id,			rows_in.facility_id,			rows_in.assembly_inst,			rows_in.assembly_pack,			rows_in.assembly_tray,			rows_in.assembly_points,			rows_in.assembly_seconds_trays,			rows_in.assembly_seconds_overall,			rows_in.pause_seconds,			rows_in.duration_seconds,			rows_in.placeholder_row,			rows_in.description,			rows_in.year_and_month,			rows_in.start_date,			rows_in.time_label,			rows_in.duration,			rows_in.pause_time,			rows_in.activity,			rows_in.user_label        FROM unnest(data_in) as rows_in        ON CONFLICT ON CONSTRAINT productivity_detail_id_pkey DO UPDATE SET			source_record_row_counter = EXCLUDED.source_record_row_counter,			start_time_dts = EXCLUDED.start_time_dts,			source_table_number = EXCLUDED.source_table_number,			data_file_id = EXCLUDED.data_file_id,			user_id = EXCLUDED.user_id,			facility_id = EXCLUDED.facility_id,			assembly_inst = EXCLUDED.assembly_inst,			assembly_pack = EXCLUDED.assembly_pack,			assembly_tray = EXCLUDED.assembly_tray,			assembly_points = EXCLUDED.assembly_points,			assembly_seconds_trays = EXCLUDED.assembly_seconds_trays,			assembly_seconds_overall = EXCLUDED.assembly_seconds_overall,			pause_seconds = EXCLUDED.pause_seconds,			duration_seconds = EXCLUDED.duration_seconds,			placeholder_row = EXCLUDED.placeholder_row,			description = EXCLUDED.description,			year_and_month = EXCLUDED.year_and_month,			start_date = EXCLUDED.start_date,			time_label = EXCLUDED.time_label,			duration = EXCLUDED.duration,			pause_time = EXCLUDED.pause_time,			activity = EXCLUDED.activity,			user_label = EXCLUDED.user_label        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.insert_productivity_detail_v1(types_plus.productivity_detail_v1[])	OWNER TO user_bender;
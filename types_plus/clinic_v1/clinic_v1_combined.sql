-- Create a view onto clinic formatted as clinic_v1.-- If clinic changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_clinic_v1.DROP VIEW IF EXISTS types_plus.clinic_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.clinic_v1 AS select id,        hsys_id,        created_dts,        updated_dts,        marked_for_deletion,        receive_at_clinic,        name_,        created_by,        updated_by   from clinic;ALTER TABLE types_plus.clinic_v1    OWNER TO user_change_structure;-- Create a casting function to convert clinic rows into the compound type format clinic_v1.-- If clinic changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.clinic_to_v1 (clinic_in clinic)  RETURNS clinic_v1AS $BODY$                   SELECT			clinic_in.id,			clinic_in.hsys_id,			clinic_in.created_dts,			clinic_in.updated_dts,			clinic_in.marked_for_deletion,			clinic_in.receive_at_clinic,			clinic_in.name_,			clinic_in.created_by,			clinic_in.updated_by               $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.clinic_to_v1 (clinic_in clinic)	OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert clinic rows into the clinic_v1 compound type format using the following syntax:-- select clinic::clinic_v1 from clinicDROP CAST IF EXISTS (clinic as clinic_v1);CREATE CAST (clinic as clinic_v1) WITH FUNCTION types_plus.clinic_to_v1(clinic);-- Create a function to accept an array of rows formatted as clinic_v1 for UPSERT into clinic.DROP FUNCTION IF EXISTS types_plus.insert_clinic_v1 (types_plus.clinic_v1[]);  CREATE OR REPLACE FUNCTION types_plus.insert_clinic_v1 (data_in types_plus.clinic_v1[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO clinic (			id,			hsys_id,			created_dts,			updated_dts,			marked_for_deletion,			receive_at_clinic,			name_,			created_by,			updated_by)                  SELECT			rows_in.id,			rows_in.hsys_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.marked_for_deletion,			rows_in.receive_at_clinic,			rows_in.name_,			rows_in.created_by,			rows_in.updated_by                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			hsys_id = EXCLUDED.hsys_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			marked_for_deletion = EXCLUDED.marked_for_deletion,			receive_at_clinic = EXCLUDED.receive_at_clinic,			name_ = EXCLUDED.name_,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_clinic_v1(types_plus.clinic_v1[])	OWNER TO user_bender;
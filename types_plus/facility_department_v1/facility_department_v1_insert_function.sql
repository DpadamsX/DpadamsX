-- Create a function to accept an array of rows formatted as facility_department_v1 for UPSERT into facility_department.DROP FUNCTION IF EXISTS types_plus.insert_facility_department_v1 (types_plus.facility_department_v1[]);  CREATE OR REPLACE FUNCTION types_plus.insert_facility_department_v1 (data_in types_plus.facility_department_v1[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO facility_department (			id,			facility_id,			their_id,			created_dts,			updated_dts,			marked_for_deletion,			is_available_in_sonar,			receive_at_dept,			is_from_emr,			name_,			created_by,			updated_by,			label_name,			inv_audit)                  SELECT			rows_in.id,			rows_in.facility_id,			rows_in.their_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.marked_for_deletion,			rows_in.is_available_in_sonar,			rows_in.receive_at_dept,			rows_in.is_from_emr,			rows_in.name_,			rows_in.created_by,			rows_in.updated_by,			rows_in.label_name,			rows_in.inv_audit                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			facility_id = EXCLUDED.facility_id,			their_id = EXCLUDED.their_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_available_in_sonar = EXCLUDED.is_available_in_sonar,			receive_at_dept = EXCLUDED.receive_at_dept,			is_from_emr = EXCLUDED.is_from_emr,			name_ = EXCLUDED.name_,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			label_name = EXCLUDED.label_name,			inv_audit = EXCLUDED.inv_audit          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_facility_department_v1(types_plus.facility_department_v1[])	OWNER TO user_bender;
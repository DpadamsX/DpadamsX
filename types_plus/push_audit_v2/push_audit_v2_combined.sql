-- Create a view onto push_audit formatted as push_audit_v2.-- If push_audit changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_push_audit_v2.DROP VIEW IF EXISTS types_plus.push_audit_v2 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.push_audit_v2 AS select id,        target_id,        data_file_id,        version_number, -- manual tweak        start_local_dts,        end_utc_dts,        end_local_dts,        inserted_utc_dts,        first_con_id,        last_con_id,        records_count,        duration_seconds,        error_occurred,        client_user_name,        inserted_by,        push_method_name,        error_text,        result_text   from push_audit;ALTER TABLE types_plus.push_audit_v2    OWNER TO user_change_structure;-- Create a casting function to convert push_audit rows into the compound type format push_audit_v2.-- If push_audit changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.push_audit_to_v2 (push_audit_in push_audit)  RETURNS push_audit_v2AS $BODY$        SELECT			push_audit_in.id,			push_audit_in.target_id,			push_audit_in.data_file_id,			push_audit_in.version_number,			push_audit_in.start_local_dts,			push_audit_in.end_utc_dts,			push_audit_in.end_local_dts,			push_audit_in.inserted_utc_dts,			push_audit_in.first_con_id,			push_audit_in.last_con_id,			push_audit_in.records_count,			push_audit_in.duration_seconds,			push_audit_in.error_occurred,			push_audit_in.client_user_name,			push_audit_in.inserted_by,			push_audit_in.push_method_name,			push_audit_in.error_text,			push_audit_in.result_text$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.push_audit_to_v2 (push_audit_in push_audit)	OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert push_audit rows into the push_audit_v2 compound type format using the following syntax:-- select push_audit::push_audit_v2 from push_auditDROP CAST IF EXISTS (push_audit as push_audit_v2);CREATE CAST (push_audit as push_audit_v2) WITH FUNCTION types_plus.push_audit_to_v2(push_audit);-- Create a function to accept an array of rows formatted as push_audit_v2 for UPSERT into push_audit.DROP FUNCTION IF EXISTS types_plus.insert_push_audit_v2 (types_plus.push_audit_v2[]);CREATE OR REPLACE FUNCTION types_plus.insert_push_audit_v2 (data_in types_plus.push_audit_v2[])  RETURNS intAS $BODY$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO push_audit (			id,			target_id,			data_file_id,			version_number,			start_local_dts,			end_utc_dts,			end_local_dts,			inserted_utc_dts,			first_con_id,			last_con_id,			records_count,			duration_seconds,			error_occurred,			client_user_name,			inserted_by,			push_method_name,			error_text,			result_text)        SELECT			rows_in.id,			rows_in.target_id,			rows_in.data_file_id,			rows_in.version_number,			rows_in.start_local_dts,			rows_in.end_utc_dts,			rows_in.end_local_dts,			rows_in.inserted_utc_dts,			rows_in.first_con_id,			rows_in.last_con_id,			rows_in.records_count,			rows_in.duration_seconds,			rows_in.error_occurred,			rows_in.client_user_name,			rows_in.inserted_by,			rows_in.push_method_name,			rows_in.error_text,			rows_in.result_text        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			target_id = EXCLUDED.target_id,			data_file_id = EXCLUDED.data_file_id,			version_number = EXCLUDED.version_number,			start_local_dts = EXCLUDED.start_local_dts,			end_utc_dts = EXCLUDED.end_utc_dts,			end_local_dts = EXCLUDED.end_local_dts,			inserted_utc_dts = EXCLUDED.inserted_utc_dts,			first_con_id = EXCLUDED.first_con_id,			last_con_id = EXCLUDED.last_con_id,			records_count = EXCLUDED.records_count,			duration_seconds = EXCLUDED.duration_seconds,			error_occurred = EXCLUDED.error_occurred,			client_user_name = EXCLUDED.client_user_name,			inserted_by = EXCLUDED.inserted_by,			push_method_name = EXCLUDED.push_method_name,			error_text = EXCLUDED.error_text,			result_text = EXCLUDED.result_text        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.insert_push_audit_v2(types_plus.push_audit_v2[])	OWNER TO user_bender;
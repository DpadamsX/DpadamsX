-- Create a function to accept an array of rows formatted as domo_passthrough_v2 for UPSERT into domo_passthrough.DROP FUNCTION IF EXISTS types_plus.insert_domo_passthrough_v2 (types_plus.domo_passthrough_v2[]);CREATE OR REPLACE FUNCTION types_plus.insert_domo_passthrough_v2 (data_in types_plus.domo_passthrough_v2[])  RETURNS intAS $BODY$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO domo_passthrough (			key_supplement,			source_id,			hsys_id,			facility_id,			view_version,			dataset_name,			data,			from_dts,			to_dts)        SELECT			rows_in.key_supplement,			rows_in.source_id,			rows_in.hsys_id,			rows_in.facility_id,			rows_in.view_version,			rows_in.dataset_name,			rows_in.data,			rows_in.from_dts,			rows_in.to_dts        FROM unnest(data_in) as rows_in        ON CONFLICT ON CONSTRAINT domo_passthrough_key_unique DO UPDATE SET			hsys_id         = EXCLUDED.hsys_id,			facility_id     = EXCLUDED.facility_id,			view_version    = EXCLUDED.view_version,			data            = EXCLUDED.data,			from_dts        = EXCLUDED.from_dts,			to_dts          = EXCLUDED.to_dts        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.insert_domo_passthrough_v2(types_plus.domo_passthrough_v2[])	OWNER TO user_bender;
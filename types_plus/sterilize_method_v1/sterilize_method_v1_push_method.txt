//%attributes = {"invisible":true,"folder":"PgSQL_pgIO","lang":"en"} comment added and reserved by 4D.If(False) pgIO_PushChanges_SterilizeMeth   // DESCRIPTION: Push records from the [SterilizeMethod] table to Nautilus. This time, through a function call.  // Place these declarations inCompiler_PgIO C_BOOLEAN(pgIO_PushChanges_SterilizeMeth;$0)C_OBJECT(pgIO_PushChanges_SterilizeMeth;$1)C_LONGINT(pgIO_PushChanges_SterilizeMeth;$2)If (False)// The field names and types of types_plus.sterilize_method_v1 are found below.// types_plus.sterilize_method_v1 is both an updatable view, and a type.//   id uuid,//   data_file_id uuid,//   marked_for_deletion boolean,//   name_ citextEnd if  // CREATED BY: David Adams  // DATE: Oct 10, 2019  // LAST MODIFIED: End if   // ============================================Code_Start (Current method name)C_BOOLEAN($0;$ran_okay)C_OBJECT($1;$connection_object)C_LONGINT($2;$format_version_number)$connection_object:=$1  // Pass a good connection ID or you're toast.$format_version_number:=1If (Count parameters>=2)$format_version_number:=$2End if $ran_okay:=FalseIf (pgIOMap_FormatVersionIsValid ("sterilize_method";$format_version_number)=False)Code_Err ("";"Format version number "+String($format_version_number)+" is invalid.")End if If (Code_NotErr )C_LONGINT($connection_id)C_TEXT($table_name_in_postgres_text)C_TEXT($insert_function_name)C_TEXT($pg_view_name)$connection_id:=$connection_object.connection_id$table_name_in_postgres_text:="sterilize_method"$insert_function_name:="insert_"+$table_name_in_postgres_text+"_v"+String($format_version_number)  // Like insert_sterilize_method_v1$pg_view_name:="types_plus."+$table_name_in_postgres_text+"_v"+String($format_version_number)  // Like insert_types_plus.sterilize_method_v1. Note: If you change schemas between versions, this code needs to know what schema you want.If ($connection_id<1)$ran_okay:=FalseElse $ran_okay:=True  //-------------------------------------------------------  // Find the unsent data  //-------------------------------------------------------C_LONGINT($table_number)C_LONGINT($first_conid_to_send_l)C_LONGINT($last_conid_to_send_l)C_LONGINT($records_count)$table_number:=pgIO_GetConIDsForTable (->[SterilizeMethod];->$first_conid_to_send_l;->$last_conid_to_send_l)$records_count:=pgIO_LoadConIDRange (->[SterilizeMethod];->[SterilizeMethod]ConID;$first_conid_to_send_l;$last_conid_to_send_l)ORDER BY([SterilizeMethod];[SterilizeMethod]ConID)  // Important! Since we're chunking and bail if there's an error, it's important to keep track of the highest successful ConID sent.  //-------------------------------------------------------  // Prepare and push the data  //-------------------------------------------------------If ($records_count=0)$ran_okay:=TrueElse C_TEXT($cr)C_TEXT($tab)C_TEXT($sq)$cr:=Char(Carriage return)$tab:=Char(Tab)$sq:=Char(Quote)C_LONGINT($maximum_push_bytes)C_OBJECT($insert_object)$maximum_push_bytes:=Iam_GetPGMaximumPushKB *1024  // We want bytes to compare to the results from calling Length($values_text)$insert_object:=PgQuery_New ($connection_object;"pgIO_PushChanges_SterilizeMeth")C_TEXT($data_file_id)$data_file_id:=PgConvert_UUID_ToPG_For_INSERT(<>sync_dataFileID_t)  // Fold the data into values statements.C_BLOB($code_blob)  // Accumulate in a BLOB, crazy faster than accumulating in a text var.SET BLOB SIZE($code_blob;0)C_LONGINT($push_data_size_bytes)C_BOOLEAN($push_now)C_TEXT($clause_text)C_LONGINT($record_index)For ($record_index;1;$records_count)If (BLOB size($code_blob)=0)  // Add the code to open up the function call and array parameter.TEXT TO BLOB("select * from "+$insert_function_name+"(array["+$cr;$code_blob;UTF8 text without length;*)End if   // GOTO SELECTED RECORD. Yeah, it rules. See:  // https://types_plus.atlassian.net/wiki/spaces/SON/pages/572817462/Loading+Data+Efficiently+for+Pushing+to+PostgresGOTO SELECTED RECORD([SterilizeMethod];$record_index)$clause_text:=""$clause_text:=$clause_text+"("Case of // Each supported version has a case below. Older versions are left in place for testing in case we need to patch a lagging deployments.: ($format_version_number=1) // Added: Oct 10, 2019	$clause_text:=$clause_text+PgConvert_UUID_ToPG_For_INSERT([SterilizeMethod]ID)+","// sterilize_method.id	$clause_text:=$clause_text+$data_file_id+","// System field: data_file_id	$clause_text:=$clause_text+PgConvert_DateIsNotEmpty_ToPG([SterilizeMethod]DeletedRecordDate)+","// System field: marked_for_deletion	$clause_text:=$clause_text+PgConvert_Text_ToPG([SterilizeMethod]Name)// sterilize_method.name_End case $clause_text:=$clause_text+")"$push_data_size_bytes:=BLOB size($code_blob)+Length($clause_text)Case of : ($record_index=$records_count)  // We've gone through all of the records.$push_now:=True: ($push_data_size_bytes>=$maximum_push_bytes)  // We've filled the buffer.$push_now:=TrueElse   // Keep on building the VALUES.$push_now:=FalseEnd case If ($push_now=False)$clause_text:=$clause_text+","+$cr  // We now *know* that we're going to add another value (statement), so we also know that we need a comma. The last (value) does *not* have a comma.Else $clause_text:=$clause_text+"]::"+$pg_view_name+"[]);" // Like sterilize_method_v1[]End if TEXT TO BLOB($clause_text;$code_blob;UTF8 text without length;*)$clause_text:=""If ($push_now)  // We've filled our buffer (based on max KB from IAM) or reached the last record. Push!   // This doubles memory consumption briefly. I asked Rob about a command that accepts a BLOB instead of text.  // He said "no" as it would require a text copy internally anyway, so it won't help. If memory is an issue,  // write to disk instead of text or BLOB and then use Document to text to load the block in one go.C_TEXT($push_text)  // The VALUES are built up in the loop below. When we've got all the records, or have filled our self-defined buffer, a push is sent.$push_text:=BLOB to text($code_blob;UTF8 text without length)SET BLOB SIZE($code_blob;0)  // Free up the RAM.If (False)SET TEXT TO PASTEBOARD($push_text)End if   // Jam the text right into the object...not calling PgQuery_SetSQLStatement here in case text is built (doubled) by for 4D for the parameter.OB SET($insert_object;PgQuery_Statement_SQL;$push_text)$push_text:=""  // Clear this now! It frees up memory before the push and makes sure that we don't keep resending old rows.$ran_okay:=PgQuery_Run ($insert_object)PgQuery_SetSQLStatement ($insert_object;"")  // Free up the memory taken by the SQL statement.If ($ran_okay)PgSQL_Execute ($connection_id;"COMMIT;")  //-------------------------------------------------------  // Update the last sent ConID  //-------------------------------------------------------  // This is why we sort by ConID up at the top. We're chunking through the number line and at each success, we plant a flag saying, "got this far!"If (SyncTables_SetLastConIDSentToPG ($table_number;[SterilizeMethod]ConID)=False)  // Fails if record is locked or pushed value is lower than existing max value. Never decrement the max!  // Not bailing. We'll end up resending records in the future, but no harm should come of it.End if Else PgSQL_Execute ($connection_id;"ROLLBACK;")$record_index:=$records_count+1  // Break the loop. End if End if End for End if UNLOAD RECORD([SterilizeMethod])End if $0:=$ran_okayIf ($ran_okay)  // Push an entry even if no records need to be sent.pgio_Push_PushLogEntry ($connection_object;$table_number;$table_name_in_postgres_text;$records_count)Else   // Just record the error. No alert. No global error set. Just a log entry.   // The program's state does not change, this is just a log entry.Code_ErrJustLogThis ("PgSQL_PushError";Current method name)End if End if Code_End (Current method name)
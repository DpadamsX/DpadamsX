-- Create a view onto form_template formatted as form_template_v1.-- If form_template changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_form_template_v1.DROP VIEW IF EXISTS types_plus.form_template_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.form_template_v1 AS select id,        created_dts,        updated_dts,        marked_for_deletion,        name_,        comments_,        updated_by,        created_by,        form_definition   from form_template;ALTER TABLE types_plus.form_template_v1    OWNER TO user_change_structure;-- Create a casting function to convert form_template rows into the compound type format form_template_v1.-- If form_template changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.form_template_to_v1 (form_template_in form_template)  RETURNS form_template_v1AS $BODY$                   SELECT			form_template_in.id,			form_template_in.created_dts,			form_template_in.updated_dts,			form_template_in.marked_for_deletion,			form_template_in.name_,			form_template_in.comments_,			form_template_in.updated_by,			form_template_in.created_by,			form_template_in.form_definition               $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.form_template_to_v1 (form_template_in form_template)	OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert form_template rows into the form_template_v1 compound type format using the following syntax:-- select form_template::form_template_v1 from form_templateDROP CAST IF EXISTS (form_template as form_template_v1);CREATE CAST (form_template as form_template_v1) WITH FUNCTION types_plus.form_template_to_v1(form_template);-- Create a function to accept an array of rows formatted as form_template_v1 for UPSERT into form_template.DROP FUNCTION IF EXISTS types_plus.insert_form_template_v1 (types_plus.form_template_v1[]);  CREATE OR REPLACE FUNCTION types_plus.insert_form_template_v1 (data_in types_plus.form_template_v1[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO form_template (			id,			created_dts,			updated_dts,			marked_for_deletion,			name_,			comments_,			updated_by,			created_by,			form_definition)                  SELECT			rows_in.id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.marked_for_deletion,			rows_in.name_,			rows_in.comments_,			rows_in.updated_by,			rows_in.created_by,			rows_in.form_definition                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			marked_for_deletion = EXCLUDED.marked_for_deletion,			name_ = EXCLUDED.name_,			comments_ = EXCLUDED.comments_,			updated_by = EXCLUDED.updated_by,			created_by = EXCLUDED.created_by,			form_definition = EXCLUDED.form_definition          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_form_template_v1(types_plus.form_template_v1[])	OWNER TO user_bender;
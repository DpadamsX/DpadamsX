-- Create a function to accept an array of rows formatted as facility_v1 for UPSERT into facility.DROP FUNCTION IF EXISTS types_plus.insert_facility_v1 (types_plus.facility_v1[]);CREATE OR REPLACE FUNCTION types_plus.insert_facility_v1 (data_in types_plus.facility_v1[])  RETURNS intAS $BODY$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO facility (			id,			marked_for_deletion,			hsys_id,			name_,			tz_name)        SELECT			rows_in.id,			rows_in.marked_for_deletion,			rows_in.hsys_id,			rows_in.name_,			rows_in.tz_name        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			marked_for_deletion = EXCLUDED.marked_for_deletion,			hsys_id = EXCLUDED.hsys_id,			name_ = EXCLUDED.name_,			tz_name = EXCLUDED.tz_name        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.insert_facility_v1(types_plus.facility_v1[]) OWNER TO user_bender;
-- Create a view onto facility formatted as facility_v1.-- If facility changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_facility_v1.DROP VIEW IF EXISTS types_plus.facility_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.facility_v1 AS select id,        marked_for_deletion,        hsys_id,        name_,        tz_name   from facility;ALTER TABLE types_plus.facility_v1    OWNER TO user_change_structure;-- Create a casting function to convert facility rows into the compound type format facility_v1.-- If facility changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.facility_to_v1 (facility_in facility)  RETURNS facility_v1AS $BODY$        SELECT			facility_in.id,			facility_in.marked_for_deletion,			facility_in.hsys_id,			facility_in.name_,			facility_in.tz_name$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.facility_to_v1 (facility_in facility) OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert facility rows into the facility_v1 compound type format using the following syntax:-- select facility::facility_v1 from facilityDROP CAST IF EXISTS (facility as facility_v1);CREATE CAST (facility as facility_v1) WITH FUNCTION types_plus.facility_to_v1(facility);-- Create a function to accept an array of rows formatted as facility_v1 for UPSERT into facility.DROP FUNCTION IF EXISTS types_plus.insert_facility_v1 (types_plus.facility_v1[]);CREATE OR REPLACE FUNCTION types_plus.insert_facility_v1 (data_in types_plus.facility_v1[])  RETURNS intAS $BODY$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO facility (			id,			marked_for_deletion,			hsys_id,			name_,			tz_name)        SELECT			rows_in.id,			rows_in.marked_for_deletion,			rows_in.hsys_id,			rows_in.name_,			rows_in.tz_name        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			marked_for_deletion = EXCLUDED.marked_for_deletion,			hsys_id = EXCLUDED.hsys_id,			name_ = EXCLUDED.name_,			tz_name = EXCLUDED.tz_name        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.insert_facility_v1(types_plus.facility_v1[]) OWNER TO user_bender;
-- Hand-rolled extension of v2. The differences are:-- Added inv_id-- Added item_id-- *Suppress* changing the inv_name on UPSERT, it's a historical snapshot.-- *Suppress* changing the item_name on UPSERT, it's a historical snapshot.-- Create a view onto analytic_productivity formatted as analytic_productivity_v2.-- If analytic_productivity changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_analytic_productivity_v2.DROP VIEW IF EXISTS types_plus.analytic_productivity_v2 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.analytic_productivity_v2 AS select id,        data_file_id,        marked_for_deletion,        hsys_id,        facility_id,        facility_location_id,        specialty_id,        item_type_id,        user_name,        inv_name,        item_name,        tray_or_pack,        num_inst,        assembly_minutes,        pause_minutes,        points,        points_per_hour,        assembly_hour,        pause_hour,        start_utc,        start_local,        end_utc,        end_local,        inv_id,        item_id   from analytic_productivity;ALTER TABLE types_plus.analytic_productivity_v2    OWNER TO user_change_structure;-- Create a casting function to convert analytic_productivity rows into the compound type format analytic_productivity_v2.-- If analytic_productivity changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.analytic_productivity_to_v2 (analytic_productivity_in analytic_productivity)  RETURNS analytic_productivity_v2AS $BODY$        SELECT			analytic_productivity_in.id,			analytic_productivity_in.data_file_id,			analytic_productivity_in.marked_for_deletion,			analytic_productivity_in.hsys_id,			analytic_productivity_in.facility_id,			analytic_productivity_in.facility_location_id,			analytic_productivity_in.specialty_id,			analytic_productivity_in.item_type_id,			analytic_productivity_in.user_name,			analytic_productivity_in.inv_name,			analytic_productivity_in.item_name,			analytic_productivity_in.tray_or_pack,			analytic_productivity_in.num_inst,			analytic_productivity_in.assembly_minutes,			analytic_productivity_in.pause_minutes,			analytic_productivity_in.points,			analytic_productivity_in.points_per_hour,			analytic_productivity_in.assembly_hour,			analytic_productivity_in.pause_hour,			analytic_productivity_in.start_utc,			analytic_productivity_in.start_local,			analytic_productivity_in.end_utc,			analytic_productivity_in.end_local,			analytic_productivity_in.inv_id,			analytic_productivity_in.item_id$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.analytic_productivity_to_v2 (analytic_productivity_in analytic_productivity) OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert analytic_productivity rows into the analytic_productivity_v2 compound type format using the following syntax:-- select analytic_productivity::analytic_productivity_v2 from analytic_productivityDROP CAST IF EXISTS (analytic_productivity as analytic_productivity_v2);CREATE CAST (analytic_productivity as analytic_productivity_v2) WITH FUNCTION types_plus.analytic_productivity_to_v2(analytic_productivity);-- Create a function to accept an array of rows formatted as analytic_productivity_v2 for UPSERT into analytic_productivity.DROP FUNCTION IF EXISTS types_plus.insert_analytic_productivity_v2 (types_plus.analytic_productivity_v2[]);CREATE OR REPLACE FUNCTION types_plus.insert_analytic_productivity_v2 (data_in types_plus.analytic_productivity_v2[])  RETURNS intAS $BODY$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO analytic_productivity (			id,			data_file_id,			marked_for_deletion,			hsys_id,			facility_id,			facility_location_id,			specialty_id,			item_type_id,			user_name,			inv_name,			item_name,			tray_or_pack,			num_inst,			assembly_minutes,			pause_minutes,			points,			points_per_hour,			assembly_hour,			pause_hour,			start_utc,			start_local,			end_utc,			end_local,			inv_id,			item_id)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.hsys_id,			rows_in.facility_id,			rows_in.facility_location_id,			rows_in.specialty_id,			rows_in.item_type_id,			rows_in.user_name,			rows_in.inv_name,			rows_in.item_name,			rows_in.tray_or_pack,			rows_in.num_inst,			rows_in.assembly_minutes,			rows_in.pause_minutes,			rows_in.points,			rows_in.points_per_hour,			rows_in.assembly_hour,			rows_in.pause_hour,			rows_in.start_utc,			rows_in.start_local,			rows_in.end_utc,			rows_in.end_local,			rows_in.inv_id,			rows_in.item_id        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			hsys_id = EXCLUDED.hsys_id,			facility_id = EXCLUDED.facility_id,			facility_location_id = EXCLUDED.facility_location_id,			specialty_id = EXCLUDED.specialty_id,			item_type_id = EXCLUDED.item_type_id,			user_name = EXCLUDED.user_name,			-- inv_name = EXCLUDED.inv_name,   -- No, don't update, historical snapshot.			-- item_name = EXCLUDED.item_name, -- No, don't update, historical snapshot.			tray_or_pack = EXCLUDED.tray_or_pack,			num_inst = EXCLUDED.num_inst,			assembly_minutes = EXCLUDED.assembly_minutes,			pause_minutes = EXCLUDED.pause_minutes,			points = EXCLUDED.points,			points_per_hour = EXCLUDED.points_per_hour,			assembly_hour = EXCLUDED.assembly_hour,			pause_hour = EXCLUDED.pause_hour,			start_utc = EXCLUDED.start_utc,			start_local = EXCLUDED.start_local,			end_utc = EXCLUDED.end_utc,			end_local = EXCLUDED.end_local,			inv_id = EXCLUDED.inv_id,			item_id = EXCLUDED.item_id        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.insert_analytic_productivity_v2(types_plus.analytic_productivity_v2[]) OWNER TO user_bender;
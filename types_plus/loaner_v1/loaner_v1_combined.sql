-- Create a view onto loaner formatted as loaner_v1.-- If loaner changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_loaner_v1.DROP VIEW IF EXISTS types_plus.loaner_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.loaner_v1 AS select s_case_id,        id,        sup_id,        rep_id,        facility_id,        last_updated_by_data_file_id,        pickup_dts,        created_dts,        updated_dts,        datetime_local,        drop_off_dts,        num_items,        marked_for_deletion,        is_printed,        created_by,        updated_by,        status,        notes   from loaner;ALTER TABLE types_plus.loaner_v1    OWNER TO user_change_structure;-- Create a casting function to convert loaner rows into the compound type format loaner_v1.-- If loaner changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.loaner_to_v1 (loaner_in loaner)  RETURNS loaner_v1AS $BODY$                   SELECT			loaner_in.s_case_id,			loaner_in.id,			loaner_in.sup_id,			loaner_in.rep_id,			loaner_in.facility_id,			loaner_in.last_updated_by_data_file_id,			loaner_in.pickup_dts,			loaner_in.created_dts,			loaner_in.updated_dts,			loaner_in.datetime_local,			loaner_in.drop_off_dts,			loaner_in.num_items,			loaner_in.marked_for_deletion,			loaner_in.is_printed,			loaner_in.created_by,			loaner_in.updated_by,			loaner_in.status,			loaner_in.notes               $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.loaner_to_v1 (loaner_in loaner)	OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert loaner rows into the loaner_v1 compound type format using the following syntax:-- select loaner::loaner_v1 from loanerDROP CAST IF EXISTS (loaner as loaner_v1);CREATE CAST (loaner as loaner_v1) WITH FUNCTION types_plus.loaner_to_v1(loaner);-- Create a function to accept an array of rows formatted as loaner_v1 for UPSERT into loaner.DROP FUNCTION IF EXISTS types_plus.insert_loaner_v1 (types_plus.loaner_v1[]);  CREATE OR REPLACE FUNCTION types_plus.insert_loaner_v1 (data_in types_plus.loaner_v1[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO loaner (			s_case_id,			id,			sup_id,			rep_id,			facility_id,			last_updated_by_data_file_id,			pickup_dts,			created_dts,			updated_dts,			datetime_local,			drop_off_dts,			num_items,			marked_for_deletion,			is_printed,			created_by,			updated_by,			status,			notes)                  SELECT			rows_in.s_case_id,			rows_in.id,			rows_in.sup_id,			rows_in.rep_id,			rows_in.facility_id,			rows_in.last_updated_by_data_file_id,			rows_in.pickup_dts,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.datetime_local,			rows_in.drop_off_dts,			rows_in.num_items,			rows_in.marked_for_deletion,			rows_in.is_printed,			rows_in.created_by,			rows_in.updated_by,			rows_in.status,			rows_in.notes                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			s_case_id = EXCLUDED.s_case_id,			sup_id = EXCLUDED.sup_id,			rep_id = EXCLUDED.rep_id,			facility_id = EXCLUDED.facility_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			pickup_dts = EXCLUDED.pickup_dts,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			datetime_local = EXCLUDED.datetime_local,			drop_off_dts = EXCLUDED.drop_off_dts,			num_items = EXCLUDED.num_items,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_printed = EXCLUDED.is_printed,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			status = EXCLUDED.status,			notes = EXCLUDED.notes          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_loaner_v1(types_plus.loaner_v1[])	OWNER TO user_bender;
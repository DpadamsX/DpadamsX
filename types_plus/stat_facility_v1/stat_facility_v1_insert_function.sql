-- Create a function to accept an array of rows formatted as stat_facility_v1 for UPSERT into stat_facility.DROP FUNCTION IF EXISTS types_plus.insert_stat_facility_v1 (types_plus.stat_facility_v1[]);CREATE OR REPLACE FUNCTION types_plus.insert_stat_facility_v1 (data_in types_plus.stat_facility_v1[])  RETURNS intAS $BODY$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO stat_facility (			id,			facility_id,			hsys_id,			date_,			category,			item_type,			stat_type,			is_most_recent,			in_data_cleanse_scope,			items_inactive,			items_count,			items_qty,			items_inventoried,			items_to_inventory,			items_named,			items_to_name,			inst_qty,			items_has_loc,			items_missing_locs,			item_prods_count,			item_prods_missing_part_nos_thier,			item_prods_missing_vendors_thier,			item_prods_dr_pref,			item_prods_critical,			item_prods_not_linked,			item_prods_missing_part_nos,			item_prods_missing_vendors,			item_prods_cant_determine,			item_prods_linked,			sup_prods_count,			sups_count,			prods_count,			prods_with_pic,			prods_without_pic,			item_prods_verified,			item_prods_expert_linked,			item_prods_dup_names_their,			item_prods_dup_names,			prods_named,			part_nos_fixed,			invs_inactive,			invs_count,			invs_found,			emr_items_count,			emr_items_linked,			emr_items_matches_their_name,			emr_items_matches_our_name,			emr_items_no_match_their_name,			emr_items_no_match_our_name,			emr_items_dups)        SELECT			rows_in.id,			rows_in.facility_id,			rows_in.hsys_id,			rows_in.date_,			rows_in.category,			rows_in.item_type,			rows_in.stat_type,			rows_in.is_most_recent,			rows_in.in_data_cleanse_scope,			rows_in.items_inactive,			rows_in.items_count,			rows_in.items_qty,			rows_in.items_inventoried,			rows_in.items_to_inventory,			rows_in.items_named,			rows_in.items_to_name,			rows_in.inst_qty,			rows_in.items_has_loc,			rows_in.items_missing_locs,			rows_in.item_prods_count,			rows_in.item_prods_missing_part_nos_thier,			rows_in.item_prods_missing_vendors_thier,			rows_in.item_prods_dr_pref,			rows_in.item_prods_critical,			rows_in.item_prods_not_linked,			rows_in.item_prods_missing_part_nos,			rows_in.item_prods_missing_vendors,			rows_in.item_prods_cant_determine,			rows_in.item_prods_linked,			rows_in.sup_prods_count,			rows_in.sups_count,			rows_in.prods_count,			rows_in.prods_with_pic,			rows_in.prods_without_pic,			rows_in.item_prods_verified,			rows_in.item_prods_expert_linked,			rows_in.item_prods_dup_names_their,			rows_in.item_prods_dup_names,			rows_in.prods_named,			rows_in.part_nos_fixed,			rows_in.invs_inactive,			rows_in.invs_count,			rows_in.invs_found,			rows_in.emr_items_count,			rows_in.emr_items_linked,			rows_in.emr_items_matches_their_name,			rows_in.emr_items_matches_our_name,			rows_in.emr_items_no_match_their_name,			rows_in.emr_items_no_match_our_name,			rows_in.emr_items_dups        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			facility_id = EXCLUDED.facility_id,			hsys_id = EXCLUDED.hsys_id,			date_ = EXCLUDED.date_,			category = EXCLUDED.category,			item_type = EXCLUDED.item_type,			stat_type = EXCLUDED.stat_type,			is_most_recent = EXCLUDED.is_most_recent,			in_data_cleanse_scope = EXCLUDED.in_data_cleanse_scope,			items_inactive = EXCLUDED.items_inactive,			items_count = EXCLUDED.items_count,			items_qty = EXCLUDED.items_qty,			items_inventoried = EXCLUDED.items_inventoried,			items_to_inventory = EXCLUDED.items_to_inventory,			items_named = EXCLUDED.items_named,			items_to_name = EXCLUDED.items_to_name,			inst_qty = EXCLUDED.inst_qty,			items_has_loc = EXCLUDED.items_has_loc,			items_missing_locs = EXCLUDED.items_missing_locs,			item_prods_count = EXCLUDED.item_prods_count,			item_prods_missing_part_nos_thier = EXCLUDED.item_prods_missing_part_nos_thier,			item_prods_missing_vendors_thier = EXCLUDED.item_prods_missing_vendors_thier,			item_prods_dr_pref = EXCLUDED.item_prods_dr_pref,			item_prods_critical = EXCLUDED.item_prods_critical,			item_prods_not_linked = EXCLUDED.item_prods_not_linked,			item_prods_missing_part_nos = EXCLUDED.item_prods_missing_part_nos,			item_prods_missing_vendors = EXCLUDED.item_prods_missing_vendors,			item_prods_cant_determine = EXCLUDED.item_prods_cant_determine,			item_prods_linked = EXCLUDED.item_prods_linked,			sup_prods_count = EXCLUDED.sup_prods_count,			sups_count = EXCLUDED.sups_count,			prods_count = EXCLUDED.prods_count,			prods_with_pic = EXCLUDED.prods_with_pic,			prods_without_pic = EXCLUDED.prods_without_pic,			item_prods_verified = EXCLUDED.item_prods_verified,			item_prods_expert_linked = EXCLUDED.item_prods_expert_linked,			item_prods_dup_names_their = EXCLUDED.item_prods_dup_names_their,			item_prods_dup_names = EXCLUDED.item_prods_dup_names,			prods_named = EXCLUDED.prods_named,			part_nos_fixed = EXCLUDED.part_nos_fixed,			invs_inactive = EXCLUDED.invs_inactive,			invs_count = EXCLUDED.invs_count,			invs_found = EXCLUDED.invs_found,			emr_items_count = EXCLUDED.emr_items_count,			emr_items_linked = EXCLUDED.emr_items_linked,			emr_items_matches_their_name = EXCLUDED.emr_items_matches_their_name,			emr_items_matches_our_name = EXCLUDED.emr_items_matches_our_name,			emr_items_no_match_their_name = EXCLUDED.emr_items_no_match_their_name,			emr_items_no_match_our_name = EXCLUDED.emr_items_no_match_our_name,			emr_items_dups = EXCLUDED.emr_items_dups        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.insert_stat_facility_v1(types_plus.stat_facility_v1[]) OWNER TO user_bender;
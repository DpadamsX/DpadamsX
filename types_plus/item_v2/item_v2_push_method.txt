//%attributes = {"invisible":true,"folder":"PgSQL_pgIO","lang":"en"} comment added and reserved by 4D.If (False)	pgIO_Item_Push	  // DESCRIPTION: Push [Item] records to ascendco.item.	If (False)  // The field names and types of types_plus.item_2 are found below.		  // types_plus.item_v2 is both an updatable view, and a type.//   id                               uuid,//   item_arch_id                     uuid,//   facility_specialty_id            uuid,//   item_uu_id_across_item_archs     uuid,//   inv_responsible_user_id          uuid,//   facility_department_id           uuid,//   specialty_id                     uuid,//   sup_id                           uuid,//   dr_people_id                     uuid,//   item_type_id                     uuid,//   item_master_link_id              uuid,//   facility_location_id             uuid,//   clinic_id                        uuid,//   hsys_tag_id                      uuid,//   name_copied_from_prod_id         uuid,//   created_dts                      timestamp,//   updated_dts                      timestamp,//   named_dts                        timestamp,//   needs_sched_sync_as_of_dts       timestamp,//   weight_lb                        double precision,//   qty                              integer,//   flow                             integer,//   flow_long                        integer,//   max_processed_one_day            integer,//   par                              integer,//   assembly_difficulty              integer,//   num_inst                         integer,//   repair_every_x                   integer,//   their_qty                        integer,//   replace_every_x_cycles           integer,//   hide_specialty_in_name           boolean,//   marked_for_deletion              boolean,//   is_assembly_critical             boolean,//   requires_leak_test               boolean,//   is_not_tracked_by_inv_no         boolean,//   is_imlink_locked                 boolean,//   is_robotic                       boolean,//   is_flexible_scope                boolean,//   is_generic_pack                  boolean,//   dont_print_count_sheet           boolean,//   is_conflict_check                boolean,//   is_small_set                     boolean,//   hide_hsys_tag_in_name            boolean,//   is_name_finalized                boolean,//   is_in_data_cleanse_scope         boolean,//   is_label_abbr                    boolean,//   has_implants                     boolean,//   sync_to_other_software_systems   boolean,//   inv_has_implants                 boolean,//   is_custom_sort                   boolean,//   is_name_copied_from_prod         boolean,//   is_deactivated                   boolean,//   is_vendor_data                   boolean,//   name_needs_review                boolean,//   ignore_for_optimization          boolean,//   inv_status                       citext,//   their_name                       citext,//   opt_status                       citext,//   created_by                       citext,//   updated_by                       citext,//   old_names                        citext,//   their_serial_no                  citext,//   name_desc                        citext,//   name_                            citext,//   their_id                         citext,//   decon_special_instructions       citext,//   named_by                         citext,//   needs_review_notes               citext,//   vendor_tray_type                 citext,//   sterilization_method             citext,//   priority                         citext,//   category                         citext,//   packaging_type                   citext,//   packaging_notes                  citext,//   their_packaging_type             citext,//   assembly_special_instructions    citext,//   sterilize_special_instructions   citext,//   label_name_abbr                  citext,//   their_location                   citext,//   count_sheet_status               citext,//   requested_by                     citext,//   rack_row_bin_note                citext,//   standardization_status           citext,//   repair_every_x_type              citext,//   their_base_barcode               citext,//   their_key                        citext,//   stuff                            jsonb	End if	  // Note: This routine does *not* check if the push is enabled.       What?	  //       That responsibility is delegated to the calling routine.    Why?	  //       It makes it much simpler to test, develop, and quickly	  //       run a job, in case of emergency.                            See:	  // https://ascendco.atlassian.net/wiki/spaces/SON/pages/1596588056/A+Note+on+Push+Checking+Responsibilities	// Insert the following declarations into Compiler_PgIOPush_and_SetupC_BOOLEAN(pgIO_Item_Push;$0)C_OBJECT(pgIO_Item_Push;$1)C_LONGINT(pgIO_Item_Push;$2)	  // CREATED BY: PgBuildInsert_GenerateCode	  // DATE: Feb 3, 2021	  // LAST MODIFIED:End if   // ============================================Code_Start (Current method name)C_BOOLEAN($0;$ran_okay)C_OBJECT($1;$connection_o)C_LONGINT($2;$format_version_number_in)$connection_o:=$1  // Pass a good connection object or you're toast.$format_version_number_in:=0If (Count parameters>=2)	$format_version_number_in:=$2End if$ran_okay:=False  //------------------------------------------------------------------------  // Setup environment  //------------------------------------------------------------------------C_OBJECT($configuration_o)$configuration_o:=PgIOPushConfig_New (New object(\"connection_object";$connection_o;\"format_version_number";$format_version_number_in;\"table_pointer";->[Item];\"conid_field_pointer";->[Item]ConID;\"table_name_in_postgres";"item";\"target_path";"ascendco.item"))  // The path for tables = the qualified name. For passthroughs, it's a bit different.C_BOOLEAN($setup_looks_okay)C_BOOLEAN($push_is_not_already_in_progress)C_BOOLEAN($push_is_not_disabled_after_fail)$setup_looks_okay:=PgConfigTarget_SetupLooksOkay ($configuration_o)$push_is_not_already_in_progress:=Not(PgConfigTarget_PushIsInProgress ($configuration_o.target_id))$push_is_not_disabled_after_fail:=Not(PgConfigTarget_IsDisabledByFail ($configuration_o.target_id))If ($setup_looks_okay=False)	Code_Err ("PgSQL_PushSetupError";JSON Stringify($configuration_o;*))End ifIf ($setup_looks_okay & $push_is_not_disabled_after_fail & $push_is_not_already_in_progress)	$ran_okay:=True  // Set to false if the push fails.	  //-------------------------------------------------------	  // Open and lock the audit record	  //-------------------------------------------------------	  // If PgConfig is active, after the line below there's a new [PgConfigPushAudit] record loaded, and locked to other processes.	PgIO_Push_OnStart ($configuration_o;Current method name)	  //-------------------------------------------------------	  // Find the unsent data	  //-------------------------------------------------------	  // Note: These locals are also stashed in $configuration_o elements. Because transition.	C_LONGINT($first_conid_to_send_l)	C_LONGINT($last_conid_to_send_l)	C_LONGINT($records_count)	PgConfigTarget_GetConIDs ($configuration_o.target_id;->$first_conid_to_send_l;->$last_conid_to_send_l)	$configuration_o.records_count:=PgConfigTarget_LoadByConIDs ($configuration_o.table_pointer;$configuration_o.conid_field_pointer;$first_conid_to_send_l;$last_conid_to_send_l)	PgConfigPushAudit_SetRecordCnt ($configuration_o.records_count)  // Copy the value to the tracking record.	  //-------------------------------------------------------	  // Prepare and push the data	  //-------------------------------------------------------	  // Even if there's nothing to push, need the object defined for the PgConfigPushAudit_Finish call.	C_OBJECT($insert_o)	$insert_o:=PgQuery_New ($connection_o;"";Current method name)	If ($configuration_o.records_count=0)		$ran_okay:=True	Else		PgConfigTarget_DoSyncWait ($configuration_o.target_id)  // Give pending *saves* time to catch up with the max *assigned* ConID.		C_TEXT($cr)		C_TEXT($tab)		C_TEXT($sq)		$cr:=Char(Carriage return)		$tab:=Char(Tab)		$sq:=Char(Quote)		C_LONGINT($maximum_push_bytes)		$maximum_push_bytes:=Iam_GetPGMaximumPushKB *1024  // We want bytes to compare to the results from calling Length($values_text)		C_TEXT($data_file_id)		$data_file_id:=PgConvert_UUID_ToPG_For_INSERT (<>sync_dataFileID_t)		C_LONGINT($last_conid_actually_sent_l)  // Chunking, need to check and update after each push.		$last_conid_actually_sent_l:=0		  // Fold the data into values statements.		C_BLOB($code_blob)  // Accumulate in a BLOB, crazy faster than accumulating in a text var.		SET BLOB SIZE($code_blob;0)		C_LONGINT($push_data_size_bytes)		C_BOOLEAN($push_now)		C_TEXT($clause_text)		C_LONGINT($last_conid_actually_sent_l)  // Chunking, need to check and update after each push.		$last_conid_actually_sent_l:=0		C_LONGINT($record_index)		For ($record_index;1;$configuration_o.records_count)			If (BLOB size($code_blob)=0)  // Add the code to open up the function call and array parameter.				TEXT TO BLOB("select * from "+$configuration_o.pg_insert_function_name+"(array["+$cr;$code_blob;UTF8 text without length;*)			End if			  // GOTO SELECTED RECORD. Yeah, it rules. See:			  // https://ascendco.atlassian.net/wiki/spaces/SON/pages/572817462/Loading+Data+Efficiently+for+Pushing+to+Postgres			GOTO SELECTED RECORD([Item];$record_index)			$last_conid_actually_sent_l:=[Item]ConID  // Selection is sorted by ConID.			$clause_text:=""			$clause_text:=$clause_text+"("			Case of   // Each supported version has a case below. Older versions are left in place for testing in case we need to patch a lagging deployments.					: ($configuration_o.format_version_number=2) // Added: Feb 3, 2021	$clause_text:=$clause_text+PgConvert_UUID_ToPG_For_INSERT([Item]ID)+","// item.id	$clause_text:=$clause_text+PgConvert_UUID_ToPG_For_INSERT([Item]ItemArchID)+","// item.item_arch_id	$clause_text:=$clause_text+PgConvert_UUID_ToPG_For_INSERT([Item]FacilitySpecialtyID)+","// item.facility_specialty_id	$clause_text:=$clause_text+PgConvert_UUID_ToPG_For_INSERT([Item]ItemUUID_AcrossItemArchs)+","// item.item_uu_id_across_item_archs	$clause_text:=$clause_text+PgConvert_UUID_ToPG_For_INSERT([Item]InvResponsibleUserID)+","// item.inv_responsible_user_id	$clause_text:=$clause_text+PgConvert_UUID_ToPG_For_INSERT([Item]FacilityDepartmentID)+","// item.facility_department_id	$clause_text:=$clause_text+PgConvert_UUID_ToPG_For_INSERT([Item]SpecialtyID)+","// item.specialty_id	$clause_text:=$clause_text+PgConvert_UUID_ToPG_For_INSERT([Item]SupID)+","// item.sup_id	$clause_text:=$clause_text+PgConvert_UUID_ToPG_For_INSERT([Item]DrPeopleID)+","// item.dr_people_id	$clause_text:=$clause_text+PgConvert_UUID_ToPG_For_INSERT([Item]ItemTypeID)+","// item.item_type_id	$clause_text:=$clause_text+PgConvert_UUID_ToPG_For_INSERT([Item]ItemMasterLinkID)+","// item.item_master_link_id	$clause_text:=$clause_text+PgConvert_UUID_ToPG_For_INSERT([Item]FacilityLocationID)+","// item.facility_location_id	$clause_text:=$clause_text+PgConvert_UUID_ToPG_For_INSERT([Item]ClinicID)+","// item.clinic_id	$clause_text:=$clause_text+PgConvert_UUID_ToPG_For_INSERT([Item]HsysTagID)+","// item.hsys_tag_id	$clause_text:=$clause_text+PgConvert_UUID_ToPG_For_INSERT([Item]NameCopiedFromProdID)+","// item.name_copied_from_prod_id	$clause_text:=$clause_text+PgConvert_DTS_ToPG([Item]CreatedDTS)+","// item.created_dts	$clause_text:=$clause_text+PgConvert_DTS_ToPG([Item]UpdatedDTS)+","// item.updated_dts	$clause_text:=$clause_text+PgConvert_DTS_ToPG([Item]NamedDTS)+","// item.named_dts	$clause_text:=$clause_text+PgConvert_DTS_ToPG([Item]NeedsSchedSyncAsOfDTS)+","// item.needs_sched_sync_as_of_dts	$clause_text:=$clause_text+PgConvert_Number_ToPG([Item]WeightLB)+","// item.weight_lb	$clause_text:=$clause_text+PgConvert_Number_ToPG([Item]Qty)+","// item.qty	$clause_text:=$clause_text+PgConvert_Number_ToPG([Item]Flow)+","// item.flow	$clause_text:=$clause_text+PgConvert_Number_ToPG([Item]FlowLong)+","// item.flow_long	$clause_text:=$clause_text+PgConvert_Number_ToPG([Item]MaxProcessedOneDay)+","// item.max_processed_one_day	$clause_text:=$clause_text+PgConvert_Number_ToPG([Item]Par)+","// item.par	$clause_text:=$clause_text+PgConvert_Number_ToPG([Item]AssemblyDifficulty)+","// item.assembly_difficulty	$clause_text:=$clause_text+PgConvert_Number_ToPG([Item]NumInst)+","// item.num_inst	$clause_text:=$clause_text+PgConvert_Number_ToPG([Item]RepairEvery_X)+","// item.repair_every_x	$clause_text:=$clause_text+PgConvert_Number_ToPG([Item]TheirQty)+","// item.their_qty	$clause_text:=$clause_text+PgConvert_Number_ToPG([Item]ReplaceEvery_X_Cycles)+","// item.replace_every_x_cycles	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]HideSpecialtyInName)+","// item.hide_specialty_in_name	$clause_text:=$clause_text+PgConvert_DateIsNotEmpty_ToPG([Item]DeletedRecordDate)+","// System field: marked_for_deletion	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]isAssemblyCritical)+","// item.is_assembly_critical	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]RequiresLeakTest)+","// item.requires_leak_test	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]isNotTrackedByInvNo)+","// item.is_not_tracked_by_inv_no	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]isIMLinkLocked)+","// item.is_imlink_locked	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]isRobotic)+","// item.is_robotic	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]isFlexibleScope)+","// item.is_flexible_scope	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]isGenericPack)+","// item.is_generic_pack	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]dontPrintCountSheet)+","// item.dont_print_count_sheet	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]isConflictCheck)+","// item.is_conflict_check	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]isSmallSet)+","// item.is_small_set	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]HideHsysTagInName)+","// item.hide_hsys_tag_in_name	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]isNameFinalized)+","// item.is_name_finalized	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]isInDataCleanseScope)+","// item.is_in_data_cleanse_scope	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]isLabelAbbr)+","// item.is_label_abbr	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]HasImplants)+","// item.has_implants	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]SyncToOtherSoftwareSystems)+","// item.sync_to_other_software_systems	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]InvHasImplants)+","// item.inv_has_implants	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]isCustomSort)+","// item.is_custom_sort	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]isNameCopiedFromProd)+","// item.is_name_copied_from_prod	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]isDeactivated)+","// item.is_deactivated	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]isVendorData)+","// item.is_vendor_data	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]NameNeedsReview)+","// item.name_needs_review	$clause_text:=$clause_text+PgConvert_Boolean_ToPG([Item]IgnoreForOptimization)+","// item.ignore_for_optimization	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]InvStatus)+","// item.inv_status	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]TheirName)+","// item.their_name	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]OptStatus)+","// item.opt_status	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]CreatedBy)+","// item.created_by	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]UpdatedBy)+","// item.updated_by	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]OldNames)+","// item.old_names	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]Their_SerialNo)+","// item.their_serial_no	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]NameDesc)+","// item.name_desc	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]Name)+","// item.name_	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]TheirID)+","// item.their_id	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]DeconSpecialInstructions)+","// item.decon_special_instructions	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]NamedBy)+","// item.named_by	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]NeedsReviewNotes)+","// item.needs_review_notes	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]VendorTrayType)+","// item.vendor_tray_type	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]SterilizationMethod)+","// item.sterilization_method	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]Priority)+","// item.priority	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]Category)+","// item.category	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]PackagingType)+","// item.packaging_type	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]PackagingNotes)+","// item.packaging_notes	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]TheirPackagingType)+","// item.their_packaging_type	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]AssemblySpecialInstructions)+","// item.assembly_special_instructions	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]SterilizeSpecialInstructions)+","// item.sterilize_special_instructions	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]LabelNameAbbr)+","// item.label_name_abbr	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]TheirLocation)+","// item.their_location	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]CountSheetStatus)+","// item.count_sheet_status	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]RequestedBy)+","// item.requested_by	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]RackRowBinNote)+","// item.rack_row_bin_note	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]StandardizationStatus)+","// item.standardization_status	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]RepairEvery_X_Type)+","// item.repair_every_x_type	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]TheirBaseBarcode)+","// item.their_base_barcode	$clause_text:=$clause_text+PgConvert_Text_ToPG([Item]TheirKey)+","// item.their_key	$clause_text:=$clause_text+PgConvert_Object_ToPG([Item]Stuff)// item.stuff			End case			$clause_text:=$clause_text+")"			$push_data_size_bytes:=BLOB size($code_blob)+Length($clause_text)			Case of				: ($record_index=$configuration_o.records_count)  // We've gone through all of the records.					$push_now:=True				: ($push_data_size_bytes>=$maximum_push_bytes)  // We've filled the buffer.					$push_now:=True				Else   // Keep on building the VALUES.					$push_now:=False			End case			If ($push_now=False)				$clause_text:=$clause_text+","+$cr  // We now *know* that we're going to add another value (statement), so we also know that we need a comma. The last (value) does *not* have a comma.			Else				$clause_text:=$clause_text+"]::"+$configuration_o.pg_type_name+"[]);"  // Like hsys_v1[]			End if			TEXT TO BLOB($clause_text;$code_blob;UTF8 text without length;*)			$clause_text:=""			If ($push_now)  // We've filled our buffer (based on max KB from IAM) or reached the last record. Push!				  // This doubles memory consumption briefly. I asked Rob about a command that accepts a BLOB instead of text.				  // He said "no" as it would require a text copy internally anyway, so it won't help. If memory is an issue,				  // write to disk instead of text or BLOB and then use Document to text to load the block in one go.				C_TEXT($push_text)  // The VALUES are built up in the loop below. When we've got all the records, or have filled our self-defined buffer, a push is sent.				$push_text:=BLOB to text($code_blob;UTF8 text without length)				SET BLOB SIZE($code_blob;0)  // Free up the RAM.				If (False)					SET TEXT TO PASTEBOARD($push_text)				End if				  // Jam the text right into the object...not calling PgQuery_SetSQLStatement here in case text is built (doubled) by for 4D for the parameter.				OB SET($insert_o;PgQuery_Statement_SQL;$push_text)				$push_text:=""  // Clear this now! It frees up memory before the push and makes sure that we don't keep resending old rows.				$ran_okay:=PgQuery_Run ($insert_o)				PgQuery_SetSQLStatement ($insert_o;"")  // Free up the memory taken by the SQL statement.				If ($ran_okay)					PgSQL_Execute ($configuration_o.connection_id;"COMMIT;")					$configuration_o.ran_okay:=$ran_okay					  //-------------------------------------------------------					  // Update the last sent ConID					  //-------------------------------------------------------					  // This is why we sort by ConID up at the top. We're chunking through the number line and at each success, we plant a flag saying, "got this far!"					PgConfigLastPushed_SetConID ($configuration_o.target_id;$configuration_o.filter_id;$last_conid_actually_sent_l;True)  // Add if missing...but it shouldn't be missing.				Else					PgSQL_Execute ($configuration_o.connection_id;"ROLLBACK;")					$record_index:=$configuration_o.records_count+1  // Break the loop.				End if			End if		End for	End if	UNLOAD RECORD([Item])	  //-------------------------------------------------------	  // Close and unlock the audit record & do logging	  //-------------------------------------------------------	$configuration_o.ran_okay:=$ran_okay  // Put this back into the configuration/status objects for the following subroutines.	PgIO_Push__CheckIt ($configuration_o;Current method name)	PgIO_Push_OnFinish ($configuration_o;$insert_o)End if$0:=$ran_okayCode_End (Current method name)
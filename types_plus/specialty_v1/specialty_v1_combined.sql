-- Create a view onto specialty formatted as specialty_v1.-- If specialty changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_specialty_v1.DROP VIEW IF EXISTS types_plus.specialty_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.specialty_v1 AS select id,        data_file_id,        marked_for_deletion,        name_,        name_short   from specialty;ALTER TABLE types_plus.specialty_v1    OWNER TO user_change_structure;-- Create a casting function to convert specialty rows into the compound type format specialty_v1.-- If specialty changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.specialty_to_v1 (specialty_in specialty)  RETURNS specialty_v1AS $BODY$        SELECT			specialty_in.id,			specialty_in.data_file_id,			specialty_in.marked_for_deletion,			specialty_in.name_,			specialty_in.name_short$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.specialty_to_v1 (specialty_in specialty) OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert specialty rows into the specialty_v1 compound type format using the following syntax:-- select specialty::specialty_v1 from specialtyDROP CAST IF EXISTS (specialty as specialty_v1);CREATE CAST (specialty as specialty_v1) WITH FUNCTION types_plus.specialty_to_v1(specialty);-- Create a function to accept an array of rows formatted as specialty_v1 for UPSERT into specialty.DROP FUNCTION IF EXISTS types_plus.insert_specialty_v1 (types_plus.specialty_v1[]);CREATE OR REPLACE FUNCTION types_plus.insert_specialty_v1 (data_in types_plus.specialty_v1[])  RETURNS intAS $BODY$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO specialty (			id,			data_file_id,			marked_for_deletion,			name_,			name_short)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.name_,			rows_in.name_short        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			name_ = EXCLUDED.name_,			name_short = EXCLUDED.name_short        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.insert_specialty_v1(types_plus.specialty_v1[]) OWNER TO user_bender;
-- Create a view onto facility_location formatted as facility_location_v1.-- If facility_location changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_facility_location_v1.DROP VIEW IF EXISTS types_plus.facility_location_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.facility_location_v1 AS select id,        marked_for_deletion,        facility_id,        type_,        name_   from facility_location;ALTER TABLE types_plus.facility_location_v1    OWNER TO user_change_structure;-- Create a casting function to convert facility_location rows into the compound type format facility_location_v1.-- If facility_location changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.facility_location_to_v1 (facility_location_in facility_location)  RETURNS facility_location_v1AS $BODY$        SELECT			facility_location_in.id,			facility_location_in.marked_for_deletion,			facility_location_in.facility_id,			facility_location_in.type_,			facility_location_in.name_$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.facility_location_to_v1 (facility_location_in facility_location) OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert facility_location rows into the facility_location_v1 compound type format using the following syntax:-- select facility_location::facility_location_v1 from facility_locationDROP CAST IF EXISTS (facility_location as facility_location_v1);CREATE CAST (facility_location as facility_location_v1) WITH FUNCTION types_plus.facility_location_to_v1(facility_location);-- Create a function to accept an array of rows formatted as facility_location_v1 for UPSERT into facility_location.DROP FUNCTION IF EXISTS types_plus.insert_facility_location_v1 (types_plus.facility_location_v1[]);CREATE OR REPLACE FUNCTION types_plus.insert_facility_location_v1 (data_in types_plus.facility_location_v1[])  RETURNS intAS $BODY$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO facility_location (			id,			marked_for_deletion,			facility_id,			type_,			name_)        SELECT			rows_in.id,			rows_in.marked_for_deletion,			rows_in.facility_id,			rows_in.type_,			rows_in.name_        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			marked_for_deletion = EXCLUDED.marked_for_deletion,			facility_id = EXCLUDED.facility_id,			type_ = EXCLUDED.type_,			name_ = EXCLUDED.name_        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.insert_facility_location_v1(types_plus.facility_location_v1[]) OWNER TO user_bender;
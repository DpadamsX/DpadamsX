-- Create a function to accept an array of rows formatted as loaner_case_v1 for UPSERT into loaner_case.DROP FUNCTION IF EXISTS types_plus.insert_loaner_case_v1 (types_plus.loaner_case_v1[]);  CREATE OR REPLACE FUNCTION types_plus.insert_loaner_case_v1 (data_in types_plus.loaner_case_v1[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO loaner_case (			id,			loaner_id,			last_updated_by_data_file_id,			updated_dts,			created_dts,			case_dts,			marked_for_deletion,			desc_,			surgeon,			updated_by,			created_by)                  SELECT			rows_in.id,			rows_in.loaner_id,			rows_in.last_updated_by_data_file_id,			rows_in.updated_dts,			rows_in.created_dts,			rows_in.case_dts,			rows_in.marked_for_deletion,			rows_in.desc_,			rows_in.surgeon,			rows_in.updated_by,			rows_in.created_by                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			loaner_id = EXCLUDED.loaner_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			updated_dts = EXCLUDED.updated_dts,			created_dts = EXCLUDED.created_dts,			case_dts = EXCLUDED.case_dts,			marked_for_deletion = EXCLUDED.marked_for_deletion,			desc_ = EXCLUDED.desc_,			surgeon = EXCLUDED.surgeon,			updated_by = EXCLUDED.updated_by,			created_by = EXCLUDED.created_by          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_loaner_case_v1(types_plus.loaner_case_v1[])	OWNER TO user_bender;
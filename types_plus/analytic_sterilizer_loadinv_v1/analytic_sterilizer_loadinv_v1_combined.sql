-- Create a view onto analytic_sterilizer_loadinv formatted as analytic_sterilizer_loadinv_v1.-- If analytic_sterilizer_loadinv changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_analytic_sterilizer_loadinv_v1.DROP VIEW IF EXISTS types_plus.analytic_sterilizer_loadinv_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.analytic_sterilizer_loadinv_v1 AS select id,        data_file_id,        marked_for_deletion,        facility_id,        hsys_id,        inv_id,        item_id,        item_type_id,        speciality_id,        sterilize_method_id,        sterilize_params_id,        sterilizer_id,        sterilizerload_id,        web_user_id,        inv_name_provided,        is_iuss,        num_inst,        qty,        category,        clinic_dept_name,        processing_seconds,        done_dts,        done_local_dts   from analytic_sterilizer_loadinv;ALTER TABLE types_plus.analytic_sterilizer_loadinv_v1    OWNER TO user_change_structure;-- Create a casting function to convert analytic_sterilizer_loadinv rows into the compound type format analytic_sterilizer_loadinv_v1.-- If analytic_sterilizer_loadinv changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.analytic_sterilizer_loadinv_to_v1 (analytic_sterilizer_loadinv_in analytic_sterilizer_loadinv)  RETURNS analytic_sterilizer_loadinv_v1AS $BODY$        SELECT			analytic_sterilizer_loadinv_in.id,			analytic_sterilizer_loadinv_in.data_file_id,			analytic_sterilizer_loadinv_in.marked_for_deletion,			analytic_sterilizer_loadinv_in.facility_id,			analytic_sterilizer_loadinv_in.hsys_id,			analytic_sterilizer_loadinv_in.inv_id,			analytic_sterilizer_loadinv_in.item_id,			analytic_sterilizer_loadinv_in.item_type_id,			analytic_sterilizer_loadinv_in.speciality_id,			analytic_sterilizer_loadinv_in.sterilize_method_id,			analytic_sterilizer_loadinv_in.sterilize_params_id,			analytic_sterilizer_loadinv_in.sterilizer_id,			analytic_sterilizer_loadinv_in.sterilizerload_id,			analytic_sterilizer_loadinv_in.web_user_id,			analytic_sterilizer_loadinv_in.inv_name_provided,			analytic_sterilizer_loadinv_in.is_iuss,			analytic_sterilizer_loadinv_in.num_inst,			analytic_sterilizer_loadinv_in.qty,			analytic_sterilizer_loadinv_in.category,			analytic_sterilizer_loadinv_in.clinic_dept_name,			analytic_sterilizer_loadinv_in.processing_seconds,			analytic_sterilizer_loadinv_in.done_dts,			analytic_sterilizer_loadinv_in.done_local_dts$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.analytic_sterilizer_loadinv_to_v1 (analytic_sterilizer_loadinv_in analytic_sterilizer_loadinv) OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert analytic_sterilizer_loadinv rows into the analytic_sterilizer_loadinv_v1 compound type format using the following syntax:-- select analytic_sterilizer_loadinv::analytic_sterilizer_loadinv_v1 from analytic_sterilizer_loadinvDROP CAST IF EXISTS (analytic_sterilizer_loadinv as analytic_sterilizer_loadinv_v1);CREATE CAST (analytic_sterilizer_loadinv as analytic_sterilizer_loadinv_v1) WITH FUNCTION types_plus.analytic_sterilizer_loadinv_to_v1(analytic_sterilizer_loadinv);-- Create a function to accept an array of rows formatted as analytic_sterilizer_loadinv_v1 for UPSERT into analytic_sterilizer_loadinv.DROP FUNCTION IF EXISTS types_plus.insert_analytic_sterilizer_loadinv_v1 (types_plus.analytic_sterilizer_loadinv_v1[]);CREATE OR REPLACE FUNCTION types_plus.insert_analytic_sterilizer_loadinv_v1 (data_in types_plus.analytic_sterilizer_loadinv_v1[])  RETURNS intAS $BODY$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO analytic_sterilizer_loadinv (			id,			data_file_id,			marked_for_deletion,			facility_id,			hsys_id,			inv_id,			item_id,			item_type_id,			speciality_id,			sterilize_method_id,			sterilize_params_id,			sterilizer_id,			sterilizerload_id,			web_user_id,			inv_name_provided,			is_iuss,			num_inst,			qty,			category,			clinic_dept_name,			processing_seconds,			done_dts,			done_local_dts)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.facility_id,			rows_in.hsys_id,			rows_in.inv_id,			rows_in.item_id,			rows_in.item_type_id,			rows_in.speciality_id,			rows_in.sterilize_method_id,			rows_in.sterilize_params_id,			rows_in.sterilizer_id,			rows_in.sterilizerload_id,			rows_in.web_user_id,			rows_in.inv_name_provided,			rows_in.is_iuss,			rows_in.num_inst,			rows_in.qty,			rows_in.category,			rows_in.clinic_dept_name,			rows_in.processing_seconds,			rows_in.done_dts,			rows_in.done_local_dts        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			facility_id = EXCLUDED.facility_id,			hsys_id = EXCLUDED.hsys_id,			inv_id = EXCLUDED.inv_id,			item_id = EXCLUDED.item_id,			item_type_id = EXCLUDED.item_type_id,			speciality_id = EXCLUDED.speciality_id,			sterilize_method_id = EXCLUDED.sterilize_method_id,			sterilize_params_id = EXCLUDED.sterilize_params_id,			sterilizer_id = EXCLUDED.sterilizer_id,			sterilizerload_id = EXCLUDED.sterilizerload_id,			web_user_id = EXCLUDED.web_user_id,			inv_name_provided = EXCLUDED.inv_name_provided,			is_iuss = EXCLUDED.is_iuss,			num_inst = EXCLUDED.num_inst,			qty = EXCLUDED.qty,			category = EXCLUDED.category,			clinic_dept_name = EXCLUDED.clinic_dept_name,			processing_seconds = EXCLUDED.processing_seconds,			done_dts = EXCLUDED.done_dts,			done_local_dts = EXCLUDED.done_local_dts        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.insert_analytic_sterilizer_loadinv_v1(types_plus.analytic_sterilizer_loadinv_v1[]) OWNER TO user_bender;
-- Create a view onto assembly formatted as assembly_v1.-- If assembly changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_assembly_v1.DROP VIEW IF EXISTS types_plus.assembly_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.assembly_v1 AS select id,        data_file_id,        marked_for_deletion,        created_by_user_id,        done_by_user_id,        facility_location_id,        inv_id,        last_updated_by_data_file_id,        updated_by_user_id,        is_complete,        is_quick_turn,        con_id,        created_by,        difficulty,        quantity,        sequence_no,        num_inst,        points,        done_dts,        created_dts,        updated_dts,        missing_list,        priority,        status,        updated_by   from assembly;ALTER TABLE types_plus.assembly_v1    OWNER TO user_change_structure;-- Create a casting function to convert assembly rows into the compound type format assembly_v1.-- If assembly changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.assembly_to_v1 (assembly_in assembly)  RETURNS assembly_v1AS $BODY$        SELECT			assembly_in.id,			assembly_in.data_file_id,			assembly_in.marked_for_deletion,			assembly_in.created_by_user_id,			assembly_in.done_by_user_id,			assembly_in.facility_location_id,			assembly_in.inv_id,			assembly_in.last_updated_by_data_file_id,			assembly_in.updated_by_user_id,			assembly_in.is_complete,			assembly_in.is_quick_turn,			assembly_in.con_id,			assembly_in.created_by,			assembly_in.difficulty,			assembly_in.quantity,			assembly_in.sequence_no,			assembly_in.num_inst,			assembly_in.points,			assembly_in.done_dts,			assembly_in.created_dts,			assembly_in.updated_dts,			assembly_in.missing_list,			assembly_in.priority,			assembly_in.status,			assembly_in.updated_by$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.assembly_to_v1 (assembly_in assembly) OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert assembly rows into the assembly_v1 compound type format using the following syntax:-- select assembly::assembly_v1 from assemblyDROP CAST IF EXISTS (assembly as assembly_v1);CREATE CAST (assembly as assembly_v1) WITH FUNCTION types_plus.assembly_to_v1(assembly);-- Create a function to accept an array of rows formatted as assembly_v1 for UPSERT into assembly.DROP FUNCTION IF EXISTS types_plus.insert_assembly_v1 (types_plus.assembly_v1[]);CREATE OR REPLACE FUNCTION types_plus.insert_assembly_v1 (data_in types_plus.assembly_v1[])  RETURNS intAS $BODY$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO assembly (			id,			data_file_id,			marked_for_deletion,			created_by_user_id,			done_by_user_id,			facility_location_id,			inv_id,			last_updated_by_data_file_id,			updated_by_user_id,			is_complete,			is_quick_turn,			con_id,			created_by,			difficulty,			quantity,			sequence_no,			num_inst,			points,			done_dts,			created_dts,			updated_dts,			missing_list,			priority,			status,			updated_by)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.created_by_user_id,			rows_in.done_by_user_id,			rows_in.facility_location_id,			rows_in.inv_id,			rows_in.last_updated_by_data_file_id,			rows_in.updated_by_user_id,			rows_in.is_complete,			rows_in.is_quick_turn,			rows_in.con_id,			rows_in.created_by,			rows_in.difficulty,			rows_in.quantity,			rows_in.sequence_no,			rows_in.num_inst,			rows_in.points,			rows_in.done_dts,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.missing_list,			rows_in.priority,			rows_in.status,			rows_in.updated_by        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			created_by_user_id = EXCLUDED.created_by_user_id,			done_by_user_id = EXCLUDED.done_by_user_id,			facility_location_id = EXCLUDED.facility_location_id,			inv_id = EXCLUDED.inv_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			updated_by_user_id = EXCLUDED.updated_by_user_id,			is_complete = EXCLUDED.is_complete,			is_quick_turn = EXCLUDED.is_quick_turn,			con_id = EXCLUDED.con_id,			created_by = EXCLUDED.created_by,			difficulty = EXCLUDED.difficulty,			quantity = EXCLUDED.quantity,			sequence_no = EXCLUDED.sequence_no,			num_inst = EXCLUDED.num_inst,			points = EXCLUDED.points,			done_dts = EXCLUDED.done_dts,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			missing_list = EXCLUDED.missing_list,			priority = EXCLUDED.priority,			status = EXCLUDED.status,			updated_by = EXCLUDED.updated_by        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.insert_assembly_v1(types_plus.assembly_v1[]) OWNER TO user_bender;
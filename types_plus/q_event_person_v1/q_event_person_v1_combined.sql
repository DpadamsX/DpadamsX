-- Create a view onto q_event_person formatted as q_event_person_v1.-- If q_event_person changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_q_event_person_v1.DROP VIEW IF EXISTS types_plus.q_event_person_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.q_event_person_v1 AS select id,        web_user_id,        last_updated_by_data_file_id,        qevent_id,        created_dts,        updated_dts,        marked_for_deletion,        is_accountable,        send_email,        updated_by,        role_,        created_by   from q_event_person;ALTER TABLE types_plus.q_event_person_v1    OWNER TO user_change_structure;-- Create a casting function to convert q_event_person rows into the compound type format q_event_person_v1.-- If q_event_person changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.q_event_person_to_v1 (q_event_person_in q_event_person)  RETURNS q_event_person_v1AS $BODY$                   SELECT			q_event_person_in.id,			q_event_person_in.web_user_id,			q_event_person_in.last_updated_by_data_file_id,			q_event_person_in.qevent_id,			q_event_person_in.created_dts,			q_event_person_in.updated_dts,			q_event_person_in.marked_for_deletion,			q_event_person_in.is_accountable,			q_event_person_in.send_email,			q_event_person_in.updated_by,			q_event_person_in.role_,			q_event_person_in.created_by               $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.q_event_person_to_v1 (q_event_person_in q_event_person)	OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert q_event_person rows into the q_event_person_v1 compound type format using the following syntax:-- select q_event_person::q_event_person_v1 from q_event_personDROP CAST IF EXISTS (q_event_person as q_event_person_v1);CREATE CAST (q_event_person as q_event_person_v1) WITH FUNCTION types_plus.q_event_person_to_v1(q_event_person);-- Create a function to accept an array of rows formatted as q_event_person_v1 for UPSERT into q_event_person.DROP FUNCTION IF EXISTS types_plus.insert_q_event_person_v1 (types_plus.q_event_person_v1[]);  CREATE OR REPLACE FUNCTION types_plus.insert_q_event_person_v1 (data_in types_plus.q_event_person_v1[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO q_event_person (			id,			web_user_id,			last_updated_by_data_file_id,			qevent_id,			created_dts,			updated_dts,			marked_for_deletion,			is_accountable,			send_email,			updated_by,			role_,			created_by)                  SELECT			rows_in.id,			rows_in.web_user_id,			rows_in.last_updated_by_data_file_id,			rows_in.qevent_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.marked_for_deletion,			rows_in.is_accountable,			rows_in.send_email,			rows_in.updated_by,			rows_in.role_,			rows_in.created_by                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			web_user_id = EXCLUDED.web_user_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			qevent_id = EXCLUDED.qevent_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_accountable = EXCLUDED.is_accountable,			send_email = EXCLUDED.send_email,			updated_by = EXCLUDED.updated_by,			role_ = EXCLUDED.role_,			created_by = EXCLUDED.created_by          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_q_event_person_v1(types_plus.q_event_person_v1[])	OWNER TO user_bender;
-- Create a view onto q_type formatted as q_type_v1.-- If q_type changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_q_type_v1.DROP VIEW IF EXISTS types_plus.q_type_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.q_type_v1 AS select id,        hsys_id,        last_updated_by_data_file_id,        created_dts,        updated_dts,        marked_for_deletion,        is_active,        updated_by,        created_by,        ascendco_name,        name_,        type_   from q_type;ALTER TABLE types_plus.q_type_v1    OWNER TO user_change_structure;-- Create a casting function to convert q_type rows into the compound type format q_type_v1.-- If q_type changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.q_type_to_v1 (q_type_in q_type)  RETURNS q_type_v1AS $BODY$                   SELECT			q_type_in.id,			q_type_in.hsys_id,			q_type_in.last_updated_by_data_file_id,			q_type_in.created_dts,			q_type_in.updated_dts,			q_type_in.marked_for_deletion,			q_type_in.is_active,			q_type_in.updated_by,			q_type_in.created_by,			q_type_in.ascendco_name,			q_type_in.name_,			q_type_in.type_               $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.q_type_to_v1 (q_type_in q_type)	OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert q_type rows into the q_type_v1 compound type format using the following syntax:-- select q_type::q_type_v1 from q_typeDROP CAST IF EXISTS (q_type as q_type_v1);CREATE CAST (q_type as q_type_v1) WITH FUNCTION types_plus.q_type_to_v1(q_type);-- Create a function to accept an array of rows formatted as q_type_v1 for UPSERT into q_type.DROP FUNCTION IF EXISTS types_plus.insert_q_type_v1 (types_plus.q_type_v1[]);  CREATE OR REPLACE FUNCTION types_plus.insert_q_type_v1 (data_in types_plus.q_type_v1[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO q_type (			id,			hsys_id,			last_updated_by_data_file_id,			created_dts,			updated_dts,			marked_for_deletion,			is_active,			updated_by,			created_by,			ascendco_name,			name_,			type_)                  SELECT			rows_in.id,			rows_in.hsys_id,			rows_in.last_updated_by_data_file_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.marked_for_deletion,			rows_in.is_active,			rows_in.updated_by,			rows_in.created_by,			rows_in.ascendco_name,			rows_in.name_,			rows_in.type_                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			hsys_id = EXCLUDED.hsys_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_active = EXCLUDED.is_active,			updated_by = EXCLUDED.updated_by,			created_by = EXCLUDED.created_by,			ascendco_name = EXCLUDED.ascendco_name,			name_ = EXCLUDED.name_,			type_ = EXCLUDED.type_          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_q_type_v1(types_plus.q_type_v1[])	OWNER TO user_bender;
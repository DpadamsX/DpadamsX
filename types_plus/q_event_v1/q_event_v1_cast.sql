-- Create a casting function to convert q_event rows into the compound type format q_event_v1.-- If q_event changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.q_event_to_v1 (q_event_in q_event)  RETURNS q_event_v1AS $BODY$                   SELECT			q_event_in.or_surgeon_people_id,			q_event_in.id,			q_event_in.qtype_id,			q_event_in.qsub_type_id,			q_event_in.inv_id,			q_event_in.scan_id,			q_event_in.assembly_id,			q_event_in.status_when_user_id,			q_event_in.facility_id,			q_event_in.last_updated_by_data_file_id,			q_event_in.status_reported_by_user_id,			q_event_in.status_done_user_id,			q_event_in.status_investigating_user_id,			q_event_in.datetime_local,			q_event_in.status_done_dts,			q_event_in.status_when_dts,			q_event_in.status_investigating_dts,			q_event_in.status_reported_dts,			q_event_in.updated_dts,			q_event_in.created_dts,			q_event_in.or_delay_minutes,			q_event_in.marked_for_deletion,			q_event_in.is_data_problem,			q_event_in.is_process_problem,			q_event_in.assembly_audit_prods,			q_event_in.is_coached,			q_event_in.updated_by,			q_event_in.or_room,			q_event_in.status_done_name,			q_event_in.status,			q_event_in.status_when_name,			q_event_in.desc_,			q_event_in.status_investigating_name,			q_event_in.or_delay_type,			q_event_in.status_reported_by_name,			q_event_in.notes,			q_event_in.created_by               $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.q_event_to_v1 (q_event_in q_event)	OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert q_event rows into the q_event_v1 compound type format using the following syntax:-- select q_event::q_event_v1 from q_eventDROP CAST IF EXISTS (q_event as q_event_v1);CREATE CAST (q_event as q_event_v1) WITH FUNCTION types_plus.q_event_to_v1(q_event);
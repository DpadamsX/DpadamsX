-- Create a function to accept an array of rows formatted as web_user_v1 for UPSERT into web_user.DROP FUNCTION IF EXISTS types_plus.insert_web_user_v1 (types_plus.web_user_v1[]);  CREATE OR REPLACE FUNCTION types_plus.insert_web_user_v1 (data_in types_plus.web_user_v1[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO web_user (			id,			data_file_id,			marked_for_deletion,			hsys_id,			username,			role_,			name_first,			name_last,			name_full)                  SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.hsys_id,			rows_in.username,			rows_in.role_,			rows_in.name_first,			rows_in.name_last,			rows_in.name_full                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			hsys_id = EXCLUDED.hsys_id,			username = EXCLUDED.username,			role_ = EXCLUDED.role_,			name_first = EXCLUDED.name_first,			name_last = EXCLUDED.name_last,			name_full = EXCLUDED.name_full          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_web_user_v1(types_plus.web_user_v1[]) OWNER TO user_bender;
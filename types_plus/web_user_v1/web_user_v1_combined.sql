-- Create a view onto web_user formatted as web_user_v1.-- If web_user changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_web_user_v1.DROP VIEW IF EXISTS types_plus.web_user_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.web_user_v1 AS select id,        data_file_id,        marked_for_deletion,        hsys_id,        username,        role_,        name_first,        name_last,        name_full   from web_user;ALTER TABLE types_plus.web_user_v1    OWNER TO user_change_structure;-- Create a casting function to convert web_user rows into the compound type format web_user_v1.-- If web_user changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.web_user_to_v1 (web_user_in web_user)  RETURNS web_user_v1AS $BODY$                   SELECT			web_user_in.id,			web_user_in.data_file_id,			web_user_in.marked_for_deletion,			web_user_in.hsys_id,			web_user_in.username,			web_user_in.role_,			web_user_in.name_first,			web_user_in.name_last,			web_user_in.name_full               $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.web_user_to_v1 (web_user_in web_user) OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert web_user rows into the web_user_v1 compound type format using the following syntax:-- select web_user::web_user_v1 from web_userDROP CAST IF EXISTS (web_user as web_user_v1);CREATE CAST (web_user as web_user_v1) WITH FUNCTION types_plus.web_user_to_v1(web_user);-- Create a function to accept an array of rows formatted as web_user_v1 for UPSERT into web_user.DROP FUNCTION IF EXISTS types_plus.insert_web_user_v1 (types_plus.web_user_v1[]);  CREATE OR REPLACE FUNCTION types_plus.insert_web_user_v1 (data_in types_plus.web_user_v1[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO web_user (			id,			data_file_id,			marked_for_deletion,			hsys_id,			username,			role_,			name_first,			name_last,			name_full)                  SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.hsys_id,			rows_in.username,			rows_in.role_,			rows_in.name_first,			rows_in.name_last,			rows_in.name_full                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			hsys_id = EXCLUDED.hsys_id,			username = EXCLUDED.username,			role_ = EXCLUDED.role_,			name_first = EXCLUDED.name_first,			name_last = EXCLUDED.name_last,			name_full = EXCLUDED.name_full          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_web_user_v1(types_plus.web_user_v1[]) OWNER TO user_bender;
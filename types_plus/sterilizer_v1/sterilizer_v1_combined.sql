-- Create a view onto sterilizer formatted as sterilizer_v1.-- If sterilizer changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_sterilizer_v1.DROP VIEW IF EXISTS types_plus.sterilizer_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.sterilizer_v1 AS select id,        data_file_id,        marked_for_deletion,        facility_id,        sterilize_method_id,        name_   from sterilizer;ALTER TABLE types_plus.sterilizer_v1    OWNER TO user_change_structure;-- Create a casting function to convert sterilizer rows into the compound type format sterilizer_v1.-- If sterilizer changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.sterilizer_to_v1 (sterilizer_in sterilizer)  RETURNS sterilizer_v1AS $BODY$                   SELECT			sterilizer_in.id,			sterilizer_in.data_file_id,			sterilizer_in.marked_for_deletion,			sterilizer_in.facility_id,			sterilizer_in.sterilize_method_id,			sterilizer_in.name_               $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.sterilizer_to_v1 (sterilizer_in sterilizer) OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert sterilizer rows into the sterilizer_v1 compound type format using the following syntax:-- select sterilizer::sterilizer_v1 from sterilizerDROP CAST IF EXISTS (sterilizer as sterilizer_v1);CREATE CAST (sterilizer as sterilizer_v1) WITH FUNCTION types_plus.sterilizer_to_v1(sterilizer);-- Create a function to accept an array of rows formatted as sterilizer_v1 for UPSERT into sterilizer.DROP FUNCTION IF EXISTS types_plus.insert_sterilizer_v1 (types_plus.sterilizer_v1[]);  CREATE OR REPLACE FUNCTION types_plus.insert_sterilizer_v1 (data_in types_plus.sterilizer_v1[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO sterilizer (			id,			data_file_id,			marked_for_deletion,			facility_id,			sterilize_method_id,			name_)                  SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.facility_id,			rows_in.sterilize_method_id,			rows_in.name_                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			facility_id = EXCLUDED.facility_id,			sterilize_method_id = EXCLUDED.sterilize_method_id,			name_ = EXCLUDED.name_          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_sterilizer_v1(types_plus.sterilizer_v1[]) OWNER TO user_bender;
-- Create a view onto sterilize_params formatted as sterilize_params_v1.-- If sterilize_params changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_sterilize_params_v1.DROP VIEW IF EXISTS types_plus.sterilize_params_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.sterilize_params_v1 AS select id,        data_file_id,        marked_for_deletion,        hsys_id,        sterilize_method_id,        name_   from sterilize_params;ALTER TABLE types_plus.sterilize_params_v1    OWNER TO user_change_structure;-- Create a casting function to convert sterilize_params rows into the compound type format sterilize_params_v1.-- If sterilize_params changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.sterilize_params_to_v1 (sterilize_params_in sterilize_params)  RETURNS sterilize_params_v1AS $BODY$        SELECT			sterilize_params_in.id,			sterilize_params_in.data_file_id,			sterilize_params_in.marked_for_deletion,			sterilize_params_in.hsys_id,			sterilize_params_in.sterilize_method_id,			sterilize_params_in.name_$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.sterilize_params_to_v1 (sterilize_params_in sterilize_params) OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert sterilize_params rows into the sterilize_params_v1 compound type format using the following syntax:-- select sterilize_params::sterilize_params_v1 from sterilize_paramsDROP CAST IF EXISTS (sterilize_params as sterilize_params_v1);CREATE CAST (sterilize_params as sterilize_params_v1) WITH FUNCTION types_plus.sterilize_params_to_v1(sterilize_params);-- Create a function to accept an array of rows formatted as sterilize_params_v1 for UPSERT into sterilize_params.DROP FUNCTION IF EXISTS types_plus.insert_sterilize_params_v1 (types_plus.sterilize_params_v1[]);CREATE OR REPLACE FUNCTION types_plus.insert_sterilize_params_v1 (data_in types_plus.sterilize_params_v1[])  RETURNS intAS $BODY$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO sterilize_params (			id,			data_file_id,			marked_for_deletion,			hsys_id,			sterilize_method_id,			name_)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.hsys_id,			rows_in.sterilize_method_id,			rows_in.name_        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			hsys_id = EXCLUDED.hsys_id,			sterilize_method_id = EXCLUDED.sterilize_method_id,			name_ = EXCLUDED.name_        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.insert_sterilize_params_v1(types_plus.sterilize_params_v1[]) OWNER TO user_bender;
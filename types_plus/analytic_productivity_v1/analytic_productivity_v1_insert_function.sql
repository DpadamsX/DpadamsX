-- Create a function to accept an array of rows formatted as analytic_productivity_v1 for UPSERT into analytic_productivity.DROP FUNCTION IF EXISTS types_plus.insert_analytic_productivity_v1 (types_plus.analytic_productivity_v1[]);CREATE OR REPLACE FUNCTION types_plus.insert_analytic_productivity_v1 (data_in types_plus.analytic_productivity_v1[])  RETURNS intAS $BODY$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO analytic_productivity (			id,			data_file_id,			marked_for_deletion,			hsys_id,			facility_id,			facility_location_id,			specialty_id,			item_type_id,			user_name,			inv_name,			item_name,			tray_or_pack,			num_inst,			assembly_minutes,			pause_minutes,			points,			points_per_hour,			assembly_hour,			pause_hour,			start_utc,			start_local,			end_utc,			end_local)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.marked_for_deletion,			rows_in.hsys_id,			rows_in.facility_id,			rows_in.facility_location_id,			rows_in.specialty_id,			rows_in.item_type_id,			rows_in.user_name,			rows_in.inv_name,			rows_in.item_name,			rows_in.tray_or_pack,			rows_in.num_inst,			rows_in.assembly_minutes,			rows_in.pause_minutes,			rows_in.points,			rows_in.points_per_hour,			rows_in.assembly_hour,			rows_in.pause_hour,			rows_in.start_utc,			rows_in.start_local,			rows_in.end_utc,			rows_in.end_local        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			marked_for_deletion = EXCLUDED.marked_for_deletion,			hsys_id = EXCLUDED.hsys_id,			facility_id = EXCLUDED.facility_id,			facility_location_id = EXCLUDED.facility_location_id,			specialty_id = EXCLUDED.specialty_id,			item_type_id = EXCLUDED.item_type_id,			user_name = EXCLUDED.user_name,			inv_name = EXCLUDED.inv_name,			item_name = EXCLUDED.item_name,			tray_or_pack = EXCLUDED.tray_or_pack,			num_inst = EXCLUDED.num_inst,			assembly_minutes = EXCLUDED.assembly_minutes,			pause_minutes = EXCLUDED.pause_minutes,			points = EXCLUDED.points,			points_per_hour = EXCLUDED.points_per_hour,			assembly_hour = EXCLUDED.assembly_hour,			pause_hour = EXCLUDED.pause_hour,			start_utc = EXCLUDED.start_utc,			start_local = EXCLUDED.start_local,			end_utc = EXCLUDED.end_utc,			end_local = EXCLUDED.end_local        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.insert_analytic_productivity_v1(types_plus.analytic_productivity_v1[]) OWNER TO user_bender;
-- Create a casting function to convert analytic_productivity rows into the compound type format analytic_productivity_v1.-- If analytic_productivity changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.analytic_productivity_to_v1 (analytic_productivity_in analytic_productivity)  RETURNS analytic_productivity_v1AS $BODY$        SELECT			analytic_productivity_in.id,			analytic_productivity_in.data_file_id,			analytic_productivity_in.marked_for_deletion,			analytic_productivity_in.hsys_id,			analytic_productivity_in.facility_id,			analytic_productivity_in.facility_location_id,			analytic_productivity_in.specialty_id,			analytic_productivity_in.item_type_id,			analytic_productivity_in.user_name,			analytic_productivity_in.inv_name,			analytic_productivity_in.item_name,			analytic_productivity_in.tray_or_pack,			analytic_productivity_in.num_inst,			analytic_productivity_in.assembly_minutes,			analytic_productivity_in.pause_minutes,			analytic_productivity_in.points,			analytic_productivity_in.points_per_hour,			analytic_productivity_in.assembly_hour,			analytic_productivity_in.pause_hour,			analytic_productivity_in.start_utc,			analytic_productivity_in.start_local,			analytic_productivity_in.end_utc,			analytic_productivity_in.end_local$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.analytic_productivity_to_v1 (analytic_productivity_in analytic_productivity)    OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert analytic_productivity rows into the analytic_productivity_v1 compound type format using the following syntax:-- select analytic_productivity::analytic_productivity_v1 from analytic_productivityDROP CAST IF EXISTS (analytic_productivity as analytic_productivity_v1);CREATE CAST (analytic_productivity as analytic_productivity_v1) WITH FUNCTION types_plus.analytic_productivity_to_v1(analytic_productivity);
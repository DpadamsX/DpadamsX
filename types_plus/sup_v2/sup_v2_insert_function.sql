-- Create a function to accept an array of rows formatted as sup_v2 for UPSERT into sup.DROP FUNCTION IF EXISTS types_plus.insert_sup_v2 (types_plus.sup_v2[]);  CREATE OR REPLACE FUNCTION types_plus.insert_sup_v2 (data_in types_plus.sup_v2[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO sup (			id,			custom_facility_id,			sup_parent_id,			created_dts,			updated_dts,			is_custom_by_facility,			marked_for_deletion,			is_available_for_loaners,			name_,			created_by,			updated_by,			short_name)                  SELECT			rows_in.id,			rows_in.custom_facility_id,			rows_in.sup_parent_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.is_custom_by_facility,			rows_in.marked_for_deletion,			rows_in.is_available_for_loaners,			rows_in.name_,			rows_in.created_by,			rows_in.updated_by,			rows_in.short_name                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			custom_facility_id = EXCLUDED.custom_facility_id,			sup_parent_id = EXCLUDED.sup_parent_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			is_custom_by_facility = EXCLUDED.is_custom_by_facility,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_available_for_loaners = EXCLUDED.is_available_for_loaners,			name_ = EXCLUDED.name_,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			short_name = EXCLUDED.short_name          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_sup_v2(types_plus.sup_v2[])	OWNER TO user_bender;
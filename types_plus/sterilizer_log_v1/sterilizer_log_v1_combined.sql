-- Create a view onto sterilizer_log formatted as sterilizer_log_v1.-- If sterilizer_log changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_sterilizer_log_v1.DROP VIEW IF EXISTS types_plus.sterilizer_log_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.sterilizer_log_v1 AS select id,        data_file_id,        log_type,        summary_json,        log_xml   from sterilizer_log;ALTER TABLE types_plus.sterilizer_log_v1    OWNER TO user_change_structure;-- Create a casting function to convert sterilizer_log rows into the compound type format sterilizer_log_v1.-- If sterilizer_log changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.sterilizer_log_to_v1 (sterilizer_log_in sterilizer_log)  RETURNS sterilizer_log_v1AS $BODY$        SELECT			sterilizer_log_in.id,			sterilizer_log_in.data_file_id,			sterilizer_log_in.log_type,			sterilizer_log_in.summary_json,			sterilizer_log_in.log_xml$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.sterilizer_log_to_v1 (sterilizer_log_in sterilizer_log) OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert sterilizer_log rows into the sterilizer_log_v1 compound type format using the following syntax:-- select sterilizer_log::sterilizer_log_v1 from sterilizer_logDROP CAST IF EXISTS (sterilizer_log as sterilizer_log_v1);CREATE CAST (sterilizer_log as sterilizer_log_v1) WITH FUNCTION types_plus.sterilizer_log_to_v1(sterilizer_log);-- Create a function to accept an array of rows formatted as sterilizer_log_v1 for UPSERT into sterilizer_log.DROP FUNCTION IF EXISTS types_plus.insert_sterilizer_log_v1 (types_plus.sterilizer_log_v1[]);CREATE OR REPLACE FUNCTION types_plus.insert_sterilizer_log_v1 (data_in types_plus.sterilizer_log_v1[])  RETURNS intAS $BODY$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO sterilizer_log (			id,			data_file_id,			log_type,			summary_json,			log_xml)        SELECT			rows_in.id,			rows_in.data_file_id,			rows_in.log_type,			rows_in.summary_json,			rows_in.log_xml        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			data_file_id = EXCLUDED.data_file_id,			log_type = EXCLUDED.log_type,			summary_json = EXCLUDED.summary_json,			log_xml = EXCLUDED.log_xml        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.insert_sterilizer_log_v1(types_plus.sterilizer_log_v1[]) OWNER TO user_bender;
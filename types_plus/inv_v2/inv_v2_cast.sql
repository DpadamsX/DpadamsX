-- Create a casting function to convert inv rows into the compound type format inv_v2.-- If inv changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.inv_to_v2 (inv_in inv)  RETURNS inv_v2AS $BODY$                   SELECT			inv_in.id,			inv_in.item_id,			inv_in.item_arch_id,			inv_in.facility_location_id,			inv_in.standard_faclity_id,			inv_in.store_at_facility_id,			inv_in.created_dts,			inv_in.updated_dts,			inv_in.serial_no_as_of_dts,			inv_in.qty,			inv_in.flow,			inv_in.flow_long,			inv_in.par,			inv_in.last_seen_date,			inv_in.their_next_repair_date,			inv_in.last_sterilized_date,			inv_in.repair_last_repair_date,			inv_in.is_searched_but_not_found,			inv_in.marked_for_deletion,			inv_in.is_found,			inv_in.is_go_live_perm_printed,			inv_in.is_sleeping,			inv_in.is_handwritten_label,			inv_in.is_wrong_loc,			inv_in.is_facility_loc_inherited,			inv_in.needs_repair,			inv_in.is_deactivated,			inv_in.is_contents_incomplete,			inv_in.their_location,			inv_in.category,			inv_in.their_name,			inv_in.their_id,			inv_in.created_by,			inv_in.updated_by,			inv_in.their_id_scrubbed,			inv_in.crossing_status,			inv_in.inv_no,			inv_in.their_raw_name,			inv_in.comments_,			inv_in.their_bar_code,			inv_in.loc_rack,			inv_in.loc_row,			inv_in.loc_bin,			inv_in.loc_note,			inv_in.serial_no,			inv_in.data_cleanse_classification,			inv_in.repair_next_due,			inv_in.repair_last_repaired_by,			inv_in.msgs               $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.inv_to_v2 (inv_in inv)	OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert inv rows into the inv_v2 compound type format using the following syntax:-- select inv::inv_v2 from invDROP CAST IF EXISTS (inv as inv_v2);CREATE CAST (inv as inv_v2) WITH FUNCTION types_plus.inv_to_v2(inv);
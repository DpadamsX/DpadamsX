-- Create a view onto q_event_audit_step formatted as q_event_audit_step_v1.-- If q_event_audit_step changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_q_event_audit_step_v1.DROP VIEW IF EXISTS types_plus.q_event_audit_step_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.q_event_audit_step_v1 AS select id,        qevent_id,        qaudit_step_id,        last_updated_by_data_file_id,        updated_dts,        created_dts,        sort,        marked_for_deletion,        is_coached,        notes,        created_by,        updated_by,        step,        qsub_type_id_event,        status   from q_event_audit_step;ALTER TABLE types_plus.q_event_audit_step_v1    OWNER TO user_change_structure;-- Create a casting function to convert q_event_audit_step rows into the compound type format q_event_audit_step_v1.-- If q_event_audit_step changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.q_event_audit_step_to_v1 (q_event_audit_step_in q_event_audit_step)  RETURNS q_event_audit_step_v1AS $BODY$                   SELECT			q_event_audit_step_in.id,			q_event_audit_step_in.qevent_id,			q_event_audit_step_in.qaudit_step_id,			q_event_audit_step_in.last_updated_by_data_file_id,			q_event_audit_step_in.updated_dts,			q_event_audit_step_in.created_dts,			q_event_audit_step_in.sort,			q_event_audit_step_in.marked_for_deletion,			q_event_audit_step_in.is_coached,			q_event_audit_step_in.notes,			q_event_audit_step_in.created_by,			q_event_audit_step_in.updated_by,			q_event_audit_step_in.step,			q_event_audit_step_in.qsub_type_id_event,			q_event_audit_step_in.status               $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.q_event_audit_step_to_v1 (q_event_audit_step_in q_event_audit_step)	OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert q_event_audit_step rows into the q_event_audit_step_v1 compound type format using the following syntax:-- select q_event_audit_step::q_event_audit_step_v1 from q_event_audit_stepDROP CAST IF EXISTS (q_event_audit_step as q_event_audit_step_v1);CREATE CAST (q_event_audit_step as q_event_audit_step_v1) WITH FUNCTION types_plus.q_event_audit_step_to_v1(q_event_audit_step);-- Create a function to accept an array of rows formatted as q_event_audit_step_v1 for UPSERT into q_event_audit_step.DROP FUNCTION IF EXISTS types_plus.insert_q_event_audit_step_v1 (types_plus.q_event_audit_step_v1[]);  CREATE OR REPLACE FUNCTION types_plus.insert_q_event_audit_step_v1 (data_in types_plus.q_event_audit_step_v1[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO q_event_audit_step (			id,			qevent_id,			qaudit_step_id,			last_updated_by_data_file_id,			updated_dts,			created_dts,			sort,			marked_for_deletion,			is_coached,			notes,			created_by,			updated_by,			step,			qsub_type_id_event,			status)                  SELECT			rows_in.id,			rows_in.qevent_id,			rows_in.qaudit_step_id,			rows_in.last_updated_by_data_file_id,			rows_in.updated_dts,			rows_in.created_dts,			rows_in.sort,			rows_in.marked_for_deletion,			rows_in.is_coached,			rows_in.notes,			rows_in.created_by,			rows_in.updated_by,			rows_in.step,			rows_in.qsub_type_id_event,			rows_in.status                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			qevent_id = EXCLUDED.qevent_id,			qaudit_step_id = EXCLUDED.qaudit_step_id,			last_updated_by_data_file_id = EXCLUDED.last_updated_by_data_file_id,			updated_dts = EXCLUDED.updated_dts,			created_dts = EXCLUDED.created_dts,			sort = EXCLUDED.sort,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_coached = EXCLUDED.is_coached,			notes = EXCLUDED.notes,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by,			step = EXCLUDED.step,			qsub_type_id_event = EXCLUDED.qsub_type_id_event,			status = EXCLUDED.status          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_q_event_audit_step_v1(types_plus.q_event_audit_step_v1[])	OWNER TO user_bender;
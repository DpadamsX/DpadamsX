-- Create a function to accept an array of rows formatted as focus_v2 for UPSERT into focus.DROP FUNCTION IF EXISTS types_plus.insert_focus_v2 (types_plus.focus_v2[]);  CREATE OR REPLACE FUNCTION types_plus.insert_focus_v2 (data_in types_plus.focus_v2[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO focus (			scase_id,			hsys_id,			facility_id,			sched_dts,			facility_name,			or_name,			case_seq,			desc_,			status,			transport_from,			surgeon_name,			proc_name,			when_)                  SELECT			rows_in.scase_id,			rows_in.hsys_id,			rows_in.facility_id,			rows_in.sched_dts,			rows_in.facility_name,			rows_in.or_name,			rows_in.case_seq,			rows_in.desc_,			rows_in.status,			rows_in.transport_from,			rows_in.surgeon_name,			rows_in.proc_name,			rows_in.when_                      FROM unnest(data_in) as rows_in                  returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_focus_v2(types_plus.focus_v2[])	OWNER TO user_bender;
-- Create a view onto focus formatted as focus_v2.-- If focus changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_focus_v2.DROP VIEW IF EXISTS types_plus.focus_v2 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.focus_v2 AS select scase_id,        hsys_id,        facility_id,        sched_dts,        facility_name,        or_name,        case_seq,        desc_,        status,        transport_from,        surgeon_name,        proc_name,        when_   from focus;ALTER TABLE types_plus.focus_v2    OWNER TO user_change_structure;-- Create a casting function to convert focus rows into the compound type format focus_v2.-- If focus changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.focus_to_v2 (focus_in focus)  RETURNS focus_v2AS $BODY$                   SELECT			focus_in.scase_id,			focus_in.hsys_id,			focus_in.facility_id,			focus_in.sched_dts,			focus_in.facility_name,			focus_in.or_name,			focus_in.case_seq,			focus_in.desc_,			focus_in.status,			focus_in.transport_from,			focus_in.surgeon_name,			focus_in.proc_name,			focus_in.when_               $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.focus_to_v2 (focus_in focus)	OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert focus rows into the focus_v2 compound type format using the following syntax:-- select focus::focus_v2 from focusDROP CAST IF EXISTS (focus as focus_v2);CREATE CAST (focus as focus_v2) WITH FUNCTION types_plus.focus_to_v2(focus);-- Create a function to accept an array of rows formatted as focus_v2 for UPSERT into focus.DROP FUNCTION IF EXISTS types_plus.insert_focus_v2 (types_plus.focus_v2[]);  CREATE OR REPLACE FUNCTION types_plus.insert_focus_v2 (data_in types_plus.focus_v2[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO focus (			scase_id,			hsys_id,			facility_id,			sched_dts,			facility_name,			or_name,			case_seq,			desc_,			status,			transport_from,			surgeon_name,			proc_name,			when_)                  SELECT			rows_in.scase_id,			rows_in.hsys_id,			rows_in.facility_id,			rows_in.sched_dts,			rows_in.facility_name,			rows_in.or_name,			rows_in.case_seq,			rows_in.desc_,			rows_in.status,			rows_in.transport_from,			rows_in.surgeon_name,			rows_in.proc_name,			rows_in.when_                      FROM unnest(data_in) as rows_in                  returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_focus_v2(types_plus.focus_v2[])	OWNER TO user_bender;
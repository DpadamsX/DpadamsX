-- Create a casting function to convert analytic_sterilizer_load rows into the compound type format analytic_sterilizer_load_v1.-- If analytic_sterilizer_load changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.analytic_sterilizer_load_to_v1 (analytic_sterilizer_load_in analytic_sterilizer_load)  RETURNS analytic_sterilizer_load_v1AS $BODY$        SELECT			analytic_sterilizer_load_in.id,			analytic_sterilizer_load_in.marked_for_deletion,			analytic_sterilizer_load_in.data_file_id,			analytic_sterilizer_load_in.sterilize_method_id,			analytic_sterilizer_load_in.sterilize_params_id,			analytic_sterilizer_load_in.sterilizer_id,			analytic_sterilizer_load_in.facility_id,			analytic_sterilizer_load_in.web_user_id,			analytic_sterilizer_load_in.status_building_dts,			analytic_sterilizer_load_in.status_building_local_dts,			analytic_sterilizer_load_in.status_done_dts,			analytic_sterilizer_load_in.status_done_local_dts,			analytic_sterilizer_load_in.status,			analytic_sterilizer_load_in.is_iuss,			analytic_sterilizer_load_in.instruments_count,			analytic_sterilizer_load_in.packs_count,			analytic_sterilizer_load_in.trays_count$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.analytic_sterilizer_load_to_v1 (analytic_sterilizer_load_in analytic_sterilizer_load) OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert analytic_sterilizer_load rows into the analytic_sterilizer_load_v1 compound type format using the following syntax:-- select analytic_sterilizer_load::analytic_sterilizer_load_v1 from analytic_sterilizer_loadDROP CAST IF EXISTS (analytic_sterilizer_load as analytic_sterilizer_load_v1);CREATE CAST (analytic_sterilizer_load as analytic_sterilizer_load_v1) WITH FUNCTION types_plus.analytic_sterilizer_load_to_v1(analytic_sterilizer_load);
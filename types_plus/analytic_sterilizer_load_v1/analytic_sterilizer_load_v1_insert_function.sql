-- Create a function to accept an array of rows formatted as analytic_sterilizer_load_v1 for UPSERT into analytic_sterilizer_load.DROP FUNCTION IF EXISTS types_plus.insert_analytic_sterilizer_load_v1 (types_plus.analytic_sterilizer_load_v1[]);CREATE OR REPLACE FUNCTION types_plus.insert_analytic_sterilizer_load_v1 (data_in types_plus.analytic_sterilizer_load_v1[])  RETURNS intAS $BODY$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO analytic_sterilizer_load (			id,			marked_for_deletion,			data_file_id,			sterilize_method_id,			sterilize_params_id,			sterilizer_id,			facility_id,			web_user_id,			status_building_dts,			status_building_local_dts,			status_done_dts,			status_done_local_dts,			status,			is_iuss,			instruments_count,			packs_count,			trays_count)        SELECT			rows_in.id,			rows_in.marked_for_deletion,			rows_in.data_file_id,			rows_in.sterilize_method_id,			rows_in.sterilize_params_id,			rows_in.sterilizer_id,			rows_in.facility_id,			rows_in.web_user_id,			rows_in.status_building_dts,			rows_in.status_building_local_dts,			rows_in.status_done_dts,			rows_in.status_done_local_dts,			rows_in.status,			rows_in.is_iuss,			rows_in.instruments_count,			rows_in.packs_count,			rows_in.trays_count        FROM unnest(data_in) as rows_in        ON CONFLICT(id) DO UPDATE SET			marked_for_deletion = EXCLUDED.marked_for_deletion,			data_file_id = EXCLUDED.data_file_id,			sterilize_method_id = EXCLUDED.sterilize_method_id,			sterilize_params_id = EXCLUDED.sterilize_params_id,			sterilizer_id = EXCLUDED.sterilizer_id,			facility_id = EXCLUDED.facility_id,			web_user_id = EXCLUDED.web_user_id,			status_building_dts = EXCLUDED.status_building_dts,			status_building_local_dts = EXCLUDED.status_building_local_dts,			status_done_dts = EXCLUDED.status_done_dts,			status_done_local_dts = EXCLUDED.status_done_local_dts,			status = EXCLUDED.status,			is_iuss = EXCLUDED.is_iuss,			instruments_count = EXCLUDED.instruments_count,			packs_count = EXCLUDED.packs_count,			trays_count = EXCLUDED.trays_count        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.insert_analytic_sterilizer_load_v1(types_plus.analytic_sterilizer_load_v1[]) OWNER TO user_bender;
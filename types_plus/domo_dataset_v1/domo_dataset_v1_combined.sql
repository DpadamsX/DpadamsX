-- Create a view onto domo_dataset formatted as domo_dataset_v1.-- If domo_dataset changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_domo_dataset_v1.DROP VIEW IF EXISTS types_plus.domo_dataset_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.domo_dataset_v1 AS select id,        dataset_name,        rows_count,        columns_count,        created_at_dts,        updated_at_dts   from domo_dataset;ALTER TABLE types_plus.domo_dataset_v1    OWNER TO user_change_structure;-- Create a casting function to convert domo_dataset rows into the compound type format domo_dataset_v1.-- If domo_dataset changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.domo_dataset_to_v1 (domo_dataset_in domo_dataset)  RETURNS domo_dataset_v1AS $BODY$                   SELECT			domo_dataset_in.id,			domo_dataset_in.dataset_name,			domo_dataset_in.rows_count,			domo_dataset_in.columns_count,			domo_dataset_in.created_at_dts,			domo_dataset_in.updated_at_dts               $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.domo_dataset_to_v1 (domo_dataset_in domo_dataset)	OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert domo_dataset rows into the domo_dataset_v1 compound type format using the following syntax:-- select domo_dataset::domo_dataset_v1 from domo_datasetDROP CAST IF EXISTS (domo_dataset as domo_dataset_v1);CREATE CAST (domo_dataset as domo_dataset_v1) WITH FUNCTION types_plus.domo_dataset_to_v1(domo_dataset);-- Create a function to accept an array of rows formatted as domo_dataset_v1 for UPSERT into domo_dataset.DROP FUNCTION IF EXISTS types_plus.insert_domo_dataset_v1 (types_plus.domo_dataset_v1[]);  CREATE OR REPLACE FUNCTION types_plus.insert_domo_dataset_v1 (data_in types_plus.domo_dataset_v1[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO domo_dataset (			id,			dataset_name,			rows_count,			columns_count,			created_at_dts,			updated_at_dts)                  SELECT			rows_in.id,			rows_in.dataset_name,			rows_in.rows_count,			rows_in.columns_count,			rows_in.created_at_dts,			rows_in.updated_at_dts                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			dataset_name = EXCLUDED.dataset_name,			rows_count = EXCLUDED.rows_count,			columns_count = EXCLUDED.columns_count,			created_at_dts = EXCLUDED.created_at_dts,			updated_at_dts = EXCLUDED.updated_at_dts          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_domo_dataset_v1(types_plus.domo_dataset_v1[])	OWNER TO user_bender;
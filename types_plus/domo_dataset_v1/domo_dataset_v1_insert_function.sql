-- Create a function to accept an array of rows formatted as domo_dataset_v1 for UPSERT into domo_dataset.DROP FUNCTION IF EXISTS types_plus.insert_domo_dataset_v1 (types_plus.domo_dataset_v1[]);  CREATE OR REPLACE FUNCTION types_plus.insert_domo_dataset_v1 (data_in types_plus.domo_dataset_v1[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO domo_dataset (			id,			dataset_name,			rows_count,			columns_count,			created_at_dts,			updated_at_dts)                  SELECT			rows_in.id,			rows_in.dataset_name,			rows_in.rows_count,			rows_in.columns_count,			rows_in.created_at_dts,			rows_in.updated_at_dts                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			dataset_name = EXCLUDED.dataset_name,			rows_count = EXCLUDED.rows_count,			columns_count = EXCLUDED.columns_count,			created_at_dts = EXCLUDED.created_at_dts,			updated_at_dts = EXCLUDED.updated_at_dts          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_domo_dataset_v1(types_plus.domo_dataset_v1[])	OWNER TO user_bender;
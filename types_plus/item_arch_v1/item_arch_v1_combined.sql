-- Create a view onto item_arch formatted as item_arch_v1.-- If item_arch changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_item_arch_v1.DROP VIEW IF EXISTS types_plus.item_arch_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.item_arch_v1 AS select id,        facility_id,        clinic_id,        created_dts,        updated_dts,        previous_as_of,        marked_for_deletion,        is_current,        name_,        type_,        created_by,        updated_by   from item_arch;ALTER TABLE types_plus.item_arch_v1    OWNER TO user_change_structure;-- Create a casting function to convert item_arch rows into the compound type format item_arch_v1.-- If item_arch changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.item_arch_to_v1 (item_arch_in item_arch)  RETURNS item_arch_v1AS $BODY$                   SELECT			item_arch_in.id,			item_arch_in.facility_id,			item_arch_in.clinic_id,			item_arch_in.created_dts,			item_arch_in.updated_dts,			item_arch_in.previous_as_of,			item_arch_in.marked_for_deletion,			item_arch_in.is_current,			item_arch_in.name_,			item_arch_in.type_,			item_arch_in.created_by,			item_arch_in.updated_by               $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.item_arch_to_v1 (item_arch_in item_arch)	OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert item_arch rows into the item_arch_v1 compound type format using the following syntax:-- select item_arch::item_arch_v1 from item_archDROP CAST IF EXISTS (item_arch as item_arch_v1);CREATE CAST (item_arch as item_arch_v1) WITH FUNCTION types_plus.item_arch_to_v1(item_arch);-- Create a function to accept an array of rows formatted as item_arch_v1 for UPSERT into item_arch.DROP FUNCTION IF EXISTS types_plus.insert_item_arch_v1 (types_plus.item_arch_v1[]);  CREATE OR REPLACE FUNCTION types_plus.insert_item_arch_v1 (data_in types_plus.item_arch_v1[])  RETURNS intAS $BODY$ -- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO item_arch (			id,			facility_id,			clinic_id,			created_dts,			updated_dts,			previous_as_of,			marked_for_deletion,			is_current,			name_,			type_,			created_by,			updated_by)                  SELECT			rows_in.id,			rows_in.facility_id,			rows_in.clinic_id,			rows_in.created_dts,			rows_in.updated_dts,			rows_in.previous_as_of,			rows_in.marked_for_deletion,			rows_in.is_current,			rows_in.name_,			rows_in.type_,			rows_in.created_by,			rows_in.updated_by                      FROM unnest(data_in) as rows_in                  ON CONFLICT(id) DO UPDATE SET			facility_id = EXCLUDED.facility_id,			clinic_id = EXCLUDED.clinic_id,			created_dts = EXCLUDED.created_dts,			updated_dts = EXCLUDED.updated_dts,			previous_as_of = EXCLUDED.previous_as_of,			marked_for_deletion = EXCLUDED.marked_for_deletion,			is_current = EXCLUDED.is_current,			name_ = EXCLUDED.name_,			type_ = EXCLUDED.type_,			created_by = EXCLUDED.created_by,			updated_by = EXCLUDED.updated_by          returning 1 as row_counter)         select sum(row_counter)::integer from inserted_rows; $BODY$LANGUAGE sql;  ALTER FUNCTION types_plus.insert_item_arch_v1(types_plus.item_arch_v1[])	OWNER TO user_bender;
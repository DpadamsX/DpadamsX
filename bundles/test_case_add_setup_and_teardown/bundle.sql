/*bundle folder: test_case_add_setup_and_teardownBuild date:   2020-04-24T03:07:53ZDescription:  test caseThis script combines the following files into a single transaction:Build scripts:00_clean_slate.sql01 test_case.sql alias   Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:tables:dba:test_case.sql02 test_result.sql alias   Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:tables:dba:test_result.sql03_test_result_plus.sql alias   Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:views:dba:test_result_plus.sql04_test_failed.sql alias   Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:views:dba:test_failed.sql05_test_failed_focus.sql alias   Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:views:dba:test_failed_focus.sql06_test_case_setup.sql alias   Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:functions:dba:test_case_setup.sql07_test_result_insert.sql alias   Coyote:Users:dpadams2:Resilio Sync:DPA:nautilus:functions:dba:test_result_insert.sql*/BEGIN;-- 00_clean_slate.sqlDROP TABLE IF EXISTS dba.test_case CASCADE;DROP TABLE IF EXISTS dba.test_result CASCADE;-- 01 test_case.sql alias-------------------------------------- Define table------------------------------------DROP TABLE IF EXISTS dba.test_case CASCADE;CREATE TABLE IF NOT EXISTS dba.test_case (    id                       uuid NOT NULL DEFAULT extensions.gen_random_uuid(),    added_dts                timestamptz                    NOT NULL DEFAULT now(), -- The timestamp of the transaction you're in.    object_class             citext_not_empty               NOT NULL DEFAULT NULL,    object_schema            citext_not_empty               NOT NULL DEFAULT NULL,    object_name              citext_not_empty               NOT NULL DEFAULT NULL,    function_signature       citext                         NOT NULL DEFAULT '',    test_name                citext_not_empty               NOT NULL DEFAULT NULL,    test_code                text_not_empty                 NOT NULL DEFAULT NULL,    setup_code               citext                         NOT NULL DEFAULT '',    teardown_code            citext                         NOT NULL DEFAULT '',    expected_response        citext                         NOT NULL DEFAULT '',    expected_error           citext                         NOT NULL DEFAULT '',    expected_outcome         test_outcome                   NOT NULL DEFAULT NULL,   -- Custom domain allowing 'pass', 'warning', 'fail', case-blind.    response_type            citext_not_empty               NOT NULL DEFAULT '',     -- text, numeric, record, JSON, like that.    comparison_options       jsonb                          NOT NULL DEFAULT '{"case":"blind"}'::jsonb,    run_as                   user_name[]                    NOT NULL DEFAULT NULL,   -- array of representative users to test as, checked against the user_name DOMAIN.    modifies_data            bool                           NOT NULL DEFAULT false,    rds_only                 bool                           NOT NULL DEFAULT false);ALTER TABLE dba.test_case    ADD CONSTRAINT test_case_id_pkey    PRIMARY KEY (id);ALTER TABLE dba.test_case	ADD CONSTRAINT test_case_unique_signature	UNIQUE (object_class,object_schema,object_name,function_signature,test_name);ALTER TABLE dba.test_case    OWNER TO user_change_structure;-------------------------------------- Build indexes-------------------------------------- None needed at the moment.-------------------------------------- Add triggers-------------------------------------- None needed at the moment, but this might change to auto-populate and dirty custom_function.-- 02 test_result.sql alias-------------------------------------- Define table------------------------------------DROP TABLE IF EXISTS dba.test_result CASCADE;CREATE TABLE IF NOT EXISTS dba.test_result (	id               uuid          NOT NULL DEFAULT extensions.gen_random_uuid(),	test_case_id     uuid          NOT NULL DEFAUlT NULL, -- Need to declare as a FK.    patch_log_id     uuid,         -- Optional.	result_dts       timestamptz   NOT NULL DEFAULT now(), -- The timestamp of the transaction you're in.    test_passed      bool          NOT NULL DEFAULT false,    server_address   citext        NOT NULL DEFAULT inet_server_addr()::citext,    database_name    citext        NOT NULL DEFAULT current_database()::citext,    pg_version       citext        NOT NULL DEFAULT version()::citext,    user_name        user_name     NOT NULL DEFAULT current_user::user_name, -- user_name is a custom domain.    actual_response  citext        NOT NULL DEFAULT '',    actual_error     citext        NOT NULL DEFAULT '',    actual_outcome   test_outcome, -- Custom DOMAIN based on citext that only accepts the values pass, warning, or fail, case-insensitive.    diagnostics      citext        NOT NULL DEFAULT '',    summary          citext        NOT NULL DEFAULT '',    results_json     jsonb         NOT NULL DEFAULT '{}'::jsonb);ALTER TABLE dba.test_result	ADD CONSTRAINT test_result_id_pkey    PRIMARY KEY (id);ALTER TABLE dba.test_result	ADD CONSTRAINT test_result_case_and_user_unique    UNIQUE (test_case_id,user_name);ALTER TABLE dba.test_result	ADD CONSTRAINT test_result_test_case_fk	FOREIGN KEY (test_case_id)	REFERENCES dba.test_case (id)	ON DELETE CASCADE	ON UPDATE NO ACTION;ALTER TABLE dba.test_result	OWNER TO user_change_structure;-------------------------------------- Build indexes-------------------------------------- None needed at the moment.-------------------------------------- Add triggers-------------------------------------- None needed at the moment, but this might change to auto-populate and dirty custom_function.-- 03_test_result_plus.sql aliasDROP VIEW IF EXISTS dba.test_result_plus;CREATE OR REPLACE VIEW dba.test_result_plus ASSELECT-- test_result tr source table-- test_case  tc  required parent table-- patch_log  tl  optional parent table	tr.test_passed,	tc.object_class,	tc.object_schema,	tc.object_name,	tc.function_signature,	tc.test_name,	tr.id,	tr.result_dts,	tr.server_address,	tr.database_name,	tr.pg_version,	tr.user_name,	tr.diagnostics,	tr.summary,	tc.test_code,    tc.object_schema = 'IB_not_Postgres' as is_an_ib_test,	tc.expected_response,	tr.actual_response,	tc.expected_error,	tr.actual_error,	tc.expected_outcome,	tr.actual_outcome,    tc.id as test_case_id,	tc.response_type,	tc.comparison_optionsFROM test_result    AS trLEFT JOIN test_case AS tc ON (tc.id = tr.test_case_id)LEFT JOIN patch_log AS pl ON (pl.id = tr.patch_log_id);ALTER VIEW dba.test_result_plus	OWNER TO user_change_structure;-- 04_test_failed.sql aliasDROP VIEW IF EXISTS dba.test_failed;CREATE OR REPLACE VIEW dba.test_failed ASSELECT *  FROM test_result_plus WHERE test_passed = false;ALTER VIEW dba.test_failed	OWNER TO user_change_structure;-- 05_test_failed_focus.sql aliasDROP VIEW IF EXISTS dba.test_failed_focus;CREATE OR REPLACE VIEW dba.test_failed_focus ASSELECT-- test_result tr source table-- test_case  tc  required parent table	tr.test_passed,	tc.object_class,	tc.object_schema,	tc.object_name,	tc.function_signature,	tc.test_name,	tc.comparison_options,	tr.diagnostics,	tr.summary,	tc.test_code,    tc.object_schema = 'IB_not_Postgres' as is_an_ib_test,	tc.expected_response,	tr.actual_response,	tc.expected_error,	tr.actual_error,	tc.expected_outcome,	tr.actual_outcomeFROM test_result    AS trLEFT JOIN test_case AS tc ON (tc.id = tr.test_case_id)WHERE test_passed = false;ALTER VIEW dba.test_failed_focus	OWNER TO user_change_structure;-- 06_test_case_setup.sql alias-- Woah, *way* too hard to call this by hand, I'm setting up a test case setup screen in IB. -- DPA-- Earlier signatures here:DROP FUNCTION IF EXISTS dba.test_case_setup (citext, citext, citext, citext, citext, text, citext, citext, citext, jsonb, test_outcome, user_name[], bool);DROP FUNCTION IF EXISTS dba.test_case_setup (citext, citext, citext, citext, citext, text, citext, citext, citext, jsonb, test_outcome, user_name[], bool, citext, citext);CREATE OR REPLACE FUNCTION dba.test_case_setup (	object_class_in             citext,	object_schema_in            citext,	object_name_in              citext,	function_signature_in       citext,	test_name_in                citext,	test_code_in                text,	expected_response_in        citext,	expected_error_in           citext,	response_type_in            citext,	comparison_options_in       jsonb,	expected_outcome_in         test_outcome,	run_as_in                   user_name[],  -- array of users to run as. This is saved as a user_name[], which checks each value against a custom domain to detect bogus names.	modifies_data_in            bool DEFAULT true,	rds_only_in                 bool DEFAULT false,	setup_code_in               citext DEFAULT '',	teardown_code_in            citext DEFAULT '')RETURNS test_caseAS $BODY$INSERT INTO test_case (               object_class,               object_schema,               object_name,               function_signature,               test_name,               test_code,               expected_response,               expected_error,               response_type,               comparison_options,               expected_outcome,               run_as,               modifies_data,               rds_only,               setup_code,               teardown_code)       VALUES (               object_class_in,               object_schema_in,               object_name_in,               function_signature_in,               test_name_in,               test_code_in,               expected_response_in,               expected_error_in,               response_type_in,               comparison_options_in,               expected_outcome_in,               run_as_in,               modifies_data_in,               rds_only_in,               setup_code_in,               teardown_code_in)-- Using a synthetic uuid id field, but there's also a uniqueness check on-- object_class,object_schema,object_name,function_signature,test_name		ON CONFLICT ON CONSTRAINT test_case_unique_signature			DO UPDATE SET			   test_code               = test_code_in,			   expected_response       = expected_response_in,			   expected_error          = expected_error_in,			   response_type           = response_type_in,			   comparison_options      = comparison_options_in,			   expected_outcome        = expected_outcome_in,			   run_as                  = run_as_in,			   modifies_data           = modifies_data_in,			   rds_only                = rds_only_in,			   setup_code              = setup_code_in,			   teardown_code           = teardown_code_in       RETURNING *;$BODY$	LANGUAGE sql;ALTER FUNCTION dba.test_case_setup (citext, citext, citext, citext, citext, text, citext, citext, citext, jsonb, test_outcome, user_name[], bool,  bool, citext, citext)	OWNER TO user_bender;-- 07_test_result_insert.sql aliasCREATE OR REPLACE FUNCTION dba.test_result_insert(	test_case_id_in    uuid,	test_passed_in     bool,	actual_outcome_in  test_outcome,	user_name_in       user_name,	patch_log_id_in    uuid   DEFAULT NULL,	actual_response_in citext DEFAULT '',	actual_error_in    citext DEFAULT '',	diagnostics_in     citext DEFAULT '',	summary_in         citext DEFAULT '',	results_json_in    jsonb  DEFAULT '{}'::jsonb)RETURNS test_resultAS $BODY$INSERT INTO test_result (	           test_case_id,	           actual_outcome,	           test_passed,	           patch_log_id,	           actual_response,	           actual_error,	           summary,	           diagnostics,	           results_json,	           user_name)       VALUES (test_case_id_in,	           actual_outcome_in,	           test_passed_in,	           patch_log_id_in,	           actual_response_in,	           actual_error_in,	           summary_in,	           diagnostics_in,	           results_json_in,	           user_name_in::user_name) -- user_name is a custom domain.		ON CONFLICT ON CONSTRAINT test_result_case_and_user_unique			DO UPDATE SET			   actual_outcome  = actual_outcome_in,               test_passed     = test_passed_in,               patch_log_id    = patch_log_id_in,               actual_response = actual_response_in,               actual_error    = actual_error_in,               summary         = summary_in,               diagnostics     = diagnostics_in,               results_json    = results_json_in,               user_name       = user_name_in::user_name -- user_name is a custom domain       RETURNING *$BODY$	LANGUAGE sql;ALTER FUNCTION dba.test_result_insert (uuid,bool,test_outcome,user_name,uuid,citext,citext,citext,citext,jsonb)	OWNER TO user_bender;COMMIT;
-------------------------------------- Define table------------------------------------BEGIN;DROP TABLE IF EXISTS ascendco.analytic_work;CREATE TABLE IF NOT EXISTS ascendco.analytic_work (--  Standard IDs    id                       uuid             NOT NULL DEFAULT NULL,    hsys_id                  uuid             NOT NULL DEFAULT NULL,    facility_id              uuid             NOT NULL DEFAULT NULL,    inv_id                   uuid             NOT NULL DEFAULT NULL,    user_id                  uuid             NOT NULL DEFAULT NULL,--  Source IDs, only one of which is populated at a time. Or not...we'll see how it works out.    activity_id              uuid             NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',    assembly_id              uuid             NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',    q_event_id               uuid             NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',    scan_id                  uuid             NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',    scase_id                 uuid             NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',    scase_inv_id             uuid             NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',    sterilizer_load_id       uuid             NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',    sterilizer_loadinv_id    uuid             NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',--  Data points    start_dts                timestamp        NOT NULL DEFAULT 'epoch',    end_dts                  timestamp        NOT NULL DEFAULT 'epoch',    start_local_dts          timestamp        NOT NULL DEFAULT 'epoch',    end_local_dts            timestamp        NOT NULL DEFAULT 'epoch',    duration                 decimal (12,2)   NOT NULL DEFAULT 0,    missing_inst             int4             NOT NULL DEFAULT 0,    num_inst                 int4             NOT NULL DEFAULT 0,    num_items                int4             NOT NULL DEFAULT 0,    points                   int4             NOT NULL DEFAULT 0,    num_packs                int4             NOT NULL DEFAULT 0,    num_trays                int4             NOT NULL DEFAULT 0,    marked_for_deletion      boolean          NOT NULL DEFAULT false,    activity                 citext           NOT NULL DEFAULT '',    description              citext           NOT NULL DEFAULT '');ALTER TABLE ascendco.analytic_work  ADD CONSTRAINT analytic_work_pk    PRIMARY KEY (id, activity_id);ALTER TABLE ascendco.analytic_work	OWNER TO user_change_structure;-------------------------------------- Partitions-------------------------------------- We're only expecting a few million rows a year, which suggests not needed.-- But....I wonder. The rows are pretty wide. Well, time will tell and,-- if necessary, we can retrofit partitions. A bit painful but possible. — DPA-------------------------------------- Build statistics------------------------------------/*The Postgres ANALYZE system function collects statistics about each table and column. These valuesare used by the query planner to help generate probabilistic cost estimates for various query plans.When the plans are based on misleading stats, you can have poor performance. Stats can be reconfiguredon a row-by-row basis, and some special extended statistics are supported too.For example, facility_id and hsys_id are both in this table.If you know the facility_id, the hsys_id is always going to be predictable.facility is 'functionally dependent' on hsys, or 100% correlated.Custom and extended statistics are typically added after we've been accumulating data for some time.See PgBuildStatistics_Extended in IB to declare new statistics objects. For more background, seehttps://ascendco.atlassian.net/wiki/spaces/SON/pages/1723695105/*/-------------------------------------- ANALYZE options-------------------------------------- Placholder and reminder for now. ANALYZE and AUTOVACUUM tunings are *core* Postgres DBA-- skills. But, for the minute, we're not running into trouble. I'm chipping away af figuring-- out when to tune, and how, and when not to tune. ‚Äî DPA-------------------------------------- Build indexes-------------------------------------- Note: Postgres automatically creates a UNIQUE B-tree for the PRIMARY KEY, simple or compound.-- Add indexes, when and as needed. Keep an eye out for *effecdtive partial indexes*. The table-- is likely going to be big enough (row counts and widths) to make it important. — DPA-- Compact, partial index that inlcudes only the rows marked for deletion. Sweet!CREATE INDEX analytic_work_marked_for_deletion_ix_gin          ON ascendco.analytic_work       USING GIN (marked_for_deletion extensions.bool_ops)       WHERE marked_for_deletion = true;-------------------------------------- CLUSTER------------------------------------/*Code stub/reminder about CLUSTERing. Not a hard topic, but too big to write up here. Notes and links:https://ascendco.atlassian.net/wiki/spaces/SON/pages/356679683/ALTER TABLE ascendco.analytic_work    CLUSTER ON ***index name to cluster by here.***;*/-------------------------------------- Add triggers------------------------------------   CREATE TRIGGER trigger_analytic_work_after_delete            AFTER DELETE               ON ascendco.analytic_work      REFERENCING OLD TABLE AS deleted_rows         FOR EACH STATEMENTEXECUTE PROCEDURE ascendco.trigger_function_log_deletion_count();  CREATE TRIGGER trigger_analytic_work_before_truncate            BEFORE TRUNCATE               ON ascendco.analytic_work         FOR EACH STATEMENTEXECUTE PROCEDURE ascendco.trigger_function_log_truncation_count();-------------------------------------- Manual Permissions for now-------------------------------------- Standard permissions for utility/admin users:GRANT SELECT, INSERT, UPDATE, DELETE ON ascendco.analytic_work TO rds_super;GRANT SELECT, INSERT, UPDATE, DELETE ON ascendco.analytic_work TO user_cleanup;GRANT SELECT ON ascendco.analytic_work TO user_reporting;GRANT SELECT ON ascendco.analytic_work TO user_change_structure;-- Adjustable user permissions:GRANT SELECT ON ascendco.analytic_work TO user_iceberg;GRANT SELECT ON ascendco.analytic_work TO user_iceberg_remote;GRANT SELECT ON ascendco.analytic_work TO user_saws;GRANT SELECT, INSERT, UPDATE ON ascendco.analytic_work TO user_sonar;GRANT SELECT ON ascendco.analytic_work TO user_leviathan;COMMIT;
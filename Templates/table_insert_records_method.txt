If (False)  // ===========================================	^method_name^	  // DESCRIPTION: ^description^	  // CREATED BY: ^created_by^	  // DATE: ^created_on^	  // LAST MODIFIED:End if   // ============================================Code_Start (Current method name)C_TEXT($1;$database_name)C_LONGINT($2;$rows_per_insert_max)C_LONGINT($3;$inserts_per_transaction_max)C_TEXT($4;$truncate_option_name)C_BOOLEAN($5;$log_errors_to_disk)If (Count parameters>=1)	$database_name:=$1End ifIf ($database_name="")	$database_name:=^default_database_label^End if$rows_per_insert_max:=0If (Count parameters>=2)	$rows_per_insert_max:=$2End ifIf ($rows_per_insert_max<1)	$rows_per_insert_max:=^rows_per_insert_max^End if$inserts_per_transaction_max:=0If (Count parameters>=2)	$inserts_per_transaction_max:=$3End ifIf ($inserts_per_transaction_max<1)	$inserts_per_transaction_max:=^inserts_per_transaction_max^End if$truncate_option_name:=""// Don't truncateIf (Count parameters>=4)	$truncate_option_name:=$4End ifC_TIME($error_log_docref)C_TEXT($log_insert_errors_to_disk)C_TEXT($error_log_path)C_TEXT($cr)$error_log_docref:=?00:00:00?$error_log_path:=""$log_errors_to_disk:=False$cr:=Char(Carriage return)$log_errors_to_disk:=TrueIf (Count parameters>=5)	$log_errors_to_disk:=$5End ifIf ($log_errors_to_disk)	$error_log_path:=PgSQL_BuildErrorLogPath (Current method name)	If (Test path name($error_log_path)=Is a document)		$error_log_docref:=Append document($error_log_path)	Else		$error_log_docref:=Create document($error_log_path;"TEXT")		SEND PACKET($error_log_docref;"rcl.id"+Char(Tab)+"table"+Char(Tab)+"error_message"+$cr)	End if	  // Not testing anything here...not checking for the log file blowing up. Should.End ifC_TEXT($table_name_in_postgres)$table_name_in_postgres:="^table_name_in_postgres^"If ($truncate_option_name#"")	C_TEXT($truncate_sql)	$truncate_sql:=""	$truncate_sql:=$truncate_sql+"BEGIN;"+$cr	$truncate_sql:=$truncate_sql+"TRUNCATE TABLE "+$table_name_in_postgres+"  "+$truncate_option_name+" ;"+$cr	$truncate_sql:=$truncate_sql+"COMMIT;"+$cr	C_LONGINT($connection_id)	$connection_id:=PgSQL_ConnectToFavorite ($database_name;PgSQL Schema Ascendco;PgSQL User change_structure)	C_LONGINT($always_zero_for_some_reason)	$always_zero_for_some_reason:=PgSQL Execute ($connection_id;$truncate_sql)	PgSQL_CloseConnection ($connection_id)End ifALL RECORDS(^table_name_in_4D_with_brackets^)C_LONGINT($total_records_count)$total_records_count:=Selection_Filter (->^table_name_in_4D_with_brackets^)If ($total_records_count>0)	CREATE SET(^table_name_in_4D_with_brackets^;"^method_name^")	C_LONGINT($connection_id)	$connection_id:=PgSQL_ConnectToFavorite ($database_name;PgSQL Schema Ascendco;PgSQL User iceberg)	If ($connection_id#0)		C_BOOLEAN($was_in_read_only)		$was_in_read_only:=Table_FlipToReadWriteIfReadOnly (->^table_name_in_4D_with_brackets^)		C_TEXT($icon_path)		C_LONGINT($progress_id)		C_BOOLEAN($enable_close)		$icon_path:=Resources_GetImageFilePath ("Icons/Postgres_32.png")		$enable_close:=True		$progress_id:=Progress_Open ("Exporting ^table_name_in_4D_with_brackets^ records to Postgres";$icon_path;$enable_close)		Progress_Update ($progress_id;"";0.01)		  //-------------------------------------------------------------------		  // Sort out indexes		  // ------------------------------------------------------------------		C_BOOLEAN($drop_and_rebuild_indexes)		C_TEXT($drop_indexes_sql)		C_TEXT($create_indexes_sql)		C_LONGINT($indexes_in_statement_count)		$drop_and_rebuild_indexes:=True		$indexes_in_statement_count:=PgSQLBuild_DropCreateIndexesSQL ($connection_id;$table_name_in_postgres;->$drop_indexes_sql;->$create_indexes_sql)		$drop_and_rebuild_indexes:=$indexes_in_statement_count>0		If ($drop_and_rebuild_indexes)			C_LONGINT($drop_index_connection_id)			C_LONGINT($always_zero_for_some_reason)			$drop_index_connection_id:=PgSQL_ConnectToFavorite ($database_name;PgSQL Schema Ascendco;PgSQL User change_structure)			$always_zero_for_some_reason:=PgSQL Execute ($drop_index_connection_id;$drop_indexes_sql)			PgSQL_CloseConnection ($drop_index_connection_id)		End if		C_OBJECT($insert_object)		C_LONGINT($statement_id)		C_BOOLEAN($returns_a_rowset)		$returns_a_rowset:=False		$insert_object:=PgSQL_MakeQueryObject ($connection_id;"";PgSQL Query Text Is SQL Text;PgSQL Query Run Later;$returns_a_rowset)		  //-------------------------------------------------------------------		  // Setup open/close of INSERT (values built later)		  // ------------------------------------------------------------------		If (True)			C_TEXT($cr)			C_TEXT($sq)			$cr:=Char(Carriage return)			$sq:=Char(Quote)			C_TEXT($insert_statement_text)			$insert_statement_text:=""			$insert_statement_text:=$insert_statement_text+"INSERT INTO numbers.^table_name_in_postgres^ ("			^insert_field_list^			$insert_statement_text:=$insert_statement_text+"VALUES "			If (False)				SET TEXT TO PASTEBOARD($insert_statement_text)			End if			C_TEXT($values_statement_text)			$values_statement_text:=""  // Build in a loop later - I'm just putting this line here to make it clearer how the statement pieces fit together.		End if		  //-------------------------------------------------------------------		  // Break up task into transactions, and transactions into INSERTs		  // ------------------------------------------------------------------		C_LONGINT($rows_per_transaction_max)		C_LONGINT($transactions_count)		ARRAY LONGINT($transaction_from_indexes_al;0)		ARRAY LONGINT($transaction_to_indexes_al;0)		ARRAY LONGINT($transaction_row_counts_al;0)		$rows_per_transaction_max:=$rows_per_insert_max*$inserts_per_transaction_max		$transactions_count:=utl_Math_CalculateChunks (1;$total_records_count;$rows_per_transaction_max;->$transaction_from_indexes_al;->$transaction_to_indexes_al;->$transaction_row_counts_al)		C_LONGINT($rows_already_inserted_count)		$rows_already_inserted_count:=0		C_LONGINT($transaction_index)		For ($transaction_index;1;$transactions_count)			PgSQL Execute ($connection_id;"BEGIN;")  // Stack up a whole bunch of multi-value INSERTs in a single transaction & submit.c_			C_LONGINT($rows_in_this_transaction_count)			C_LONGINT($start_at)			C_LONGINT($end_at)			$rows_in_this_transaction_count:=$transaction_row_counts_al{$transaction_index}			$start_at:=$rows_already_inserted_count+1			$end_at:=$start_at+$rows_in_this_transaction_count-1			  // Break down insert performed inside of this transaction.			C_LONGINT($inserts_count)			ARRAY LONGINT($insert_from_indexes_al;0)			ARRAY LONGINT($insert_to_indexes_al;0)			ARRAY LONGINT($insert_row_counts_al;0)			$inserts_count:=utl_Math_CalculateChunks ($start_at;$end_at;$rows_per_insert_max;->$insert_from_indexes_al;->$insert_to_indexes_al;->$insert_row_counts_al)			  // Do the inserts.			C_LONGINT($insert_index)			For ($insert_index;1;$inserts_count)				C_LONGINT($from_record_index)				C_LONGINT($to_record_index)				C_LONGINT($rows_to_insert_count)				$from_record_index:=$insert_from_indexes_al{$insert_index}				$to_record_index:=$insert_to_indexes_al{$insert_index}				$rows_to_insert_count:=$insert_row_counts_al{$insert_index}				C_REAL($progress_r)				$progress_r:=0.01				If ($rows_already_inserted_count>0)					$progress_r:=$progress_r+($rows_already_inserted_count/$total_records_count)				End if				Progress_Update ($progress_id;"Pushing records "+Text_LongintToString ($from_record_index)+" to "+Text_LongintToString ($to_record_index);$progress_r)				USE SET("^method_name^")				^array_declarations^				SELECTION RANGE TO ARRAY($from_record_index;$to_record_index;\				^selection_range_to_array_clauses^				C_LONGINT($record_index)				C_LONGINT($records_count)				C_TEXT($values_statement_text)				$values_statement_text:=""				$records_count:=Size of array(^first_array_name^)				For ($record_index;1;$records_count)					$values_statement_text:=$values_statement_text+"("					^values_statement^					If ($record_index<$records_count)						$values_statement_text:=$values_statement_text+"),"+$cr					Else						$values_statement_text:=$values_statement_text+")"+$cr  // No trailing comma					End if				End for   // Loop through arrays building up multi-value INSERT				If (False)					SET TEXT TO PASTEBOARD($insert_statement_text+$values_statement_text)				End if				C_BOOLEAN($error_received)				OB SET($insert_object;PgSQL Query Statement SQL;$insert_statement_text+$values_statement_text)				$error_received:=PgSQL_RunQueryObject ($insert_object)				If ($error_received & $log_errors_to_disk)					// SEND PACKET($error_log_docref;include an identifier here.+Char(Tab)+"rcl"+Char(Tab)+utl_ob_GetText ($insert_object;"error_message"))				End if				OB SET($insert_object;PgSQL Query Statement SQL;"")				$rows_already_inserted_count:=$rows_already_inserted_count+$rows_to_insert_count			End for   // Loop through INSERTS building up one transaction.			C_LONGINT($affected_rows)  // Here is where we could spot trouble by checking the count. If it worked...it always returns 0.			$affected_rows:=PgSQL Execute ($connection_id;"COMMIT;")		End for   // Loop through transactions.		CLEAR SET("^method_name^")		  //--------------------------------------------------		  // Rebuild dropped indexes, if any		  //--------------------------------------------------		If ($drop_and_rebuild_indexes)			C_LONGINT($build_index_connection_id)			C_LONGINT($always_zero_for_some_reason)			$build_index_connection_id:=PgSQL_ConnectToFavorite ($database_name;PgSQL Schema Ascendco;PgSQL User change_structure)			$always_zero_for_some_reason:=PgSQL Execute ($build_index_connection_id;$create_indexes_sql)			PgSQL_CloseConnection ($build_index_connection_id)		End if		PgSQL_CloseConnection ($connection_id)		PgSQL_AnalyzeTable ($database_name;"^table_name_in_postgres^")  // Tell Postgres to run frequency table sampling routine. This call requires login by admin or table owner.		  //--------------------------------------------------		  // Cleanup		  //--------------------------------------------------		UNLOAD RECORD(^table_name_in_4D_with_brackets^)		Progress_Close ($progress_id)		Table_FlipToReadOnlyIfRequested (->^table_name_in_4D_with_brackets^;$was_in_read_only)	End ifEnd if^run_after_insert_method_call^Code_End (Current method name)
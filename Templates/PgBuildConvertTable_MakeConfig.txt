If (False)  // ===========================================	^setup_method_name^	  // DESCRIPTION: Seed/reseed table.	  // The goal here is to add a record, if none exists,	  // and to refresh a record, if one does exist.	  // That's what the "force enable" is about. In case t here's	  // a record in place, and it's set as disabled, you can leave	  // the current enable/disable setting alone (no $1), or force	  // the enabled state to True. Don't have a forced disabled option.	  // But, you can always add one.	  // Add these declarations to	  Compiler_PgIOPush_and_SetupC_COLLECTION(^setup_method_name^;$0)  // Should have 0 elements, anything else indicates an error.C_BOOLEAN(^setup_method_name^;$1)// Add the following  call to PgConfig_SeedEverything$validation_c:=$validation_c.combine(^setup_method_name^ ) // ^code_generator_method_name^ : ^created_date^// Add a call to this method to the current startup data patch routine, likelyStartup_UpdateDataFile_^ib_version_number^If (PgConfigSetup_ShouldRunHere )	^setup_method_name^End if	  // CREATED BY: ^code_generator_method_name^	  // DATE: ^created_date^	  // LAST MODIFIED:End if   // ============================================Code_Start (Current method name)C_COLLECTION($0;$validation_c)  // Should have 0 elements, anything else indicates an error.C_BOOLEAN($1;$force_enable)$force_enable:=FalseIf (Count parameters>=1)	$force_enable:=$1End if$validation_c:=New collectionC_TEXT($target_path)C_TEXT($target_id)C_BOOLEAN($loaded_b)$target_path:="^target_schema^.^target_name^"$target_id:=PgConfigTarget_GetIDByUnique ($target_path)If ($target_id#"")	$loaded_b:=PgConfigTarget_LoadByUnique ($target_path)	If (Not($loaded_b))		Code_Err ("";"Could not lock [PgConfigTarget] record for "+$target_path+".")	End ifEnd ifIf (Code_NotErr )	If ($target_id="")  // No record found		$target_id:=PgConfigTarget_New ("^target_schema^";"^target_name^")	End if	  // Override defaults...some assignments may be for emphasis or clarity.	[PgConfigTarget]SetupMethodName:=Current method name	[PgConfigTarget]R2MethodName:="^r2_method_name^"	[PgConfigTarget]PushMethodName:="^push_method_name^"	[PgConfigTarget]FileWriterMethodName:="^file_writer_method_name^"	[PgConfigTarget]SpecialTestMethodName:="^special_test_method_name^"	[PgConfigTarget]IBSourceTableNumber:=^ib_table_number^	[PgConfigTarget]IBSourceTableName:="^ib_table_name^"	[PgConfigTarget]LastPushedTrackingTableNumber:=[PgConfigTarget]IBSourceTableNumber// Override, if needed.	[PgConfigTarget]LastPushedTrackingType:="^last_pushed_tracking_type_name^" // None, ConID, Date, or DTS	^last_pushed_tracking_default^	[PgConfigTarget]LastPushedFilterIDOn:="^last_pushed_filter_id_on^" // None, FacilityID or HsysID.	[PgConfigTarget]LastPushedSyncWaitSeconds:=^sync_wait_seconds^	[PgConfigTarget]CopyTypeName:="^copy_type_name^"	[PgConfigTarget]AutoDeleteRecords:=^auto_delete_records^	[PgConfigTarget]IsAFileBasedPush:=^is_a_file_based_push^	[PgConfigTarget]IsPartitioned:=^is_partitioned^	[PgConfigTarget]HistoricalPartitionName:="^historical_partition_name^"	[PgConfigTarget]DefaultPartitionName:="^default_partition_name^"	[PgConfigTarget]HideInEditors:=^hide_in_editors^  // True is useful for targets that are still being developed.	[PgConfigTarget]Comments:="^comments^"	[PgConfigTarget]DomoDataSetName:="^domo_dataset_name^"  // Advisory, may not be accurate.	[PgConfigTarget]StartPushAtDefault:=?^start_push_at_time^?	[PgConfigTarget]RepeatFrequency:=^repeat_frequency^	[PgConfigTarget]RepeatIntervalName:="^repeat_interval_name^"	[PgConfigTarget]OnFailRetryAfterMinutes:=^on_fail_retry_after_minutes^// <-- Increments whenever there's a failure, reset to 0 when a push works. Manual reset on Configuration Editor.	[PgConfigTarget]OnFailRetryAttempts:=^on_fail_retry_attempts^	[PgConfigTarget]OnFailSendCodeRedOnDisable:=^on_fail_send_code_red_on_disable^	If ($force_enable)		[PgConfigTarget]PushIsEnabled:=True	End if	SAVE RECORD([PgConfigTarget])	UNLOAD RECORD([PgConfigTarget])	  //------------------------------------------------------------------------	  // Mark start time to help identify unchanged (stale) records	  //------------------------------------------------------------------------	C_TEXT($start_dts)	$start_dts:=utl_DT_Get (Current date(*);Current time(*))	  //------------------------------------------------------------------------	  // Seed last pushed records	  //------------------------------------------------------------------------	PgConfigLastPushed_SeedTarget ($target_id)	  //------------------------------------------------------------------------	  // Define columns: Columns are tied to a specific version	  //------------------------------------------------------------------------	C_TEXT($version_id)	If (True)  // Version ^version_number^		$version_id:=PgConfigVersion_GetIDByTargetID ($target_id;^version_number^)		If (utl_UUID_isEmpty ($version_id))			$version_id:=PgConfigVersion_New ($target_id;^version_number^)		End if		C_POINTER($nil)		$nil:=Pointer_GetNil	PgConfigVersion_ResetPositions ($version_id)// OrdinalPosition is assigned based on the order that you declare fields below:^field_definitions^    End If	  //------------------------------------------------------------------------	  // Set the active version	  //------------------------------------------------------------------------	PgConfigTarget_SetCurrentVersID ($target_id;$version_id)	C_TEXT($version_id)	If (True)  // Version ^version_number^        C_LONGINT($version_number)        $version_number:=^version_number^		$version_id:=PgConfigVersion_GetIDByTargetID ($target_id;$version_number)		If (utl_UUID_isEmpty ($version_id))			$version_id:=PgConfigVersion_New ($target_id;$version_number)		End if	End if	  //------------------------------------------------------------------------	  // Define who *may* push	  //------------------------------------------------------------------------	  // Note: You can't change who may push in 4D alone, the permissions must be updated in Postgres.	  // If you need to push as an unsupported user, let David know.^user_permissions^	  //------------------------------------------------------------------------	  // Cleanup any stale values	  //------------------------------------------------------------------------	PgConfig_Cleanup ($target_id;$version_id;$start_dts)	  //------------------------------------------------------------------------	  // Validate table and columns	  //------------------------------------------------------------------------	C_COLLECTION($validation_c)	$validation_c:=PgConfigTarget_Validate ($target_path;"";True)End if$0:=$validation_cCode_End (Current method name)
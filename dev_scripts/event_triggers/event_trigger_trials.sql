----------------------------------------------- Add an event trigger to run on DROP---------------------------------------------DROP FUNCTION IF EXISTS test_event_trigger_for_drops CASCADE;CREATE FUNCTION test_event_trigger_for_drops()        RETURNS event_trigger LANGUAGE plpgsql AS $$DECLARE    obj record;BEGIN    FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()    LOOP        RAISE NOTICE '% dropped object: Tag: % Type: % Schema: % Identity: %',                     tg_tag,                     obj.object_type,                     obj.schema_name,                     obj.object_name,                     obj.object_identity;    END LOOP;END$$;CREATE EVENT TRIGGER test_event_trigger_for_drops   ON sql_drop   EXECUTE FUNCTION test_event_trigger_for_drops();----------------------------------------------- View installed event triggers---------------------------------------------select * from pg_event_trigger----------------------------------------------- Create and DROP a function---------------------------------------------CREATE OR REPLACE FUNCTION tools.foo(id uuid)	RETURNS pg_catalog.textAS $BODY$BEGIN RETURN UPPER(REPLACE(TEXT(id),'-', ''));END$BODY$  LANGUAGE plpgsql VOLATILE  COST 100;ALTER FUNCTION tools.foo (uuid)	OWNER TO user_bender;drop function tools.foo;----------------------------------------------- See the notice:---------------------------------------------NOTICE:  DROP FUNCTION dropped object: Tag: function Type: tools Schema: <NULL> Identity: tools.foo(pg_catalog.uuid)
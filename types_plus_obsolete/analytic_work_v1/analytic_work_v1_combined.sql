-- Create a view onto analytic_work formatted as analytic_work_v1.-- If analytic_work changes, you can update the view to handle the modification smoothly.-- Note: This view is automatically a custom type, with an array type to match. See types_plus.insert_analytic_work_v1.DROP VIEW IF EXISTS types_plus.analytic_work_v1 CASCADE;-- Careful!CREATE OR REPLACE VIEW types_plus.analytic_work_v1 AS select id,        hsys_id,        facility_id,        inv_id,        user_id,        activity_id,        assembly_id,        q_event_id,        scan_id,        scase_id,        scase_inv_id,        sterilizer_load_id,        sterilizer_loadinv_id,        start_dts,        end_dts,        start_local_dts,        end_local_dts,        duration,        missing_inst,        num_inst,        num_items,        points,        num_packs,        num_trays,        activity,        description,        marked_for_deletion   from analytic_work;ALTER TABLE types_plus.analytic_work_v1    OWNER TO user_change_structure;-- Create a casting function to convert analytic_work rows into the compound type format analytic_work_v1.-- If analytic_work changes, you can update the casting to handle the modification smoothly.CREATE OR REPLACE FUNCTION types_plus.analytic_work_to_v1 (analytic_work_in analytic_work)  RETURNS analytic_work_v1AS $BODY$        SELECT			analytic_work_in.id,			analytic_work_in.hsys_id,			analytic_work_in.facility_id,			analytic_work_in.inv_id,			analytic_work_in.user_id,			analytic_work_in.activity_id,			analytic_work_in.assembly_id,			analytic_work_in.q_event_id,			analytic_work_in.scan_id,			analytic_work_in.scase_id,			analytic_work_in.scase_inv_id,			analytic_work_in.sterilizer_load_id,			analytic_work_in.sterilizer_loadinv_id,			analytic_work_in.start_dts,			analytic_work_in.end_dts,			analytic_work_in.start_local_dts,			analytic_work_in.end_local_dts,			analytic_work_in.duration,			analytic_work_in.missing_inst,			analytic_work_in.num_inst,			analytic_work_in.num_items,			analytic_work_in.points,			analytic_work_in.num_packs,			analytic_work_in.num_trays,			analytic_work_in.activity,			analytic_work_in.description,			analytic_work_in.marked_for_deletion$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.analytic_work_to_v1 (analytic_work_in analytic_work)	OWNER TO user_bender;-- Create/recreate the CAST. Use this to convert analytic_work rows into the analytic_work_v1 compound type format using the following syntax:-- select analytic_work::analytic_work_v1 from analytic_workDROP CAST IF EXISTS (analytic_work as analytic_work_v1);CREATE CAST (analytic_work as analytic_work_v1) WITH FUNCTION types_plus.analytic_work_to_v1(analytic_work);-- Create a function to accept an array of rows formatted as analytic_work_v1 for UPSERT into analytic_work.DROP FUNCTION IF EXISTS types_plus.insert_analytic_work_v1 (types_plus.analytic_work_v1[]);CREATE OR REPLACE FUNCTION types_plus.insert_analytic_work_v1 (data_in types_plus.analytic_work_v1[])  RETURNS intAS $BODY$-- The CTE below is a roundabout way of returning an insertion count from a pure SQL function in Postgres.with inserted_rows as (        INSERT INTO analytic_work (			id,			hsys_id,			facility_id,			inv_id,			user_id,			activity_id,			assembly_id,			q_event_id,			scan_id,			scase_id,			scase_inv_id,			sterilizer_load_id,			sterilizer_loadinv_id,			start_dts,			end_dts,			start_local_dts,			end_local_dts,			duration,			missing_inst,			num_inst,			num_items,			points,			num_packs,			num_trays,			activity,			description,			marked_for_deletion)        SELECT			rows_in.id,			rows_in.hsys_id,			rows_in.facility_id,			rows_in.inv_id,			rows_in.user_id,			rows_in.activity_id,			rows_in.assembly_id,			rows_in.q_event_id,			rows_in.scan_id,			rows_in.scase_id,			rows_in.scase_inv_id,			rows_in.sterilizer_load_id,			rows_in.sterilizer_loadinv_id,			rows_in.start_dts,			rows_in.end_dts,			rows_in.start_local_dts,			rows_in.end_local_dts,			rows_in.duration,			rows_in.missing_inst,			rows_in.num_inst,			rows_in.num_items,			rows_in.points,			rows_in.num_packs,			rows_in.num_trays,			rows_in.activity,			rows_in.description,			rows_in.marked_for_deletion        FROM unnest(data_in) as rows_in        ON CONFLICT ON CONSTRAINT analytic_work_pk DO UPDATE SET			hsys_id = EXCLUDED.hsys_id,			facility_id = EXCLUDED.facility_id,			inv_id = EXCLUDED.inv_id,			user_id = EXCLUDED.user_id,			activity_id = EXCLUDED.activity_id,			assembly_id = EXCLUDED.assembly_id,			q_event_id = EXCLUDED.q_event_id,			scan_id = EXCLUDED.scan_id,			scase_id = EXCLUDED.scase_id,			scase_inv_id = EXCLUDED.scase_inv_id,			sterilizer_load_id = EXCLUDED.sterilizer_load_id,			sterilizer_loadinv_id = EXCLUDED.sterilizer_loadinv_id,			start_dts = EXCLUDED.start_dts,			end_dts = EXCLUDED.end_dts,			start_local_dts = EXCLUDED.start_local_dts,			end_local_dts = EXCLUDED.end_local_dts,			duration = EXCLUDED.duration,			missing_inst = EXCLUDED.missing_inst,			num_inst = EXCLUDED.num_inst,			num_items = EXCLUDED.num_items,			points = EXCLUDED.points,			num_packs = EXCLUDED.num_packs,			num_trays = EXCLUDED.num_trays,			activity = EXCLUDED.activity,			description = EXCLUDED.description,			marked_for_deletion = EXCLUDED.marked_for_deletion        returning 1 as row_counter)    select sum(row_counter)::integer from inserted_rows;$BODY$LANGUAGE sql;ALTER FUNCTION types_plus.insert_analytic_work_v1(types_plus.analytic_work_v1[])	OWNER TO user_bender;
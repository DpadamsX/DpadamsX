CREATE OR REPLACE FUNCTION api.test_function(_statement text) RETURNS textAS $BODY$DECLARE	_returned_sqlstate    text;	_column_name          text;	_constraint_name      text;	_pg_datatype_name     text;	_message_text         text;	_table_name           text;	_schema_name          text;	_pg_exception_detail  text;	_pg_exception_hint    text;	_pg_exception_context text;  BEGIN   EXECUTE format(_statement); 	RETURN 'Result: '    || chr(9) || 'Success' || chr(13) ||	       'Statement: ' || chr(9) || _statement;	EXCEPTION WHEN OTHERS THEN -- You get an empty string for fields (selectors) that aren't populated.  GET STACKED DIAGNOSTICS 	_returned_sqlstate    = RETURNED_SQLSTATE,	_column_name          = COLUMN_NAME,	_constraint_name      = CONSTRAINT_NAME,	_pg_datatype_name     = PG_DATATYPE_NAME,	_message_text         = MESSAGE_TEXT,	_table_name           = TABLE_NAME,	_schema_name          = SCHEMA_NAME,	_pg_exception_detail  = PG_EXCEPTION_DETAIL,	_pg_exception_hint    = PG_EXCEPTION_HINT,	_pg_exception_context = PG_EXCEPTION_CONTEXT;-- Returning Tab-CR, could do a big text block, or a JSON instead.chRETURN 	'Result: '	             || chr(9) || 'Failure'              || chr(13) ||	'RETURNED_SQLSTATE = '    || chr(9) ||  _returned_sqlstate    || chr(13) ||	'COLUMN_NAME = '          || chr(9) ||  _column_name          || chr(13) ||	'CONSTRAINT_NAME = '      || chr(9) ||  _constraint_name      || chr(13) ||	'PG_DATATYPE_NAME = '     || chr(9) ||  _pg_datatype_name     || chr(13) || 	'MESSAGE_TEXT = '         || chr(9) ||  _message_text         || chr(13) ||	'TABLE_NAME = '           || chr(9) ||  _table_name           || chr(13) ||	'SCHEMA_NAME = '          || chr(9) ||  _schema_name          || chr(13) ||	'PG_EXCEPTION_DETAIL = '  || chr(9) ||  _pg_exception_detail  || chr(13) ||	'PG_EXCEPTION_HINT = '    || chr(9) ||  _pg_exception_hint    || chr(13) ||	'PG_EXCEPTION_CONTEXT = ' || chr(9) ||  _pg_exception_context || chr(13) ||	'Statement: '             || chr(9) ||  _statement;	END;$BODY$ LANGUAGE plpgsql;
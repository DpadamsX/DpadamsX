/* Table_in is a 'regclass'. It's a way of avoiding SQL injection problems,not that there is a chance of that here. (No dynamic SQL.) The really nicepart is that you can pass in table_name or schema_name.table_name this wayand either work magically.*/CREATE OR REPLACE FUNCTION dba.column_tetris (table_in regclass)	RETURNS table (	  column_name           text,	  type_name             text,	  type_align            text,	  alignment_description text,	  type_length           int2,	  suggestioned_position int8,	  current_position      int2	)AS $BODY$   SELECT a.attname::text  AS column_name,          t.typname::text  AS type_name,          t.typalign::text AS type_align,          CASE             WHEN typalign = 'c' THEN 'char alignment, no alignment needed'             WHEN typalign = 's' THEN 'short alignment, 2 bytes on most machines'             WHEN typalign = 'i' THEN 'int alignment, 4 bytes on most machines'             WHEN typalign = 'd' THEN 'double alignment, 8 bytes on many machines, but by no means all'             ELSE 'Unexpected typalign ' || typalign			END AS alignment_description,          t.typlen   AS type_length,          ROW_NUMBER () OVER (ORDER BY t.typlen DESC,a.attname) as suggested_position,          a.attnum   AS currrent_position     FROM pg_class c     JOIN pg_attribute a ON (a.attrelid = c.oid)     JOIN pg_type t ON (t.oid = a.atttypid)    WHERE c.relname = table_in::name AND          a.attnum >= 0 ORDER BY t.typlen DESC,a.attname;$BODY$	LANGUAGE sql;COMMENT ON FUNCTION dba.column_tetris (regclass) IS '/*Adapted from this excellent blog post:https://blog.2ndquadrant.com/on-rocks-and-sand/*/';ALTER FUNCTION dba.column_tetris (regclass)	OWNER TO user_bender;
CREATE OR REPLACE FUNCTION dba.ddl_get_object_source(object_type text, object_id oid)	RETURNS textAS $BODY$DECLAREobject_source text;BEGIN/*Most of the system information routines allow an optional second parameter: pg_get_thingydef(oid,pretty_bool)See here:https://www.postgresql.org/docs/current/functions-info.htmlThe docs don't explain pretty_bool. I tried it, and found that sometimes the pretty version uses *unqualified* names.I prefer qualified names. Mr Google found me this bit of info:Most of these functions come in two variants. When the function has the parameter pretty_bool and the value is true, it can optionally "pretty-print" the result. The pretty-printed format is more readable. The other one is default format which is more likely to be interpreted the same way by future versions of PostgreSQL. Avoid using pretty-printed output for dump purposes. Passing false for the pretty-print parameter yields the same result as the variant that does not have the parameter at all.https://support.huaweicloud.com/en-us/devg-dws/dws_04_0217.html*/CASE	 WHEN object_type = 'function' THEN	 	  RETURN (select coalesce(pg_get_functiondef(object_id)), '');	 WHEN object_type = 'view' THEN	 	  RETURN (select coalesce(pg_get_viewdef(object_id)), '');	 WHEN object_type = 'table' THEN	 	  RETURN (select * from dba.ddl_generate_create_table_code(object_id::regclass::text));	 WHEN object_type = 'index' THEN		  RETURN (select coalesce(pg_get_indexdef(object_id)), '');	 WHEN object_type = 'trigger' THEN	 	  RETURN (select coalesce(pg_get_triggerdef(object_id)), '');	 WHEN object_type = 'cast' THEN  -- Review https://www.postgresql.org/docs/11/catalog-pg-cast.html	 	  RETURN (select ''); -- CREATE CAST needed.	 WHEN object_type = 'type' THEN -- Woah. https://www.postgresql.org/docs/11/catalog-pg-type.html	 	  RETURN (select ''); -- CREATE TYPE needed.	 WHEN object_type = 'sequence' THEN -- No code to speak of. Attributes visible through pg_sequence.	 	  RETURN (select '');	 WHEN object_type = 'table constraint' THEN	 	  RETURN (select coalesce(pg_get_constraintdef(object_id)), '');	 WHEN object_type = 'rule' THEN -- pg_rule doesn't use OID...and the details are meaningless to me	 	  RETURN (select coalesce(pg_get_ruledef(object_id)), '');	 WHEN object_type = 'toast table' THEN	 	  RETURN (select '');	 WHEN object_type = 'text search dictionary' THEN	 	  RETURN (select ''); -- This would be nice.	 WHEN object_type = 'default value' THEN -- No clue.	 	  RETURN (select '');	 WHEN object_type = 'text search configuration' THEN -- No clue	 	  RETURN (select ''); -- This would be nice.	ELSE	 	  RETURN (select 'Need source for ' || object_type);	   END CASE;   RETURN object_source;END;$BODY$LANGUAGE plpgsql;ALTER FUNCTION dba.ddl_get_object_source(text, oid)	OWNER TO user_bender;
/*Want something like Python's num2words, hacking it in.https://pypi.org/project/num2words/The code here uses the cash_words function from the deprecated money data type.No mention of it for years in the docs, but it still works in PG 12.    select cash_words('24,120.10')returns    Twenty four thousand one hundred twenty dollars and ten centsPython gives you   twenty-four thousand, one hundred and twenty point oneThis routine gives you    twenty four thousand one hundred and twenty point tenSo, not *identical* to the Python, but close. The bad part are the trailing decimals.Right now, just using this the fuzzy match cleanups, so the differences may not matter.If we ever mix data from Python and Postgres operations then, yeah, not ideal.*/CREATE OR REPLACE FUNCTION tools.num2words(number_as_text_in text)	RETURNS textAS $BODY$DECLARE  words_out text;  number_as_money money; -- cash_words(money)...the deprecated type.BEGIN   number_as_money = number_as_text_in::money;   words_out = cash_words(number_as_money); -- cash_words(money), not cash_words(some kind of numeric or text)-- select cash_words('24,120.10'); -- Twenty four thousand one hundred twenty dollars and ten cents   words_out = replace(words_out, ' dollars','');   words_out = replace(words_out, ' dollar','');   words_out = replace(words_out, ' cents','');   words_out = replace(words_out, ' cent','');   words_out = replace(words_out, ' and ',' point ');   RETURN words_out;END$BODY$  LANGUAGE plpgsql;ALTER FUNCTION tools.num2words (text)	OWNER TO user_bender;
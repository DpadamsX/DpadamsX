WITHnear_neighbors AS (  select distinct on (text <-> 'Pack Cardio Analyzer Cable') text AS neighbor_text,         'Pack Cardio Analyzer Cable'                             AS base_text,         source_id                                                AS neighbor_id    from text_collection_item   where collection_id = 'd16f51e4-29d0-42da-8b5c-4126bf53fe8d'  limit 10),measures AS (  select *,         DENSE_RANK() OVER(ORDER BY qgram(base_text, neighbor_text) DESC) AS neighbor_rank,         (base_text = neighbor_text)::int4                                AS equality_check,         monge_elkan(base_text, neighbor_text, 'winkler')                 AS monge_elkan_score,         sqrt(monge_elkan(base_text, neighbor_text, 'winkler'))           AS monge_elkan_quadratic_score,         jaro (base_text, neighbor_text)                                  AS jaro_score,         jarowinkler (base_text, neighbor_text)                           AS jaro_winkler_score,         qgram(base_text, neighbor_text)                                  AS qgram_score,         similarity(base_text, neighbor_text)                             AS trigram_score  from near_neighbors), handicap AS (    SELECT base_text,           neighbor_text,           neighbor_id,           neighbor_rank,           equality_check,           CASE             WHEN monge_elkan_score = 1 AND equality_check = 0 THEN 0.95             ELSE monge_elkan_score           END AS monge_elkan_score,           CASE             WHEN monge_elkan_quadratic_score = 1 AND equality_check = 0 THEN 0.95             ELSE monge_elkan_quadratic_score           END AS monge_elkan_quadratic_score,           jaro_score,           jaro_winkler_score,           qgram_score,           trigram_score      FROM measures ),stats AS (  select *,        (handicap.monge_elkan_score +         handicap.monge_elkan_quadratic_score +         jaro_score +         jaro_winkler_score +         qgram_score +         trigram_score) / 6 AS avg_score    from handicap), calculations AS (  select *,         sqrt(avg_score) AS avg_quadratic_score,         greatest (           monge_elkan_score,           monge_elkan_quadratic_score,           avg_score,           sqrt(avg_score),           jaro_score,           jaro_winkler_score,           qgram_score,           trigram_score) AS highest_score from stats)-- Final query, pull it all together and selsort  select base_text,         neighbor_text,         neighbor_id,         neighbor_rank,         highest_score,         CASE highest_score            WHEN equality_check              THEN 'equality'            WHEN monge_elkan_quadratic_score THEN 'monge_elkan_quadratic'            WHEN monge_elkan_score           THEN 'monge_elkan'            WHEN jaro_score                  THEN 'jaro'            WHEN jaro_winkler_score          THEN 'jaro_winkler'            WHEN qgram_score                 THEN 'qgram'            WHEN trigram_score               THEN 'trigram'            WHEN avg_score                   THEN 'avg'            WHEN avg_quadratic_score         THEN 'avg_quadratic'            ELSE 'Undefined'         END AS best_method,         avg_score,         avg_quadratic_score,         equality_check,         jaro_score,         jaro_winkler_score,         monge_elkan_score,         monge_elkan_quadratic_score         qgram_score,         trigram_score    from calculationsorder by highest_score DESC,         equality_check DESC,         monge_elkan_quadratic_score DESC,         monge_elkan_score DESC,         jaro_score DESC,         jaro_winkler_score DESC,         qgram_score DESC,         trigram_score  DESC
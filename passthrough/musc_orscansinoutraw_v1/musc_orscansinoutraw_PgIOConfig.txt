If (False)PgConfigSetup_DP_ORScansInOutRa   // DESCRIPTION: Seed/reseed sonar_backlog passthrough.  // The naming convention is  // PgConfigSetup_DP_DataSetName, like  // PgConfigSetup_DP_SonarBacklog  // The goal here is to add a record, if none exists,  // and to refresh a record, if one does exist.  // That's what the "force enable" is about. In case there's  // a record in place, and it's set as disabled, you can leave  // the current enable/disable setting alone (no $1), or force  // the enabled state to True. Don't have a forced disabled option.  // But, you can alwys add one.  //  // Add the following line to the Domo Passthrough ('DP') section of PgConfig_SeedEverything$validation_c:=$validation_c.combine(PgConfigSetup_DP_ORScansInOutRa (True)) // Modified by: PgBuild_DomoPassBuildCode on Aug 8, 2020  // Add these declarations to Compiler_PgConfigC_COLLECTION(PgConfigSetup_DP_ORScansInOutRa ;$0) // Modified by: PgBuild_DomoPassBuildCode on Aug 8, 2020C_BOOLEAN(PgConfigSetup_DP_ORScansInOutRa ;$1) // Modified by: PgBuild_DomoPassBuildCode on Aug 8, 2020  // CREATED BY: PgBuild_DomoPassBuildCode.  // DATE: Aug 8, 2020  // LAST MODIFIED:End if   // ============================================Code_Start (Current method name)C_COLLECTION($0;$validation_c)  // Should have 0 elements, anything else indicates an error.C_BOOLEAN($1;$force_enable)$force_enable:=FalseIf (Count parameters>=1)$force_enable:=$1End if $validation_c:=New collectionC_TEXT($target_path)C_TEXT($target_id)C_BOOLEAN($loaded_b)$target_path:="ascendco.domo_passthrough.passthrough.musc_orscansinoutraw"$target_id:=PgConfigTarget_GetIDByUnique ($target_path)If ($target_id#"")$loaded_b:=PgConfigTarget_LoadByUnique ($target_path)If (Not($loaded_b))Code_Err ("";"Could not lock [PgIOTarget] record for "+$target_path+".")End if End if If (Code_NotErr )If ($target_id="")  // No record found.$target_id:=PgConfigTarget_New ("ascendco";"domo_passthrough";"passthrough";"musc_orscansinoutraw")End if   // Override defaults...some assignments may be for emphasis.[PgIOTarget]PushMethodName:="pgIO_PushDP_MUSC_OrScansInOutRa"[PgIOTarget]LastPushedTrackingType:="ConID"[PgIOTarget]LastPushedFilterIDOn:="None"[PgIOTarget]CollectionBuildingMethodName:="etl_MUSC_InOutORDetailAllScans"[PgIOTarget]DomoDataSetName:="MUSC_OrScansInOutRaw_PG"[PgIOTarget]CopyTypeName:=pgIOMap_Copy_Type_Passthrough[PgIOTarget]DomoDataSetName:="MUSC_OrScansInOutRaw_PG"If ($force_enable)[PgIOTarget]PushIsEnabled:=TrueEnd if SAVE RECORD([PgIOTarget])UNLOAD RECORD([PgIOTarget])  //------------------------------------------------------------------------  // Mark start time to help identify unchanged (stale) records  //------------------------------------------------------------------------C_TEXT($start_dts)$start_dts:=utl_DT_Get   //------------------------------------------------------------------------  // Seed last pushed records  //------------------------------------------------------------------------PgConfigLastPushed_SeedTarget ($target_id)  //------------------------------------------------------------------------  // Define columns: Columns are tied to a specific version  //------------------------------------------------------------------------C_POINTER($nil)$nil:=Pointer_GetNil C_TEXT($version_id)If (True)  $version_id:=PgConfigVersion_GetIDByTargetID ($target_id;1)If (utl_UUID_isEmpty ($version_id))$version_id:=PgConfigVersion_New ($target_id;1)End if PgConfigColumn_Upsert ($version_id;"calculated";$nil;"id";"uuid")PgConfigColumn_Upsert ($version_id;"calculated";$nil;"source_id";"uuid")PgConfigColumn_Upsert ($version_id;"calculated";$nil;"hsys_id";"uuid")PgConfigColumn_Upsert ($version_id;"calculated";$nil;"facility_id";"uuid")PgConfigColumn_Upsert ($version_id;"calculated";$nil;"pg_con_id";"longint")PgConfigColumn_Upsert ($version_id;"calculated";$nil;"view_version";"longint")PgConfigColumn_Upsert ($version_id;"calculated";$nil;"dataset_name";"text")PgConfigColumn_Upsert ($version_id;"calculated";$nil;"data";"object")PgConfigColumn_Upsert ($version_id;"calculated";$nil;"key_supplement";"text")PgConfigColumn_Upsert ($version_id;"calculated";$nil;"from_dts";"dts")PgConfigColumn_Upsert ($version_id;"calculated";$nil;"to_dts";"dts")  //------------------------------------------------------------------------  // Define the embedded columns in the domo_passthrough.data field  //------------------------------------------------------------------------PgConfigColumn_Upsert ($version_id;"embedded";$nil;"category";"";"";"citext";"data";"Category";"Category";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"clinic_dept_name";"";"";"citext";"data";"ClinicDeptName";"ClinicDeptName";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"event_";"";"";"citext";"data";"Event";"Event";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"event_2";"";"";"citext";"data";"Event2";"Event2";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"facility_id";"";"";"uuid";"data";"FacilityID";"FacilityID";True;False)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"facility_name";"";"";"citext";"data";"facilityName";"facilityName";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"hsys_id";"";"";"uuid";"data";"HsysID";"HsysID";True;False)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"hsys_name";"";"";"citext";"data";"HsysName";"HsysName";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"inv_id";"";"";"uuid";"data";"InvID";"InvID";True;False)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"inv_name";"";"";"citext";"data";"InvName";"InvName";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"item_id";"";"";"uuid";"data";"ItemID";"ItemID";True;False)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"item_name";"";"";"citext";"data";"ItemName";"ItemName";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"item_type";"";"";"citext";"data";"ItemType";"ItemType";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"item_type_id";"";"";"uuid";"data";"ItemTypeID";"ItemTypeID";True;False)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"location_desc";"";"";"citext";"data";"locationDesc";"locationDesc";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"num_inst";"";"";"int4";"data";"NumInst";"NumInst";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"scan_date";"";"";"date";"data";"Scan_Date";"Scan_Date";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"scan_day_name";"";"";"citext";"data";"Scan_DayName";"Scan_DayName";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"scan_day_of_week";"";"";"int4";"data";"Scan_DayOfWeek";"Scan_DayOfWeek";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"scan_hour_bin";"";"";"int4";"data";"Scan_HourBin";"Scan_HourBin";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"scan_hour_of_day";"";"";"int4";"data";"Scan_HourOfDay";"Scan_HourOfDay";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"scan_local";"";"";"citext";"data";"Scan_Local";"Scan_Local";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"scan_dts";"";"";"timestamp";"data";"ScanDTS";"ScanDTS";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"scan_id";"";"";"uuid";"data";"scanID";"scanID";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"scanned_at";"";"";"citext";"data";"scannedAt";"scannedAt";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"scanned_by";"";"";"citext";"data";"scannedBy";"scannedBy";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"scanned_desc";"";"";"citext";"data";"scannedDesc";"scannedDesc";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"scanned_dts";"";"";"timestamp";"data";"scannedDTS";"scannedDTS";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"scanned_record_id";"";"";"uuid";"data";"scannedRecordID";"scannedRecordID";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"scanned_type";"";"";"citext";"data";"scannedType";"scannedType";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"speciality_id";"";"";"uuid";"data";"SpecialityID";"SpecialityID";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"specialty";"";"";"citext";"data";"Specialty";"Specialty";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"state_";"";"";"citext";"data";"state";"state";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"substate";"";"";"citext";"data";"substate";"substate";True;True)PgConfigColumn_Upsert ($version_id;"embedded";$nil;"timezone";"";"";"citext";"data";"timezone";"timezone";True;True)End if   //------------------------------------------------------------------------  // Set the active version  //------------------------------------------------------------------------PgConfigTarget_SetCurrentVersID ($target_id;$version_id)  //------------------------------------------------------------------------  // Define who *may* push  //------------------------------------------------------------------------  // Note: You can't change who may push in 4D alone, the permissions must be updated in Postgres.  // If you need to push as an unsupported user, let David know.PgConfigTargetUserLink_Upsert ($target_id;PgSQL_User_Iceberg;True;False)  // User;May push?;May pull?PgConfigTargetUserLink_Upsert ($target_id;PgSQL_User_Iceberg_Remote;True;False)PgConfigTargetUserLink_Upsert ($target_id;PgSQL_User_Leviathan;True;False)PgConfigTargetUserLink_Upsert ($target_id;PgSQL_User_Sonar;True;False)  //------------------------------------------------------------------------  // Cleanup any stale values  //------------------------------------------------------------------------PgConfig_Cleanup ($target_id;$version_id;$start_dts)  //------------------------------------------------------------------------  // Validate table and columns  //------------------------------------------------------------------------C_COLLECTION($validation_c)$validation_c:=PgConfigTarget_Validate ($target_path;"";True)End if $0:=$validation_cCode_End (Current method name)
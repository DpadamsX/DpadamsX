{	"source_object": {		"HsysID": "17EA1ED487B00840912FD29DE2A06F5D",		"FacilityID": "A4ACF595A8D2A34FAD3CE00F3346B2A4",		"Assemble_Date": "2019-10-01T00:00:00.000Z",		"Assemble_DayName": "Tuesday",		"Assemble_DayOfWeek": 3,		"HsysName": "MUSC",		"FacilityName": "MUSC Main",		"UserID": "03B6F89B8086D04FA929F55D9500DBDF",		"UserName": "Norma Delp",		"HoursAssembly": 3.84,		"TraysAssembled": 21,		"InstAssembled": 159,		"TraysPerHour": 5.47,		"InstPerHour": 41.41	},	"dataset_name": "TraysPerHour_PG",	"view_name": "trays_per_hour_pg",	"view_name_with_version": "trays_per_hour_pg_v1",	"view_version": 1,	"version_number_list": "1",	"table_name": "trays_per_hour",	"push_method_name": "TraysPerHourAnalysi",	"push_method_full_name": "pgIO_PushDP_TraysPerHourAnalysi",	"pgconfig_setup_method_name": "TraysPerHourAn",	"pgconfig_setup_method_full_name": "PgConfigSetup_DP_TraysPerHourAn",	"collection_function_name": "SonarData_TraysPerHourAnalysis",	"postgres_view": "-- This view is selected in the 'trays_per_hour_pg' master UNION view, and is not pulled by Domo directly.\r\r-- View: passthrough.trays_per_hour_pg_v1\rDROP VIEW IF EXISTS passthrough.trays_per_hour_pg_v1;\r\rCREATE OR REPLACE VIEW passthrough.trays_per_hour_pg_v1 AS\r\r     SELECT\r            coalesce(hsys.name_,'') AS \"HsysName\",\r            coalesce(facility.name_,'') AS \"FacilityName\",\r            expanded_data.\"Assemble_DayName\" AS \"Assemble_DayName\",\r            expanded_data.\"UserName\" AS \"UserName\",\r            expanded_data.\"Assemble_Date\" AS \"Assemble_Date\",\r            expanded_data.\"HoursAssembly\" AS \"HoursAssembly\",\r            expanded_data.\"InstPerHour\" AS \"InstPerHour\",\r            expanded_data.\"TraysPerHour\" AS \"TraysPerHour\",\r            expanded_data.\"TraysAssembled\" AS \"TraysAssembled\",\r            expanded_data.\"Assemble_DayOfWeek\" AS \"Assemble_DayOfWeek\",\r            expanded_data.\"InstAssembled\" AS \"InstAssembled\"\r         \r       FROM domo_passthrough\r  LEFT JOIN facility on (domo_passthrough.facility_id = facility.id)\r  LEFT JOIN hsys     on (domo_passthrough.hsys_id = hsys.id)\rCROSS JOIN jsonb_to_recordset(domo_passthrough.data) AS expanded_data (\r            \"Assemble_DayName\" citext,\r            \"UserName\" citext,\r            \"Assemble_Date\" date,\r            \"HoursAssembly\" float8,\r            \"InstPerHour\" float8,\r            \"TraysPerHour\" float8,\r            \"TraysAssembled\" int4,\r            \"Assemble_DayOfWeek\" int4,\r            \"InstAssembled\" int4)\r       \r    WHERE dataset_name = 'TraysPerHour_PG' AND\r          view_version = 1; -- Important! The view knows how to parse out JSONB data packed in this way.\r\rALTER TABLE passthrough.trays_per_hour_pg_v1\r    OWNER TO user_change_structure;\r\r---------------------------------------------\r-- Register view\r---------------------------------------------\rCALL view_register ('passthrough','trays_per_hour_pg_v1','Pulled into ''trays_per_hour_pg'' master (UNION) view, not pulled directly. ','TraysPerHour_PG');",	"postgres_master_view": "/* \rThis view UNIONs all versions of the passthrough format for this DataSet.\r\rComment out or remove any obsolete versions. \r\rUpdate earlier versions, as needed, to produce the same column names as the latest version. \r*/\r\r-- View: passthrough.trays_per_hour_pg\rDROP VIEW IF EXISTS passthrough.trays_per_hour_pg;\r\rCREATE OR REPLACE VIEW passthrough.trays_per_hour_pg AS\r\rSELECT * FROM trays_per_hour_pg_v1;\r\rALTER TABLE passthrough.trays_per_hour_pg\r    OWNER TO user_change_structure;    \r\r---------------------------------------------\r--Register view\r---------------------------------------------\rCALL view_register ('passthrough','trays_per_hour_pg','Master (UNION) view for this DataSet.','TraysPerHour_PG');",	"push_code": "If (False)  // ===========================================\rpgIO_PushDP_TraysPerHourAnalysi\r\r  // DESCRIPTION: Push trays_per_hour_pg_v1 data into domo_passthrough.\r  // Called exclusively by pgIO_BatchPush_DomoPassthrough, which supplies the connection object.\r\r  // Set the following preference to enable pushes:\rPref_SetBool (\"pgIO_DPShouldWrite_TraysPerHour_PG\";True)\r\r// Insert this code into pgIO_BatchPush_DomoPassthrough:\r// Administrator: Aug 8, 2020\rIf (pgIO_DPIsEnabledForThisDataSet (\"TraysPerHour_PG\"))\r$view_version:=1\r$ran_okay:=pgIO_PushDP_TraysPerHourAnalysi ($connection_o;$view_version)\rEnd if \r\r  // Paste these declarations into Compiler_PgIO_DomoPassthrough:\rC_BOOLEAN(pgIO_PushDP_TraysPerHourAnalysi ;$0)\rC_OBJECT(pgIO_PushDP_TraysPerHourAnalysi ;$1)\rC_LONGINT(pgIO_PushDP_TraysPerHourAnalysi ;$2)\r\r// CREATED BY: Administrator\r// DATE: 08/08/2020\r// LAST MODIFIED: \rEnd if   // ============================================\r\rCode_Start (Current method name)\r\rC_BOOLEAN($0;$ran_okay)\rC_OBJECT($1;$connection_o)\rC_LONGINT($2;$view_version)\r\r$connection_o:=$1\r$view_version:=$2\r\r$ran_okay:=False\r\rC_TEXT($dataset_name)\r$dataset_name:=\"TraysPerHour_PG\"\r\rCase of \r: ($connection_o.connection_id<1)\rCode_Err (\"PgSQL_BadConnectionObject\";Object_ToText ($connection_o;True))\r\r:(pgIO_AppShouldPushTable (\"domo_passthrough\")=false)\r\r: (pgIO_DPIsEnabledForThisDataSet ($dataset_name)=False)\r\rElse \rC_COLLECTION($rows_c)\rC_LONGINT($last_con_id)\r$rows_c:=SonarData_TraysPerHourAnalysis($dataset_name;->$last_con_id)  // Call your collection building function here: $rows_c:=FunctionName ($dataset_name;->$last_con_id)\r\rC_OBJECT($options_o)\r$options_o:=New object\r$options_o.dataset_name:=$dataset_name\r$options_o.table_name_for_prefs:=$dataset_name\r$options_o.last_conid:=$last_con_id\r$options_o.view_version:=$view_version // This is the version of the unpacking view on the PG side.\r$options_o.source_id_element_name:=\"UserID\" // Note: dataset_name + unique_id are unique in combination in domo_passthrough.\r$options_o.hsys_id_element_name:=\"HsysID\"\r$options_o.facility_id_element_name:=\"FacilityID\"\r$options_o.key_supplement_element_name:=\"Assemble_Date\"\r$options_o.from_dts_element_name:=\"Assemble_Date\"\r$options_o.to_dts_element_name:=\"Assemble_Date\"\r$options_o.deletion_mode_name:=\"None\" // Records will be added or updated based on matches on the 'UserID' element.\r\r  // The version # below is for domo_passthrough inserts, the underlying table. It's *not* the specific format's version # that's set and used above.\r$ran_okay:=pgIO_Push_DomoPassthrough ($connection_o;2;$rows_c;$options_o)\rEnd case \r\r$0:=$ran_okay\r\rCode_End (Current method name)\r",	"postgres_table": "BEGIN;\r \rDROP TABLE IF EXISTS ascendco.trays_per_hour CASCADE;\r \rCREATE TABLE IF NOT EXISTS ascendco.trays_per_hour (\r    id uuid NOT NULL DEFAULT gen_random_uuid(),\r    hsys_name citext NOT NULL DEFAULT NULL,\r    assemble_day_name citext NOT NULL DEFAULT NULL,\r    user_name citext NOT NULL DEFAULT NULL,\r    facility_name citext NOT NULL DEFAULT NULL,\r    assemble_date date NOT NULL DEFAULT NULL,\r    hours_assembly float8 NOT NULL DEFAULT NULL,\r    inst_per_hour float8 NOT NULL DEFAULT NULL,\r    trays_per_hour float8 NOT NULL DEFAULT NULL,\r    trays_assembled int4 NOT NULL DEFAULT NULL,\r    assemble_day_of_week int4 NOT NULL DEFAULT NULL,\r    inst_assembled int4 NOT NULL DEFAULT NULL,\r    hsys_id uuid NOT NULL DEFAULT NULL,\r    user_id uuid NOT NULL DEFAULT NULL,\r    facility_id uuid NOT NULL DEFAULT NULL,\r \rCONSTRAINT trays_per_hour_id_pkey\r    PRIMARY KEY (id)\r);\r \rALTER TABLE ascendco.trays_per_hour OWNER TO user_change_structure;\rCOMMIT;\r",	"populate_sql": "INSERT INTO ascendco.trays_per_hour (\r            hsys_name,\r            assemble_day_name,\r            user_name,\r            facility_name,\r            assemble_date,\r            hours_assembly,\r            inst_per_hour,\r            trays_per_hour,\r            trays_assembled,\r            assemble_day_of_week,\r            inst_assembled,\r            hsys_id,\r            user_id,\r            facility_id)\r\r      SELECT \r             expanded_data.\"HsysName\",\r             expanded_data.\"Assemble_DayName\",\r             expanded_data.\"UserName\",\r             expanded_data.\"FacilityName\",\r             expanded_data.\"Assemble_Date\",\r             expanded_data.\"HoursAssembly\",\r             expanded_data.\"InstPerHour\",\r             expanded_data.\"TraysPerHour\",\r             expanded_data.\"TraysAssembled\",\r             expanded_data.\"Assemble_DayOfWeek\",\r             expanded_data.\"InstAssembled\",\r             expanded_data.\"HsysID\",\r             expanded_data.\"UserID\",\r             expanded_data.\"FacilityID\"\r\r        FROM domo_passthrough\r  CROSS JOIN jsonb_to_recordset(domo_passthrough.data) as expanded_data (\r             \"HsysName\" citext,\r             \"Assemble_DayName\" citext,\r             \"UserName\" citext,\r             \"FacilityName\" citext,\r             \"Assemble_Date\" date,\r             \"HoursAssembly\" float8,\r             \"InstPerHour\" float8,\r             \"TraysPerHour\" float8,\r             \"TraysAssembled\" int4,\r             \"Assemble_DayOfWeek\" int4,\r             \"InstAssembled\" int4,\r             \"HsysID\" uuid,\r             \"UserID\" uuid,\r             \"FacilityID\" uuid)\r\r       WHERE dataset_name = 'TraysPerHour_PG' AND\r             view_version = '1'\r",	"pgconfig_code": "If (False)\rPgConfigSetup_DP_TraysPerHourAn \r\r  // DESCRIPTION: Seed/reseed sonar_backlog passthrough.\r\r  // The naming convention is\r  // PgConfigSetup_DP_DataSetName, like\r  // PgConfigSetup_DP_SonarBacklog\r\r  // The goal here is to add a record, if none exists,\r  // and to refresh a record, if one does exist.\r  // That's what the \"force enable\" is about. In case there's\r  // a record in place, and it's set as disabled, you can leave\r  // the current enable/disable setting alone (no $1), or force\r  // the enabled state to True. Don't have a forced disabled option.\r  // But, you can alwys add one.\r  //\r  // Add the following line to the Domo Passthrough ('DP') section of PgConfig_SeedEverything\r$validation_c:=$validation_c.combine(PgConfigSetup_DP_TraysPerHourAn (True)) // Modified by: PgBuild_DomoPassBuildCode on Aug 8, 2020\r\r  // Add these declarations to Compiler_PgConfig\rC_COLLECTION(PgConfigSetup_DP_TraysPerHourAn ;$0) // Modified by: PgBuild_DomoPassBuildCode on Aug 8, 2020\rC_BOOLEAN(PgConfigSetup_DP_TraysPerHourAn ;$1) // Modified by: PgBuild_DomoPassBuildCode on Aug 8, 2020\r\r  // CREATED BY: PgBuild_DomoPassBuildCode.\r  // DATE: Aug 8, 2020\r  // LAST MODIFIED:\rEnd if   // ============================================\r\rCode_Start (Current method name)\r\rC_COLLECTION($0;$validation_c)  // Should have 0 elements, anything else indicates an error.\rC_BOOLEAN($1;$force_enable)\r\r$force_enable:=False\rIf (Count parameters>=1)\r$force_enable:=$1\rEnd if \r\r$validation_c:=New collection\r\rC_TEXT($target_path)\rC_TEXT($target_id)\rC_BOOLEAN($loaded_b)\r$target_path:=\"ascendco.domo_passthrough.passthrough.trays_per_hour_pg\"\r$target_id:=PgConfigTarget_GetIDByUnique ($target_path)\r\rIf ($target_id#\"\")\r$loaded_b:=PgConfigTarget_LoadByUnique ($target_path)\rIf (Not($loaded_b))\rCode_Err (\"\";\"Could not lock [PgIOTarget] record for \"+$target_path+\".\")\rEnd if \rEnd if \r\rIf (Code_NotErr )\r\rIf ($target_id=\"\")  // No record found.\r$target_id:=PgConfigTarget_New (\"ascendco\";\"domo_passthrough\";\"passthrough\";\"trays_per_hour_pg\")\rEnd if \r\r  // Override defaults...some assignments may be for emphasis.\r[PgIOTarget]PushMethodName:=\"pgIO_PushDP_TraysPerHourAnalysi\"\r[PgIOTarget]LastPushedTrackingType:=\"Date\"\r[PgIOTarget]LastPushedFilterIDOn:=\"None\"\r[PgIOTarget]CollectionBuildingMethodName:=\"SonarData_TraysPerHourAnalysis\"\r[PgIOTarget]DomoDataSetName:=\"TraysPerHour_PG\"\r[PgIOTarget]CopyTypeName:=pgIOMap_Copy_Type_Passthrough\r\r[PgIOTarget]DomoDataSetName:=\"TraysPerHour_PG\"\r\rIf ($force_enable)\r[PgIOTarget]PushIsEnabled:=True\rEnd if \r\rSAVE RECORD([PgIOTarget])\rUNLOAD RECORD([PgIOTarget])\r\r  //------------------------------------------------------------------------\r  // Mark start time to help identify unchanged (stale) records\r  //------------------------------------------------------------------------\rC_TEXT($start_dts)\r$start_dts:=utl_DT_Get \r\r  //------------------------------------------------------------------------\r  // Seed last pushed records\r  //------------------------------------------------------------------------\rPgConfigLastPushed_SeedTarget ($target_id)\r\r  //------------------------------------------------------------------------\r  // Define columns: Columns are tied to a specific version\r  //------------------------------------------------------------------------\rC_POINTER($nil)\r$nil:=Pointer_GetNil \r\rC_TEXT($version_id)\r\rIf (True)  \r$version_id:=PgConfigVersion_GetIDByTargetID ($target_id;1)\rIf (utl_UUID_isEmpty ($version_id))\r$version_id:=PgConfigVersion_New ($target_id;1)\rEnd if \r\rPgConfigColumn_Upsert ($version_id;\"calculated\";$nil;\"id\";\"uuid\")\rPgConfigColumn_Upsert ($version_id;\"calculated\";$nil;\"source_id\";\"uuid\")\rPgConfigColumn_Upsert ($version_id;\"calculated\";$nil;\"hsys_id\";\"uuid\")\rPgConfigColumn_Upsert ($version_id;\"calculated\";$nil;\"facility_id\";\"uuid\")\rPgConfigColumn_Upsert ($version_id;\"calculated\";$nil;\"pg_con_id\";\"longint\")\rPgConfigColumn_Upsert ($version_id;\"calculated\";$nil;\"view_version\";\"longint\")\rPgConfigColumn_Upsert ($version_id;\"calculated\";$nil;\"dataset_name\";\"text\")\rPgConfigColumn_Upsert ($version_id;\"calculated\";$nil;\"data\";\"object\")\rPgConfigColumn_Upsert ($version_id;\"calculated\";$nil;\"key_supplement\";\"text\")\rPgConfigColumn_Upsert ($version_id;\"calculated\";$nil;\"from_dts\";\"dts\")\rPgConfigColumn_Upsert ($version_id;\"calculated\";$nil;\"to_dts\";\"dts\")\r\r  //------------------------------------------------------------------------\r  // Define the embedded columns in the domo_passthrough.data field\r  //------------------------------------------------------------------------\rPgConfigColumn_Upsert ($version_id;\"embedded\";$nil;\"hsys_name\";\"\";\"\";\"citext\";\"data\";\"HsysName\";\"HsysName\";True;True)\rPgConfigColumn_Upsert ($version_id;\"embedded\";$nil;\"assemble_day_name\";\"\";\"\";\"citext\";\"data\";\"Assemble_DayName\";\"Assemble_DayName\";True;True)\rPgConfigColumn_Upsert ($version_id;\"embedded\";$nil;\"user_name\";\"\";\"\";\"citext\";\"data\";\"UserName\";\"UserName\";True;True)\rPgConfigColumn_Upsert ($version_id;\"embedded\";$nil;\"facility_name\";\"\";\"\";\"citext\";\"data\";\"FacilityName\";\"FacilityName\";True;True)\rPgConfigColumn_Upsert ($version_id;\"embedded\";$nil;\"assemble_date\";\"\";\"\";\"date\";\"data\";\"Assemble_Date\";\"Assemble_Date\";True;True)\rPgConfigColumn_Upsert ($version_id;\"embedded\";$nil;\"hours_assembly\";\"\";\"\";\"float8\";\"data\";\"HoursAssembly\";\"HoursAssembly\";True;True)\rPgConfigColumn_Upsert ($version_id;\"embedded\";$nil;\"inst_per_hour\";\"\";\"\";\"float8\";\"data\";\"InstPerHour\";\"InstPerHour\";True;True)\rPgConfigColumn_Upsert ($version_id;\"embedded\";$nil;\"trays_per_hour\";\"\";\"\";\"float8\";\"data\";\"TraysPerHour\";\"TraysPerHour\";True;True)\rPgConfigColumn_Upsert ($version_id;\"embedded\";$nil;\"trays_assembled\";\"\";\"\";\"int4\";\"data\";\"TraysAssembled\";\"TraysAssembled\";True;True)\rPgConfigColumn_Upsert ($version_id;\"embedded\";$nil;\"assemble_day_of_week\";\"\";\"\";\"int4\";\"data\";\"Assemble_DayOfWeek\";\"Assemble_DayOfWeek\";True;True)\rPgConfigColumn_Upsert ($version_id;\"embedded\";$nil;\"inst_assembled\";\"\";\"\";\"int4\";\"data\";\"InstAssembled\";\"InstAssembled\";True;True)\rPgConfigColumn_Upsert ($version_id;\"embedded\";$nil;\"hsys_id\";\"\";\"\";\"uuid\";\"data\";\"HsysID\";\"HsysID\";True;False)\rPgConfigColumn_Upsert ($version_id;\"embedded\";$nil;\"user_id\";\"\";\"\";\"uuid\";\"data\";\"UserID\";\"UserID\";True;False)\rPgConfigColumn_Upsert ($version_id;\"embedded\";$nil;\"facility_id\";\"\";\"\";\"uuid\";\"data\";\"FacilityID\";\"FacilityID\";True;False)\rEnd if \r\r  //------------------------------------------------------------------------\r  // Set the active version\r  //------------------------------------------------------------------------\rPgConfigTarget_SetCurrentVersID ($target_id;$version_id)\r\r  //------------------------------------------------------------------------\r  // Define who *may* push\r  //------------------------------------------------------------------------\r  // Note: You can't change who may push in 4D alone, the permissions must be updated in Postgres.\r  // If you need to push as an unsupported user, let David know.\rPgConfigTargetUserLink_Upsert ($target_id;PgSQL_User_Iceberg;True;False)  // User;May push?;May pull?\rPgConfigTargetUserLink_Upsert ($target_id;PgSQL_User_Iceberg_Remote;True;False)\rPgConfigTargetUserLink_Upsert ($target_id;PgSQL_User_Leviathan;True;False)\rPgConfigTargetUserLink_Upsert ($target_id;PgSQL_User_Sonar;True;False)\r\r  //------------------------------------------------------------------------\r  // Cleanup any stale values\r  //------------------------------------------------------------------------\rPgConfig_Cleanup ($target_id;$version_id;$start_dts)\r\r  //------------------------------------------------------------------------\r  // Validate table and columns\r  //------------------------------------------------------------------------\rC_COLLECTION($validation_c)\r$validation_c:=PgConfigTarget_Validate ($target_path;\"\";True)\r\rEnd if \r\r$0:=$validation_c\r\rCode_End (Current method name)\r",	"element_map_c": [		{			"include": true,			"json_name": "HsysName",			"domo_name": "HsysName",			"postgres_name": "hsys_name",			"is_supported": true,			"json_type": "string",			"postgres_type": "citext"		},		{			"include": true,			"json_name": "Assemble_DayName",			"domo_name": "Assemble_DayName",			"postgres_name": "assemble_day_name",			"is_supported": true,			"json_type": "string",			"postgres_type": "citext"		},		{			"include": true,			"json_name": "UserName",			"domo_name": "UserName",			"postgres_name": "user_name",			"is_supported": true,			"json_type": "string",			"postgres_type": "citext"		},		{			"include": true,			"json_name": "FacilityName",			"domo_name": "FacilityName",			"postgres_name": "facility_name",			"is_supported": true,			"json_type": "string",			"postgres_type": "citext"		},		{			"include": true,			"json_name": "Assemble_Date",			"domo_name": "Assemble_Date",			"postgres_name": "assemble_date",			"is_supported": true,			"json_type": "string",			"postgres_type": "date"		},		{			"include": true,			"json_name": "HoursAssembly",			"domo_name": "HoursAssembly",			"postgres_name": "hours_assembly",			"is_supported": true,			"json_type": "number",			"postgres_type": "float8"		},		{			"include": true,			"json_name": "InstPerHour",			"domo_name": "InstPerHour",			"postgres_name": "inst_per_hour",			"is_supported": true,			"json_type": "number",			"postgres_type": "float8"		},		{			"include": true,			"json_name": "TraysPerHour",			"domo_name": "TraysPerHour",			"postgres_name": "trays_per_hour",			"is_supported": true,			"json_type": "number",			"postgres_type": "float8"		},		{			"include": true,			"json_name": "TraysAssembled",			"domo_name": "TraysAssembled",			"postgres_name": "trays_assembled",			"is_supported": true,			"json_type": "number",			"postgres_type": "int4"		},		{			"include": true,			"json_name": "Assemble_DayOfWeek",			"domo_name": "Assemble_DayOfWeek",			"postgres_name": "assemble_day_of_week",			"is_supported": true,			"json_type": "number",			"postgres_type": "int4"		},		{			"include": true,			"json_name": "InstAssembled",			"domo_name": "InstAssembled",			"postgres_name": "inst_assembled",			"is_supported": true,			"json_type": "number",			"postgres_type": "int4"		},		{			"include": false,			"json_name": "HsysID",			"domo_name": "HsysID",			"postgres_name": "hsys_id",			"is_supported": true,			"json_type": "string",			"postgres_type": "uuid"		},		{			"include": false,			"json_name": "UserID",			"domo_name": "UserID",			"postgres_name": "user_id",			"is_supported": true,			"json_type": "string",			"postgres_type": "uuid"		},		{			"include": false,			"json_name": "FacilityID",			"domo_name": "FacilityID",			"postgres_name": "facility_id",			"is_supported": true,			"json_type": "string",			"postgres_type": "uuid"		}	],	"build_hint": "",	"delete_date_range": false,	"source_id_name": "UserID",	"hsys_id_name": "HsysID",	"facility_id_name": "FacilityID",	"key_supplement_name": "Assemble_Date",	"from_dts_name": "Assemble_Date",	"to_dts_name": "Assemble_Date",	"deletion_mode_name": "None",	"tracking_type_name": "Date",	"tracking_filter_on_name": "None",	"pgIOMap_entry": "// trays_per_hour_pg_v1\rIf (Code_NotErr )\r<>pgIOMap_STATIC_c.push(PgIOMap_NewEntry (New object(\\\r\"table_name\";\"domo_passthrough\";\\\r\"schema_name\";\"ascendco\";\\\r\"table_type\";\"view\";\\\r\"passthrough_schema_name\";\"passthrough\";\\\r\"passthrough_view_name\";\"trays_per_hour_pg_v1\";\\\r\"domo_dataset\";\"TraysPerHour_PG\";\\\r\"push_method_name\";\"TraysPerHour_PG\";\\\r\"copy_type_name\";pgIOMap_Copy_Type_Passthrough;\\\r\"ib_source_table_name\";\"\";\\\r\"ib_source_table_number\";0;\\\r\"auto_delete_records\";False;\\\r\"may_push\";Text_ParametersToCommaList (pgIO_App_Type_IceBerg;pgIO_App_Type_IceBerg_Remote;pgIO_App_Type_Leviathan;pgIO_App_Type_SAWS;pgIO_App_Type_Sonar);\\\r\"comment\";\"\")))\rIf ($load_field_map)\r\r// The comments on each line are the Domo column name calculated when this view was set up.\r// Only included elements are included in the map, the stored data may have other columns, like faciltity_id.\r// As formats evolve, the columns may be expanded or renamed a bit manually, so only use the Domo names here as a guide.\r$field_map_c:=New collection\rpgIOMap_NewFieldMapEntry ($field_map_c;\"calculated\";$nil;\"hsys_name\";\"citext\")// HsysName\rpgIOMap_NewFieldMapEntry ($field_map_c;\"calculated\";$nil;\"assemble_day_name\";\"citext\")// Assemble_DayName\rpgIOMap_NewFieldMapEntry ($field_map_c;\"calculated\";$nil;\"user_name\";\"citext\")// UserName\rpgIOMap_NewFieldMapEntry ($field_map_c;\"calculated\";$nil;\"facility_name\";\"citext\")// FacilityName\rpgIOMap_NewFieldMapEntry ($field_map_c;\"calculated\";$nil;\"assemble_date\";\"date\")// Assemble_Date\rpgIOMap_NewFieldMapEntry ($field_map_c;\"calculated\";$nil;\"hours_assembly\";\"float8\")// HoursAssembly\rpgIOMap_NewFieldMapEntry ($field_map_c;\"calculated\";$nil;\"inst_per_hour\";\"float8\")// InstPerHour\rpgIOMap_NewFieldMapEntry ($field_map_c;\"calculated\";$nil;\"trays_per_hour\";\"float8\")// TraysPerHour\rpgIOMap_NewFieldMapEntry ($field_map_c;\"calculated\";$nil;\"trays_assembled\";\"int4\")// TraysAssembled\rpgIOMap_NewFieldMapEntry ($field_map_c;\"calculated\";$nil;\"assemble_day_of_week\";\"int4\")// Assemble_DayOfWeek\rpgIOMap_NewFieldMapEntry ($field_map_c;\"calculated\";$nil;\"inst_assembled\";\"int4\")// InstAssembled\r\rOB SET(<>pgIOMap_STATIC_c[<>pgIOMap_STATIC_c.length-1];\"field_map\";$field_map_c)\rEnd if\rEnd if\r\r"}